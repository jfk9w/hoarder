// Code generated by ogen, DO NOT EDIT.

package firefly

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/Account
type Account struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// If omitted, defaults to true.
	Active OptBool `json:"active"`
	// Order of the account. Is NULL if account is not asset or liability.
	Order       OptNilInt32               `json:"order"`
	Name        string                    `json:"name"`
	Type        ShortAccountTypeProperty  `json:"type"`
	AccountRole OptNilAccountRoleProperty `json:"account_role"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode          OptString `json:"currency_code"`
	CurrencySymbol        OptString `json:"currency_symbol"`
	CurrencyDecimalPlaces OptInt32  `json:"currency_decimal_places"`
	CurrentBalance        OptString `json:"current_balance"`
	// The timestamp for this date is always 23:59:59, to indicate it's the balance at the very END of
	// that particular day.
	CurrentBalanceDate OptDateTime  `json:"current_balance_date"`
	Iban               OptNilString `json:"iban"`
	Bic                OptNilString `json:"bic"`
	AccountNumber      OptNilString `json:"account_number"`
	// Represents the opening balance, the initial amount this account holds.
	OpeningBalance OptString `json:"opening_balance"`
	// Represents the current debt for liabilities.
	CurrentDebt OptNilString `json:"current_debt"`
	// Represents the date of the opening balance.
	OpeningBalanceDate OptNilDateTime `json:"opening_balance_date"`
	VirtualBalance     OptString      `json:"virtual_balance"`
	// If omitted, defaults to true.
	IncludeNetWorth OptBool              `json:"include_net_worth"`
	CreditCardType  OptNilCreditCardType `json:"credit_card_type"`
	// Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for
	// by the bank.
	MonthlyPaymentDate OptNilDateTime           `json:"monthly_payment_date"`
	LiabilityType      OptNilLiabilityType      `json:"liability_type"`
	LiabilityDirection OptNilLiabilityDirection `json:"liability_direction"`
	// Mandatory when type is liability. Interest percentage.
	Interest       OptNilString         `json:"interest"`
	InterestPeriod OptNilInterestPeriod `json:"interest_period"`
	Notes          OptNilString         `json:"notes"`
	// Latitude of the accounts's location, if applicable. Can be used to draw a map.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the accounts's location, if applicable. Can be used to draw a map.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Account) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Account) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetActive returns the value of Active.
func (s *Account) GetActive() OptBool {
	return s.Active
}

// GetOrder returns the value of Order.
func (s *Account) GetOrder() OptNilInt32 {
	return s.Order
}

// GetName returns the value of Name.
func (s *Account) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *Account) GetType() ShortAccountTypeProperty {
	return s.Type
}

// GetAccountRole returns the value of AccountRole.
func (s *Account) GetAccountRole() OptNilAccountRoleProperty {
	return s.AccountRole
}

// GetCurrencyID returns the value of CurrencyID.
func (s *Account) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *Account) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *Account) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *Account) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetCurrentBalance returns the value of CurrentBalance.
func (s *Account) GetCurrentBalance() OptString {
	return s.CurrentBalance
}

// GetCurrentBalanceDate returns the value of CurrentBalanceDate.
func (s *Account) GetCurrentBalanceDate() OptDateTime {
	return s.CurrentBalanceDate
}

// GetIban returns the value of Iban.
func (s *Account) GetIban() OptNilString {
	return s.Iban
}

// GetBic returns the value of Bic.
func (s *Account) GetBic() OptNilString {
	return s.Bic
}

// GetAccountNumber returns the value of AccountNumber.
func (s *Account) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetOpeningBalance returns the value of OpeningBalance.
func (s *Account) GetOpeningBalance() OptString {
	return s.OpeningBalance
}

// GetCurrentDebt returns the value of CurrentDebt.
func (s *Account) GetCurrentDebt() OptNilString {
	return s.CurrentDebt
}

// GetOpeningBalanceDate returns the value of OpeningBalanceDate.
func (s *Account) GetOpeningBalanceDate() OptNilDateTime {
	return s.OpeningBalanceDate
}

// GetVirtualBalance returns the value of VirtualBalance.
func (s *Account) GetVirtualBalance() OptString {
	return s.VirtualBalance
}

// GetIncludeNetWorth returns the value of IncludeNetWorth.
func (s *Account) GetIncludeNetWorth() OptBool {
	return s.IncludeNetWorth
}

// GetCreditCardType returns the value of CreditCardType.
func (s *Account) GetCreditCardType() OptNilCreditCardType {
	return s.CreditCardType
}

// GetMonthlyPaymentDate returns the value of MonthlyPaymentDate.
func (s *Account) GetMonthlyPaymentDate() OptNilDateTime {
	return s.MonthlyPaymentDate
}

// GetLiabilityType returns the value of LiabilityType.
func (s *Account) GetLiabilityType() OptNilLiabilityType {
	return s.LiabilityType
}

// GetLiabilityDirection returns the value of LiabilityDirection.
func (s *Account) GetLiabilityDirection() OptNilLiabilityDirection {
	return s.LiabilityDirection
}

// GetInterest returns the value of Interest.
func (s *Account) GetInterest() OptNilString {
	return s.Interest
}

// GetInterestPeriod returns the value of InterestPeriod.
func (s *Account) GetInterestPeriod() OptNilInterestPeriod {
	return s.InterestPeriod
}

// GetNotes returns the value of Notes.
func (s *Account) GetNotes() OptNilString {
	return s.Notes
}

// GetLatitude returns the value of Latitude.
func (s *Account) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Account) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *Account) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Account) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Account) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetActive sets the value of Active.
func (s *Account) SetActive(val OptBool) {
	s.Active = val
}

// SetOrder sets the value of Order.
func (s *Account) SetOrder(val OptNilInt32) {
	s.Order = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Account) SetType(val ShortAccountTypeProperty) {
	s.Type = val
}

// SetAccountRole sets the value of AccountRole.
func (s *Account) SetAccountRole(val OptNilAccountRoleProperty) {
	s.AccountRole = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *Account) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *Account) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *Account) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *Account) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetCurrentBalance sets the value of CurrentBalance.
func (s *Account) SetCurrentBalance(val OptString) {
	s.CurrentBalance = val
}

// SetCurrentBalanceDate sets the value of CurrentBalanceDate.
func (s *Account) SetCurrentBalanceDate(val OptDateTime) {
	s.CurrentBalanceDate = val
}

// SetIban sets the value of Iban.
func (s *Account) SetIban(val OptNilString) {
	s.Iban = val
}

// SetBic sets the value of Bic.
func (s *Account) SetBic(val OptNilString) {
	s.Bic = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *Account) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetOpeningBalance sets the value of OpeningBalance.
func (s *Account) SetOpeningBalance(val OptString) {
	s.OpeningBalance = val
}

// SetCurrentDebt sets the value of CurrentDebt.
func (s *Account) SetCurrentDebt(val OptNilString) {
	s.CurrentDebt = val
}

// SetOpeningBalanceDate sets the value of OpeningBalanceDate.
func (s *Account) SetOpeningBalanceDate(val OptNilDateTime) {
	s.OpeningBalanceDate = val
}

// SetVirtualBalance sets the value of VirtualBalance.
func (s *Account) SetVirtualBalance(val OptString) {
	s.VirtualBalance = val
}

// SetIncludeNetWorth sets the value of IncludeNetWorth.
func (s *Account) SetIncludeNetWorth(val OptBool) {
	s.IncludeNetWorth = val
}

// SetCreditCardType sets the value of CreditCardType.
func (s *Account) SetCreditCardType(val OptNilCreditCardType) {
	s.CreditCardType = val
}

// SetMonthlyPaymentDate sets the value of MonthlyPaymentDate.
func (s *Account) SetMonthlyPaymentDate(val OptNilDateTime) {
	s.MonthlyPaymentDate = val
}

// SetLiabilityType sets the value of LiabilityType.
func (s *Account) SetLiabilityType(val OptNilLiabilityType) {
	s.LiabilityType = val
}

// SetLiabilityDirection sets the value of LiabilityDirection.
func (s *Account) SetLiabilityDirection(val OptNilLiabilityDirection) {
	s.LiabilityDirection = val
}

// SetInterest sets the value of Interest.
func (s *Account) SetInterest(val OptNilString) {
	s.Interest = val
}

// SetInterestPeriod sets the value of InterestPeriod.
func (s *Account) SetInterestPeriod(val OptNilInterestPeriod) {
	s.InterestPeriod = val
}

// SetNotes sets the value of Notes.
func (s *Account) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetLatitude sets the value of Latitude.
func (s *Account) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Account) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *Account) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// Ref: #/components/schemas/AccountArray
type AccountArray struct {
	Data []AccountRead `json:"data"`
	Meta Meta          `json:"meta"`
}

// GetData returns the value of Data.
func (s *AccountArray) GetData() []AccountRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *AccountArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *AccountArray) SetData(val []AccountRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *AccountArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*AccountArray) listAccountByCurrencyRes() {}
func (*AccountArray) listAccountRes()           {}
func (*AccountArray) searchAccountsRes()        {}

// Ref: #/components/schemas/AccountRead
type AccountRead struct {
	// Immutable value.
	Type       string  `json:"type"`
	ID         string  `json:"id"`
	Attributes Account `json:"attributes"`
}

// GetType returns the value of Type.
func (s *AccountRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *AccountRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *AccountRead) GetAttributes() Account {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *AccountRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AccountRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *AccountRead) SetAttributes(val Account) {
	s.Attributes = val
}

// Is only mandatory when the type is asset.
// Ref: #/components/schemas/AccountRoleProperty
type AccountRoleProperty string

const (
	AccountRolePropertyDefaultAsset    AccountRoleProperty = "defaultAsset"
	AccountRolePropertySharedAsset     AccountRoleProperty = "sharedAsset"
	AccountRolePropertySavingAsset     AccountRoleProperty = "savingAsset"
	AccountRolePropertyCcAsset         AccountRoleProperty = "ccAsset"
	AccountRolePropertyCashWalletAsset AccountRoleProperty = "cashWalletAsset"
)

// AllValues returns all AccountRoleProperty values.
func (AccountRoleProperty) AllValues() []AccountRoleProperty {
	return []AccountRoleProperty{
		AccountRolePropertyDefaultAsset,
		AccountRolePropertySharedAsset,
		AccountRolePropertySavingAsset,
		AccountRolePropertyCcAsset,
		AccountRolePropertyCashWalletAsset,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountRoleProperty) MarshalText() ([]byte, error) {
	switch s {
	case AccountRolePropertyDefaultAsset:
		return []byte(s), nil
	case AccountRolePropertySharedAsset:
		return []byte(s), nil
	case AccountRolePropertySavingAsset:
		return []byte(s), nil
	case AccountRolePropertyCcAsset:
		return []byte(s), nil
	case AccountRolePropertyCashWalletAsset:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountRoleProperty) UnmarshalText(data []byte) error {
	switch AccountRoleProperty(data) {
	case AccountRolePropertyDefaultAsset:
		*s = AccountRolePropertyDefaultAsset
		return nil
	case AccountRolePropertySharedAsset:
		*s = AccountRolePropertySharedAsset
		return nil
	case AccountRolePropertySavingAsset:
		*s = AccountRolePropertySavingAsset
		return nil
	case AccountRolePropertyCcAsset:
		*s = AccountRolePropertyCcAsset
		return nil
	case AccountRolePropertyCashWalletAsset:
		*s = AccountRolePropertyCashWalletAsset
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountSearchFieldFilter
type AccountSearchFieldFilter string

const (
	AccountSearchFieldFilterAll    AccountSearchFieldFilter = "all"
	AccountSearchFieldFilterIban   AccountSearchFieldFilter = "iban"
	AccountSearchFieldFilterName   AccountSearchFieldFilter = "name"
	AccountSearchFieldFilterNumber AccountSearchFieldFilter = "number"
	AccountSearchFieldFilterID     AccountSearchFieldFilter = "id"
)

// AllValues returns all AccountSearchFieldFilter values.
func (AccountSearchFieldFilter) AllValues() []AccountSearchFieldFilter {
	return []AccountSearchFieldFilter{
		AccountSearchFieldFilterAll,
		AccountSearchFieldFilterIban,
		AccountSearchFieldFilterName,
		AccountSearchFieldFilterNumber,
		AccountSearchFieldFilterID,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountSearchFieldFilter) MarshalText() ([]byte, error) {
	switch s {
	case AccountSearchFieldFilterAll:
		return []byte(s), nil
	case AccountSearchFieldFilterIban:
		return []byte(s), nil
	case AccountSearchFieldFilterName:
		return []byte(s), nil
	case AccountSearchFieldFilterNumber:
		return []byte(s), nil
	case AccountSearchFieldFilterID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountSearchFieldFilter) UnmarshalText(data []byte) error {
	switch AccountSearchFieldFilter(data) {
	case AccountSearchFieldFilterAll:
		*s = AccountSearchFieldFilterAll
		return nil
	case AccountSearchFieldFilterIban:
		*s = AccountSearchFieldFilterIban
		return nil
	case AccountSearchFieldFilterName:
		*s = AccountSearchFieldFilterName
		return nil
	case AccountSearchFieldFilterNumber:
		*s = AccountSearchFieldFilterNumber
		return nil
	case AccountSearchFieldFilterID:
		*s = AccountSearchFieldFilterID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountSingle
type AccountSingle struct {
	Data AccountRead `json:"data"`
}

// GetData returns the value of Data.
func (s *AccountSingle) GetData() AccountRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *AccountSingle) SetData(val AccountRead) {
	s.Data = val
}

func (*AccountSingle) getAccountRes()    {}
func (*AccountSingle) storeAccountRes()  {}
func (*AccountSingle) updateAccountRes() {}

// Ref: #/components/schemas/AccountStore
type AccountStore struct {
	Name          string                   `json:"name"`
	Type          ShortAccountTypeProperty `json:"type"`
	Iban          OptNilString             `json:"iban"`
	Bic           OptNilString             `json:"bic"`
	AccountNumber OptNilString             `json:"account_number"`
	// Represents the opening balance, the initial amount this account holds.
	OpeningBalance OptString `json:"opening_balance"`
	// Represents the date of the opening balance.
	OpeningBalanceDate OptNilDateTime `json:"opening_balance_date"`
	VirtualBalance     OptString      `json:"virtual_balance"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode OptString `json:"currency_code"`
	// If omitted, defaults to true.
	Active OptBool `json:"active"`
	// Order of the account.
	Order OptInt32 `json:"order"`
	// If omitted, defaults to true.
	IncludeNetWorth OptBool                   `json:"include_net_worth"`
	AccountRole     OptNilAccountRoleProperty `json:"account_role"`
	CreditCardType  OptNilCreditCardType      `json:"credit_card_type"`
	// Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for
	// by the bank.
	MonthlyPaymentDate OptNilDateTime           `json:"monthly_payment_date"`
	LiabilityType      OptNilLiabilityType      `json:"liability_type"`
	LiabilityDirection OptNilLiabilityDirection `json:"liability_direction"`
	// Mandatory when type is liability. Interest percentage.
	Interest       OptNilString         `json:"interest"`
	InterestPeriod OptNilInterestPeriod `json:"interest_period"`
	Notes          OptNilString         `json:"notes"`
	// Latitude of the accounts's location, if applicable. Can be used to draw a map.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the accounts's location, if applicable. Can be used to draw a map.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
}

// GetName returns the value of Name.
func (s *AccountStore) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *AccountStore) GetType() ShortAccountTypeProperty {
	return s.Type
}

// GetIban returns the value of Iban.
func (s *AccountStore) GetIban() OptNilString {
	return s.Iban
}

// GetBic returns the value of Bic.
func (s *AccountStore) GetBic() OptNilString {
	return s.Bic
}

// GetAccountNumber returns the value of AccountNumber.
func (s *AccountStore) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetOpeningBalance returns the value of OpeningBalance.
func (s *AccountStore) GetOpeningBalance() OptString {
	return s.OpeningBalance
}

// GetOpeningBalanceDate returns the value of OpeningBalanceDate.
func (s *AccountStore) GetOpeningBalanceDate() OptNilDateTime {
	return s.OpeningBalanceDate
}

// GetVirtualBalance returns the value of VirtualBalance.
func (s *AccountStore) GetVirtualBalance() OptString {
	return s.VirtualBalance
}

// GetCurrencyID returns the value of CurrencyID.
func (s *AccountStore) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *AccountStore) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetActive returns the value of Active.
func (s *AccountStore) GetActive() OptBool {
	return s.Active
}

// GetOrder returns the value of Order.
func (s *AccountStore) GetOrder() OptInt32 {
	return s.Order
}

// GetIncludeNetWorth returns the value of IncludeNetWorth.
func (s *AccountStore) GetIncludeNetWorth() OptBool {
	return s.IncludeNetWorth
}

// GetAccountRole returns the value of AccountRole.
func (s *AccountStore) GetAccountRole() OptNilAccountRoleProperty {
	return s.AccountRole
}

// GetCreditCardType returns the value of CreditCardType.
func (s *AccountStore) GetCreditCardType() OptNilCreditCardType {
	return s.CreditCardType
}

// GetMonthlyPaymentDate returns the value of MonthlyPaymentDate.
func (s *AccountStore) GetMonthlyPaymentDate() OptNilDateTime {
	return s.MonthlyPaymentDate
}

// GetLiabilityType returns the value of LiabilityType.
func (s *AccountStore) GetLiabilityType() OptNilLiabilityType {
	return s.LiabilityType
}

// GetLiabilityDirection returns the value of LiabilityDirection.
func (s *AccountStore) GetLiabilityDirection() OptNilLiabilityDirection {
	return s.LiabilityDirection
}

// GetInterest returns the value of Interest.
func (s *AccountStore) GetInterest() OptNilString {
	return s.Interest
}

// GetInterestPeriod returns the value of InterestPeriod.
func (s *AccountStore) GetInterestPeriod() OptNilInterestPeriod {
	return s.InterestPeriod
}

// GetNotes returns the value of Notes.
func (s *AccountStore) GetNotes() OptNilString {
	return s.Notes
}

// GetLatitude returns the value of Latitude.
func (s *AccountStore) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *AccountStore) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *AccountStore) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// SetName sets the value of Name.
func (s *AccountStore) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *AccountStore) SetType(val ShortAccountTypeProperty) {
	s.Type = val
}

// SetIban sets the value of Iban.
func (s *AccountStore) SetIban(val OptNilString) {
	s.Iban = val
}

// SetBic sets the value of Bic.
func (s *AccountStore) SetBic(val OptNilString) {
	s.Bic = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *AccountStore) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetOpeningBalance sets the value of OpeningBalance.
func (s *AccountStore) SetOpeningBalance(val OptString) {
	s.OpeningBalance = val
}

// SetOpeningBalanceDate sets the value of OpeningBalanceDate.
func (s *AccountStore) SetOpeningBalanceDate(val OptNilDateTime) {
	s.OpeningBalanceDate = val
}

// SetVirtualBalance sets the value of VirtualBalance.
func (s *AccountStore) SetVirtualBalance(val OptString) {
	s.VirtualBalance = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *AccountStore) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *AccountStore) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetActive sets the value of Active.
func (s *AccountStore) SetActive(val OptBool) {
	s.Active = val
}

// SetOrder sets the value of Order.
func (s *AccountStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetIncludeNetWorth sets the value of IncludeNetWorth.
func (s *AccountStore) SetIncludeNetWorth(val OptBool) {
	s.IncludeNetWorth = val
}

// SetAccountRole sets the value of AccountRole.
func (s *AccountStore) SetAccountRole(val OptNilAccountRoleProperty) {
	s.AccountRole = val
}

// SetCreditCardType sets the value of CreditCardType.
func (s *AccountStore) SetCreditCardType(val OptNilCreditCardType) {
	s.CreditCardType = val
}

// SetMonthlyPaymentDate sets the value of MonthlyPaymentDate.
func (s *AccountStore) SetMonthlyPaymentDate(val OptNilDateTime) {
	s.MonthlyPaymentDate = val
}

// SetLiabilityType sets the value of LiabilityType.
func (s *AccountStore) SetLiabilityType(val OptNilLiabilityType) {
	s.LiabilityType = val
}

// SetLiabilityDirection sets the value of LiabilityDirection.
func (s *AccountStore) SetLiabilityDirection(val OptNilLiabilityDirection) {
	s.LiabilityDirection = val
}

// SetInterest sets the value of Interest.
func (s *AccountStore) SetInterest(val OptNilString) {
	s.Interest = val
}

// SetInterestPeriod sets the value of InterestPeriod.
func (s *AccountStore) SetInterestPeriod(val OptNilInterestPeriod) {
	s.InterestPeriod = val
}

// SetNotes sets the value of Notes.
func (s *AccountStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetLatitude sets the value of Latitude.
func (s *AccountStore) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *AccountStore) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *AccountStore) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// Ref: #/components/schemas/AccountTypeFilter
type AccountTypeFilter string

const (
	AccountTypeFilterAll                   AccountTypeFilter = "all"
	AccountTypeFilterAsset                 AccountTypeFilter = "asset"
	AccountTypeFilterCash                  AccountTypeFilter = "cash"
	AccountTypeFilterExpense               AccountTypeFilter = "expense"
	AccountTypeFilterRevenue               AccountTypeFilter = "revenue"
	AccountTypeFilterSpecial               AccountTypeFilter = "special"
	AccountTypeFilterHidden                AccountTypeFilter = "hidden"
	AccountTypeFilterLiability             AccountTypeFilter = "liability"
	AccountTypeFilterLiabilities           AccountTypeFilter = "liabilities"
	AccountTypeFilterDefaultAccount        AccountTypeFilter = "Default account"
	AccountTypeFilterCashAccount           AccountTypeFilter = "Cash account"
	AccountTypeFilterAssetAccount          AccountTypeFilter = "Asset account"
	AccountTypeFilterExpenseAccount        AccountTypeFilter = "Expense account"
	AccountTypeFilterRevenueAccount        AccountTypeFilter = "Revenue account"
	AccountTypeFilterInitialBalanceAccount AccountTypeFilter = "Initial balance account"
	AccountTypeFilterBeneficiaryAccount    AccountTypeFilter = "Beneficiary account"
	AccountTypeFilterImportAccount         AccountTypeFilter = "Import account"
	AccountTypeFilterReconciliationAccount AccountTypeFilter = "Reconciliation account"
	AccountTypeFilterLoan                  AccountTypeFilter = "Loan"
	AccountTypeFilterDebt                  AccountTypeFilter = "Debt"
	AccountTypeFilterMortgage              AccountTypeFilter = "Mortgage"
)

// AllValues returns all AccountTypeFilter values.
func (AccountTypeFilter) AllValues() []AccountTypeFilter {
	return []AccountTypeFilter{
		AccountTypeFilterAll,
		AccountTypeFilterAsset,
		AccountTypeFilterCash,
		AccountTypeFilterExpense,
		AccountTypeFilterRevenue,
		AccountTypeFilterSpecial,
		AccountTypeFilterHidden,
		AccountTypeFilterLiability,
		AccountTypeFilterLiabilities,
		AccountTypeFilterDefaultAccount,
		AccountTypeFilterCashAccount,
		AccountTypeFilterAssetAccount,
		AccountTypeFilterExpenseAccount,
		AccountTypeFilterRevenueAccount,
		AccountTypeFilterInitialBalanceAccount,
		AccountTypeFilterBeneficiaryAccount,
		AccountTypeFilterImportAccount,
		AccountTypeFilterReconciliationAccount,
		AccountTypeFilterLoan,
		AccountTypeFilterDebt,
		AccountTypeFilterMortgage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountTypeFilter) MarshalText() ([]byte, error) {
	switch s {
	case AccountTypeFilterAll:
		return []byte(s), nil
	case AccountTypeFilterAsset:
		return []byte(s), nil
	case AccountTypeFilterCash:
		return []byte(s), nil
	case AccountTypeFilterExpense:
		return []byte(s), nil
	case AccountTypeFilterRevenue:
		return []byte(s), nil
	case AccountTypeFilterSpecial:
		return []byte(s), nil
	case AccountTypeFilterHidden:
		return []byte(s), nil
	case AccountTypeFilterLiability:
		return []byte(s), nil
	case AccountTypeFilterLiabilities:
		return []byte(s), nil
	case AccountTypeFilterDefaultAccount:
		return []byte(s), nil
	case AccountTypeFilterCashAccount:
		return []byte(s), nil
	case AccountTypeFilterAssetAccount:
		return []byte(s), nil
	case AccountTypeFilterExpenseAccount:
		return []byte(s), nil
	case AccountTypeFilterRevenueAccount:
		return []byte(s), nil
	case AccountTypeFilterInitialBalanceAccount:
		return []byte(s), nil
	case AccountTypeFilterBeneficiaryAccount:
		return []byte(s), nil
	case AccountTypeFilterImportAccount:
		return []byte(s), nil
	case AccountTypeFilterReconciliationAccount:
		return []byte(s), nil
	case AccountTypeFilterLoan:
		return []byte(s), nil
	case AccountTypeFilterDebt:
		return []byte(s), nil
	case AccountTypeFilterMortgage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountTypeFilter) UnmarshalText(data []byte) error {
	switch AccountTypeFilter(data) {
	case AccountTypeFilterAll:
		*s = AccountTypeFilterAll
		return nil
	case AccountTypeFilterAsset:
		*s = AccountTypeFilterAsset
		return nil
	case AccountTypeFilterCash:
		*s = AccountTypeFilterCash
		return nil
	case AccountTypeFilterExpense:
		*s = AccountTypeFilterExpense
		return nil
	case AccountTypeFilterRevenue:
		*s = AccountTypeFilterRevenue
		return nil
	case AccountTypeFilterSpecial:
		*s = AccountTypeFilterSpecial
		return nil
	case AccountTypeFilterHidden:
		*s = AccountTypeFilterHidden
		return nil
	case AccountTypeFilterLiability:
		*s = AccountTypeFilterLiability
		return nil
	case AccountTypeFilterLiabilities:
		*s = AccountTypeFilterLiabilities
		return nil
	case AccountTypeFilterDefaultAccount:
		*s = AccountTypeFilterDefaultAccount
		return nil
	case AccountTypeFilterCashAccount:
		*s = AccountTypeFilterCashAccount
		return nil
	case AccountTypeFilterAssetAccount:
		*s = AccountTypeFilterAssetAccount
		return nil
	case AccountTypeFilterExpenseAccount:
		*s = AccountTypeFilterExpenseAccount
		return nil
	case AccountTypeFilterRevenueAccount:
		*s = AccountTypeFilterRevenueAccount
		return nil
	case AccountTypeFilterInitialBalanceAccount:
		*s = AccountTypeFilterInitialBalanceAccount
		return nil
	case AccountTypeFilterBeneficiaryAccount:
		*s = AccountTypeFilterBeneficiaryAccount
		return nil
	case AccountTypeFilterImportAccount:
		*s = AccountTypeFilterImportAccount
		return nil
	case AccountTypeFilterReconciliationAccount:
		*s = AccountTypeFilterReconciliationAccount
		return nil
	case AccountTypeFilterLoan:
		*s = AccountTypeFilterLoan
		return nil
	case AccountTypeFilterDebt:
		*s = AccountTypeFilterDebt
		return nil
	case AccountTypeFilterMortgage:
		*s = AccountTypeFilterMortgage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountTypeProperty
type AccountTypeProperty string

const (
	AccountTypePropertyDefaultAccount        AccountTypeProperty = "Default account"
	AccountTypePropertyCashAccount           AccountTypeProperty = "Cash account"
	AccountTypePropertyAssetAccount          AccountTypeProperty = "Asset account"
	AccountTypePropertyExpenseAccount        AccountTypeProperty = "Expense account"
	AccountTypePropertyRevenueAccount        AccountTypeProperty = "Revenue account"
	AccountTypePropertyInitialBalanceAccount AccountTypeProperty = "Initial balance account"
	AccountTypePropertyBeneficiaryAccount    AccountTypeProperty = "Beneficiary account"
	AccountTypePropertyImportAccount         AccountTypeProperty = "Import account"
	AccountTypePropertyReconciliationAccount AccountTypeProperty = "Reconciliation account"
	AccountTypePropertyLoan                  AccountTypeProperty = "Loan"
	AccountTypePropertyDebt                  AccountTypeProperty = "Debt"
	AccountTypePropertyMortgage              AccountTypeProperty = "Mortgage"
)

// AllValues returns all AccountTypeProperty values.
func (AccountTypeProperty) AllValues() []AccountTypeProperty {
	return []AccountTypeProperty{
		AccountTypePropertyDefaultAccount,
		AccountTypePropertyCashAccount,
		AccountTypePropertyAssetAccount,
		AccountTypePropertyExpenseAccount,
		AccountTypePropertyRevenueAccount,
		AccountTypePropertyInitialBalanceAccount,
		AccountTypePropertyBeneficiaryAccount,
		AccountTypePropertyImportAccount,
		AccountTypePropertyReconciliationAccount,
		AccountTypePropertyLoan,
		AccountTypePropertyDebt,
		AccountTypePropertyMortgage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountTypeProperty) MarshalText() ([]byte, error) {
	switch s {
	case AccountTypePropertyDefaultAccount:
		return []byte(s), nil
	case AccountTypePropertyCashAccount:
		return []byte(s), nil
	case AccountTypePropertyAssetAccount:
		return []byte(s), nil
	case AccountTypePropertyExpenseAccount:
		return []byte(s), nil
	case AccountTypePropertyRevenueAccount:
		return []byte(s), nil
	case AccountTypePropertyInitialBalanceAccount:
		return []byte(s), nil
	case AccountTypePropertyBeneficiaryAccount:
		return []byte(s), nil
	case AccountTypePropertyImportAccount:
		return []byte(s), nil
	case AccountTypePropertyReconciliationAccount:
		return []byte(s), nil
	case AccountTypePropertyLoan:
		return []byte(s), nil
	case AccountTypePropertyDebt:
		return []byte(s), nil
	case AccountTypePropertyMortgage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountTypeProperty) UnmarshalText(data []byte) error {
	switch AccountTypeProperty(data) {
	case AccountTypePropertyDefaultAccount:
		*s = AccountTypePropertyDefaultAccount
		return nil
	case AccountTypePropertyCashAccount:
		*s = AccountTypePropertyCashAccount
		return nil
	case AccountTypePropertyAssetAccount:
		*s = AccountTypePropertyAssetAccount
		return nil
	case AccountTypePropertyExpenseAccount:
		*s = AccountTypePropertyExpenseAccount
		return nil
	case AccountTypePropertyRevenueAccount:
		*s = AccountTypePropertyRevenueAccount
		return nil
	case AccountTypePropertyInitialBalanceAccount:
		*s = AccountTypePropertyInitialBalanceAccount
		return nil
	case AccountTypePropertyBeneficiaryAccount:
		*s = AccountTypePropertyBeneficiaryAccount
		return nil
	case AccountTypePropertyImportAccount:
		*s = AccountTypePropertyImportAccount
		return nil
	case AccountTypePropertyReconciliationAccount:
		*s = AccountTypePropertyReconciliationAccount
		return nil
	case AccountTypePropertyLoan:
		*s = AccountTypePropertyLoan
		return nil
	case AccountTypePropertyDebt:
		*s = AccountTypePropertyDebt
		return nil
	case AccountTypePropertyMortgage:
		*s = AccountTypePropertyMortgage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AccountUpdate
type AccountUpdate struct {
	Name               string         `json:"name"`
	Iban               OptNilString   `json:"iban"`
	Bic                OptNilString   `json:"bic"`
	AccountNumber      OptNilString   `json:"account_number"`
	OpeningBalance     OptString      `json:"opening_balance"`
	OpeningBalanceDate OptNilDateTime `json:"opening_balance_date"`
	VirtualBalance     OptString      `json:"virtual_balance"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode OptString `json:"currency_code"`
	// If omitted, defaults to true.
	Active OptBool `json:"active"`
	// Order of the account.
	Order OptInt32 `json:"order"`
	// If omitted, defaults to true.
	IncludeNetWorth OptBool                   `json:"include_net_worth"`
	AccountRole     OptNilAccountRoleProperty `json:"account_role"`
	CreditCardType  OptNilCreditCardType      `json:"credit_card_type"`
	// Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for
	// by the bank.
	MonthlyPaymentDate OptNilDateTime      `json:"monthly_payment_date"`
	LiabilityType      OptNilLiabilityType `json:"liability_type"`
	// Mandatory when type is liability. Interest percentage.
	Interest       OptNilString         `json:"interest"`
	InterestPeriod OptNilInterestPeriod `json:"interest_period"`
	Notes          OptNilString         `json:"notes"`
	// Latitude of the account's location, if applicable. Can be used to draw a map. If omitted, the
	// existing location will be kept. If submitted as NULL, the current location will be removed.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the account's location, if applicable. Can be used to draw a map. If omitted, the
	// existing location will be kept. If submitted as NULL, the current location will be removed.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels. If omitted, the existing location will
	// be kept. If submitted as NULL, the current location will be removed.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
}

// GetName returns the value of Name.
func (s *AccountUpdate) GetName() string {
	return s.Name
}

// GetIban returns the value of Iban.
func (s *AccountUpdate) GetIban() OptNilString {
	return s.Iban
}

// GetBic returns the value of Bic.
func (s *AccountUpdate) GetBic() OptNilString {
	return s.Bic
}

// GetAccountNumber returns the value of AccountNumber.
func (s *AccountUpdate) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetOpeningBalance returns the value of OpeningBalance.
func (s *AccountUpdate) GetOpeningBalance() OptString {
	return s.OpeningBalance
}

// GetOpeningBalanceDate returns the value of OpeningBalanceDate.
func (s *AccountUpdate) GetOpeningBalanceDate() OptNilDateTime {
	return s.OpeningBalanceDate
}

// GetVirtualBalance returns the value of VirtualBalance.
func (s *AccountUpdate) GetVirtualBalance() OptString {
	return s.VirtualBalance
}

// GetCurrencyID returns the value of CurrencyID.
func (s *AccountUpdate) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *AccountUpdate) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetActive returns the value of Active.
func (s *AccountUpdate) GetActive() OptBool {
	return s.Active
}

// GetOrder returns the value of Order.
func (s *AccountUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetIncludeNetWorth returns the value of IncludeNetWorth.
func (s *AccountUpdate) GetIncludeNetWorth() OptBool {
	return s.IncludeNetWorth
}

// GetAccountRole returns the value of AccountRole.
func (s *AccountUpdate) GetAccountRole() OptNilAccountRoleProperty {
	return s.AccountRole
}

// GetCreditCardType returns the value of CreditCardType.
func (s *AccountUpdate) GetCreditCardType() OptNilCreditCardType {
	return s.CreditCardType
}

// GetMonthlyPaymentDate returns the value of MonthlyPaymentDate.
func (s *AccountUpdate) GetMonthlyPaymentDate() OptNilDateTime {
	return s.MonthlyPaymentDate
}

// GetLiabilityType returns the value of LiabilityType.
func (s *AccountUpdate) GetLiabilityType() OptNilLiabilityType {
	return s.LiabilityType
}

// GetInterest returns the value of Interest.
func (s *AccountUpdate) GetInterest() OptNilString {
	return s.Interest
}

// GetInterestPeriod returns the value of InterestPeriod.
func (s *AccountUpdate) GetInterestPeriod() OptNilInterestPeriod {
	return s.InterestPeriod
}

// GetNotes returns the value of Notes.
func (s *AccountUpdate) GetNotes() OptNilString {
	return s.Notes
}

// GetLatitude returns the value of Latitude.
func (s *AccountUpdate) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *AccountUpdate) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *AccountUpdate) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// SetName sets the value of Name.
func (s *AccountUpdate) SetName(val string) {
	s.Name = val
}

// SetIban sets the value of Iban.
func (s *AccountUpdate) SetIban(val OptNilString) {
	s.Iban = val
}

// SetBic sets the value of Bic.
func (s *AccountUpdate) SetBic(val OptNilString) {
	s.Bic = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *AccountUpdate) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetOpeningBalance sets the value of OpeningBalance.
func (s *AccountUpdate) SetOpeningBalance(val OptString) {
	s.OpeningBalance = val
}

// SetOpeningBalanceDate sets the value of OpeningBalanceDate.
func (s *AccountUpdate) SetOpeningBalanceDate(val OptNilDateTime) {
	s.OpeningBalanceDate = val
}

// SetVirtualBalance sets the value of VirtualBalance.
func (s *AccountUpdate) SetVirtualBalance(val OptString) {
	s.VirtualBalance = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *AccountUpdate) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *AccountUpdate) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetActive sets the value of Active.
func (s *AccountUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetOrder sets the value of Order.
func (s *AccountUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetIncludeNetWorth sets the value of IncludeNetWorth.
func (s *AccountUpdate) SetIncludeNetWorth(val OptBool) {
	s.IncludeNetWorth = val
}

// SetAccountRole sets the value of AccountRole.
func (s *AccountUpdate) SetAccountRole(val OptNilAccountRoleProperty) {
	s.AccountRole = val
}

// SetCreditCardType sets the value of CreditCardType.
func (s *AccountUpdate) SetCreditCardType(val OptNilCreditCardType) {
	s.CreditCardType = val
}

// SetMonthlyPaymentDate sets the value of MonthlyPaymentDate.
func (s *AccountUpdate) SetMonthlyPaymentDate(val OptNilDateTime) {
	s.MonthlyPaymentDate = val
}

// SetLiabilityType sets the value of LiabilityType.
func (s *AccountUpdate) SetLiabilityType(val OptNilLiabilityType) {
	s.LiabilityType = val
}

// SetInterest sets the value of Interest.
func (s *AccountUpdate) SetInterest(val OptNilString) {
	s.Interest = val
}

// SetInterestPeriod sets the value of InterestPeriod.
func (s *AccountUpdate) SetInterestPeriod(val OptNilInterestPeriod) {
	s.InterestPeriod = val
}

// SetNotes sets the value of Notes.
func (s *AccountUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetLatitude sets the value of Latitude.
func (s *AccountUpdate) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *AccountUpdate) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *AccountUpdate) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// The object class to which the attachment must be linked.
// Ref: #/components/schemas/AttachableType
type AttachableType string

const (
	AttachableTypeAccount            AttachableType = "Account"
	AttachableTypeBudget             AttachableType = "Budget"
	AttachableTypeBill               AttachableType = "Bill"
	AttachableTypeTransactionJournal AttachableType = "TransactionJournal"
	AttachableTypePiggyBank          AttachableType = "PiggyBank"
	AttachableTypeTag                AttachableType = "Tag"
)

// AllValues returns all AttachableType values.
func (AttachableType) AllValues() []AttachableType {
	return []AttachableType{
		AttachableTypeAccount,
		AttachableTypeBudget,
		AttachableTypeBill,
		AttachableTypeTransactionJournal,
		AttachableTypePiggyBank,
		AttachableTypeTag,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AttachableType) MarshalText() ([]byte, error) {
	switch s {
	case AttachableTypeAccount:
		return []byte(s), nil
	case AttachableTypeBudget:
		return []byte(s), nil
	case AttachableTypeBill:
		return []byte(s), nil
	case AttachableTypeTransactionJournal:
		return []byte(s), nil
	case AttachableTypePiggyBank:
		return []byte(s), nil
	case AttachableTypeTag:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AttachableType) UnmarshalText(data []byte) error {
	switch AttachableType(data) {
	case AttachableTypeAccount:
		*s = AttachableTypeAccount
		return nil
	case AttachableTypeBudget:
		*s = AttachableTypeBudget
		return nil
	case AttachableTypeBill:
		*s = AttachableTypeBill
		return nil
	case AttachableTypeTransactionJournal:
		*s = AttachableTypeTransactionJournal
		return nil
	case AttachableTypePiggyBank:
		*s = AttachableTypePiggyBank
		return nil
	case AttachableTypeTag:
		*s = AttachableTypeTag
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Attachment
type Attachment struct {
	CreatedAt      OptDateTime    `json:"created_at"`
	UpdatedAt      OptDateTime    `json:"updated_at"`
	AttachableType AttachableType `json:"attachable_type"`
	// ID of the model this attachment is linked to.
	AttachableID string `json:"attachable_id"`
	// MD5 hash of the file for basic duplicate detection.
	MD5         OptString    `json:"md5"`
	Filename    string       `json:"filename"`
	DownloadURL OptString    `json:"download_url"`
	UploadURL   OptString    `json:"upload_url"`
	Title       OptString    `json:"title"`
	Notes       OptNilString `json:"notes"`
	Mime        OptString    `json:"mime"`
	Size        OptInt32     `json:"size"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Attachment) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Attachment) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetAttachableType returns the value of AttachableType.
func (s *Attachment) GetAttachableType() AttachableType {
	return s.AttachableType
}

// GetAttachableID returns the value of AttachableID.
func (s *Attachment) GetAttachableID() string {
	return s.AttachableID
}

// GetMD5 returns the value of MD5.
func (s *Attachment) GetMD5() OptString {
	return s.MD5
}

// GetFilename returns the value of Filename.
func (s *Attachment) GetFilename() string {
	return s.Filename
}

// GetDownloadURL returns the value of DownloadURL.
func (s *Attachment) GetDownloadURL() OptString {
	return s.DownloadURL
}

// GetUploadURL returns the value of UploadURL.
func (s *Attachment) GetUploadURL() OptString {
	return s.UploadURL
}

// GetTitle returns the value of Title.
func (s *Attachment) GetTitle() OptString {
	return s.Title
}

// GetNotes returns the value of Notes.
func (s *Attachment) GetNotes() OptNilString {
	return s.Notes
}

// GetMime returns the value of Mime.
func (s *Attachment) GetMime() OptString {
	return s.Mime
}

// GetSize returns the value of Size.
func (s *Attachment) GetSize() OptInt32 {
	return s.Size
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Attachment) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Attachment) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetAttachableType sets the value of AttachableType.
func (s *Attachment) SetAttachableType(val AttachableType) {
	s.AttachableType = val
}

// SetAttachableID sets the value of AttachableID.
func (s *Attachment) SetAttachableID(val string) {
	s.AttachableID = val
}

// SetMD5 sets the value of MD5.
func (s *Attachment) SetMD5(val OptString) {
	s.MD5 = val
}

// SetFilename sets the value of Filename.
func (s *Attachment) SetFilename(val string) {
	s.Filename = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *Attachment) SetDownloadURL(val OptString) {
	s.DownloadURL = val
}

// SetUploadURL sets the value of UploadURL.
func (s *Attachment) SetUploadURL(val OptString) {
	s.UploadURL = val
}

// SetTitle sets the value of Title.
func (s *Attachment) SetTitle(val OptString) {
	s.Title = val
}

// SetNotes sets the value of Notes.
func (s *Attachment) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetMime sets the value of Mime.
func (s *Attachment) SetMime(val OptString) {
	s.Mime = val
}

// SetSize sets the value of Size.
func (s *Attachment) SetSize(val OptInt32) {
	s.Size = val
}

// Ref: #/components/schemas/AttachmentArray
type AttachmentArray struct {
	Data []AttachmentRead `json:"data"`
	Meta Meta             `json:"meta"`
}

// GetData returns the value of Data.
func (s *AttachmentArray) GetData() []AttachmentRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *AttachmentArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *AttachmentArray) SetData(val []AttachmentRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *AttachmentArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*AttachmentArray) listAttachmentByAccountRes()     {}
func (*AttachmentArray) listAttachmentByBillRes()        {}
func (*AttachmentArray) listAttachmentByBudgetRes()      {}
func (*AttachmentArray) listAttachmentByCategoryRes()    {}
func (*AttachmentArray) listAttachmentByPiggyBankRes()   {}
func (*AttachmentArray) listAttachmentByTagRes()         {}
func (*AttachmentArray) listAttachmentByTransactionRes() {}
func (*AttachmentArray) listAttachmentRes()              {}

// Ref: #/components/schemas/AttachmentRead
type AttachmentRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes Attachment `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *AttachmentRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *AttachmentRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *AttachmentRead) GetAttributes() Attachment {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *AttachmentRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *AttachmentRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AttachmentRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *AttachmentRead) SetAttributes(val Attachment) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *AttachmentRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/AttachmentSingle
type AttachmentSingle struct {
	Data AttachmentRead `json:"data"`
}

// GetData returns the value of Data.
func (s *AttachmentSingle) GetData() AttachmentRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *AttachmentSingle) SetData(val AttachmentRead) {
	s.Data = val
}

func (*AttachmentSingle) getAttachmentRes()    {}
func (*AttachmentSingle) storeAttachmentRes()  {}
func (*AttachmentSingle) updateAttachmentRes() {}

// Ref: #/components/schemas/AttachmentStore
type AttachmentStore struct {
	Filename       string         `json:"filename"`
	AttachableType AttachableType `json:"attachable_type"`
	// ID of the model this attachment is linked to.
	AttachableID string       `json:"attachable_id"`
	Title        OptString    `json:"title"`
	Notes        OptNilString `json:"notes"`
}

// GetFilename returns the value of Filename.
func (s *AttachmentStore) GetFilename() string {
	return s.Filename
}

// GetAttachableType returns the value of AttachableType.
func (s *AttachmentStore) GetAttachableType() AttachableType {
	return s.AttachableType
}

// GetAttachableID returns the value of AttachableID.
func (s *AttachmentStore) GetAttachableID() string {
	return s.AttachableID
}

// GetTitle returns the value of Title.
func (s *AttachmentStore) GetTitle() OptString {
	return s.Title
}

// GetNotes returns the value of Notes.
func (s *AttachmentStore) GetNotes() OptNilString {
	return s.Notes
}

// SetFilename sets the value of Filename.
func (s *AttachmentStore) SetFilename(val string) {
	s.Filename = val
}

// SetAttachableType sets the value of AttachableType.
func (s *AttachmentStore) SetAttachableType(val AttachableType) {
	s.AttachableType = val
}

// SetAttachableID sets the value of AttachableID.
func (s *AttachmentStore) SetAttachableID(val string) {
	s.AttachableID = val
}

// SetTitle sets the value of Title.
func (s *AttachmentStore) SetTitle(val OptString) {
	s.Title = val
}

// SetNotes sets the value of Notes.
func (s *AttachmentStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// Ref: #/components/schemas/AttachmentUpdate
type AttachmentUpdate struct {
	Filename OptString    `json:"filename"`
	Title    OptString    `json:"title"`
	Notes    OptNilString `json:"notes"`
}

// GetFilename returns the value of Filename.
func (s *AttachmentUpdate) GetFilename() OptString {
	return s.Filename
}

// GetTitle returns the value of Title.
func (s *AttachmentUpdate) GetTitle() OptString {
	return s.Title
}

// GetNotes returns the value of Notes.
func (s *AttachmentUpdate) GetNotes() OptNilString {
	return s.Notes
}

// SetFilename sets the value of Filename.
func (s *AttachmentUpdate) SetFilename(val OptString) {
	s.Filename = val
}

// SetTitle sets the value of Title.
func (s *AttachmentUpdate) SetTitle(val OptString) {
	s.Title = val
}

// SetNotes sets the value of Notes.
func (s *AttachmentUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// Period for the auto budget.
// Ref: #/components/schemas/AutoBudgetPeriod
type AutoBudgetPeriod string

const (
	AutoBudgetPeriodDaily     AutoBudgetPeriod = "daily"
	AutoBudgetPeriodWeekly    AutoBudgetPeriod = "weekly"
	AutoBudgetPeriodMonthly   AutoBudgetPeriod = "monthly"
	AutoBudgetPeriodQuarterly AutoBudgetPeriod = "quarterly"
	AutoBudgetPeriodHalfYear  AutoBudgetPeriod = "half-year"
	AutoBudgetPeriodYearly    AutoBudgetPeriod = "yearly"
)

// AllValues returns all AutoBudgetPeriod values.
func (AutoBudgetPeriod) AllValues() []AutoBudgetPeriod {
	return []AutoBudgetPeriod{
		AutoBudgetPeriodDaily,
		AutoBudgetPeriodWeekly,
		AutoBudgetPeriodMonthly,
		AutoBudgetPeriodQuarterly,
		AutoBudgetPeriodHalfYear,
		AutoBudgetPeriodYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AutoBudgetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case AutoBudgetPeriodDaily:
		return []byte(s), nil
	case AutoBudgetPeriodWeekly:
		return []byte(s), nil
	case AutoBudgetPeriodMonthly:
		return []byte(s), nil
	case AutoBudgetPeriodQuarterly:
		return []byte(s), nil
	case AutoBudgetPeriodHalfYear:
		return []byte(s), nil
	case AutoBudgetPeriodYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AutoBudgetPeriod) UnmarshalText(data []byte) error {
	switch AutoBudgetPeriod(data) {
	case AutoBudgetPeriodDaily:
		*s = AutoBudgetPeriodDaily
		return nil
	case AutoBudgetPeriodWeekly:
		*s = AutoBudgetPeriodWeekly
		return nil
	case AutoBudgetPeriodMonthly:
		*s = AutoBudgetPeriodMonthly
		return nil
	case AutoBudgetPeriodQuarterly:
		*s = AutoBudgetPeriodQuarterly
		return nil
	case AutoBudgetPeriodHalfYear:
		*s = AutoBudgetPeriodHalfYear
		return nil
	case AutoBudgetPeriodYearly:
		*s = AutoBudgetPeriodYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of auto-budget that Firefly III must create.
// Ref: #/components/schemas/AutoBudgetType
type AutoBudgetType string

const (
	AutoBudgetTypeReset    AutoBudgetType = "reset"
	AutoBudgetTypeRollover AutoBudgetType = "rollover"
	AutoBudgetTypeNone     AutoBudgetType = "none"
)

// AllValues returns all AutoBudgetType values.
func (AutoBudgetType) AllValues() []AutoBudgetType {
	return []AutoBudgetType{
		AutoBudgetTypeReset,
		AutoBudgetTypeRollover,
		AutoBudgetTypeNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AutoBudgetType) MarshalText() ([]byte, error) {
	switch s {
	case AutoBudgetTypeReset:
		return []byte(s), nil
	case AutoBudgetTypeRollover:
		return []byte(s), nil
	case AutoBudgetTypeNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AutoBudgetType) UnmarshalText(data []byte) error {
	switch AutoBudgetType(data) {
	case AutoBudgetTypeReset:
		*s = AutoBudgetTypeReset
		return nil
	case AutoBudgetTypeRollover:
		*s = AutoBudgetTypeRollover
		return nil
	case AutoBudgetTypeNone:
		*s = AutoBudgetTypeNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AutocompleteAccount
type AutocompleteAccount struct {
	ID string `json:"id"`
	// Name of the account found by an auto-complete search.
	Name string `json:"name"`
	// Asset accounts and liabilities have a second field with the given date's account balance.
	NameWithBalance string `json:"name_with_balance"`
	// Account type of the account found by the auto-complete search.
	Type string `json:"type"`
	// ID for the currency used by this account.
	CurrencyID string `json:"currency_id"`
	// Currency name for the currency used by this account.
	CurrencyName string `json:"currency_name"`
	// Currency code for the currency used by this account.
	CurrencyCode string `json:"currency_code"`
	// Currency symbol for the currency used by this account.
	CurrencySymbol string `json:"currency_symbol"`
	// Number of decimal places for the currency used by this account.
	CurrencyDecimalPlaces int32 `json:"currency_decimal_places"`
}

// GetID returns the value of ID.
func (s *AutocompleteAccount) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteAccount) GetName() string {
	return s.Name
}

// GetNameWithBalance returns the value of NameWithBalance.
func (s *AutocompleteAccount) GetNameWithBalance() string {
	return s.NameWithBalance
}

// GetType returns the value of Type.
func (s *AutocompleteAccount) GetType() string {
	return s.Type
}

// GetCurrencyID returns the value of CurrencyID.
func (s *AutocompleteAccount) GetCurrencyID() string {
	return s.CurrencyID
}

// GetCurrencyName returns the value of CurrencyName.
func (s *AutocompleteAccount) GetCurrencyName() string {
	return s.CurrencyName
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *AutocompleteAccount) GetCurrencyCode() string {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *AutocompleteAccount) GetCurrencySymbol() string {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *AutocompleteAccount) GetCurrencyDecimalPlaces() int32 {
	return s.CurrencyDecimalPlaces
}

// SetID sets the value of ID.
func (s *AutocompleteAccount) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteAccount) SetName(val string) {
	s.Name = val
}

// SetNameWithBalance sets the value of NameWithBalance.
func (s *AutocompleteAccount) SetNameWithBalance(val string) {
	s.NameWithBalance = val
}

// SetType sets the value of Type.
func (s *AutocompleteAccount) SetType(val string) {
	s.Type = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *AutocompleteAccount) SetCurrencyID(val string) {
	s.CurrencyID = val
}

// SetCurrencyName sets the value of CurrencyName.
func (s *AutocompleteAccount) SetCurrencyName(val string) {
	s.CurrencyName = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *AutocompleteAccount) SetCurrencyCode(val string) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *AutocompleteAccount) SetCurrencySymbol(val string) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *AutocompleteAccount) SetCurrencyDecimalPlaces(val int32) {
	s.CurrencyDecimalPlaces = val
}

type AutocompleteAccountArray []AutocompleteAccount

func (*AutocompleteAccountArray) getAccountsACRes() {}

// Ref: #/components/schemas/AutocompleteBill
type AutocompleteBill struct {
	ID string `json:"id"`
	// Name of the bill found by an auto-complete search.
	Name string `json:"name"`
	// Is the bill active or not?.
	Active OptBool `json:"active"`
}

// GetID returns the value of ID.
func (s *AutocompleteBill) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteBill) GetName() string {
	return s.Name
}

// GetActive returns the value of Active.
func (s *AutocompleteBill) GetActive() OptBool {
	return s.Active
}

// SetID sets the value of ID.
func (s *AutocompleteBill) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteBill) SetName(val string) {
	s.Name = val
}

// SetActive sets the value of Active.
func (s *AutocompleteBill) SetActive(val OptBool) {
	s.Active = val
}

type AutocompleteBillArray []AutocompleteBill

func (*AutocompleteBillArray) getBillsACRes() {}

// Ref: #/components/schemas/AutocompleteBudget
type AutocompleteBudget struct {
	ID string `json:"id"`
	// Name of the budget found by an auto-complete search.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *AutocompleteBudget) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteBudget) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *AutocompleteBudget) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteBudget) SetName(val string) {
	s.Name = val
}

type AutocompleteBudgetArray []AutocompleteBudget

func (*AutocompleteBudgetArray) getBudgetsACRes() {}

// Ref: #/components/schemas/AutocompleteCategory
type AutocompleteCategory struct {
	ID string `json:"id"`
	// Name of the category found by an auto-complete search.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *AutocompleteCategory) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteCategory) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *AutocompleteCategory) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteCategory) SetName(val string) {
	s.Name = val
}

type AutocompleteCategoryArray []AutocompleteCategory

func (*AutocompleteCategoryArray) getCategoriesACRes() {}

// Ref: #/components/schemas/AutocompleteCurrency
type AutocompleteCurrency struct {
	ID string `json:"id"`
	// Currency name.
	Name string `json:"name"`
	// Currency code.
	Code          string `json:"code"`
	Symbol        string `json:"symbol"`
	DecimalPlaces int32  `json:"decimal_places"`
}

// GetID returns the value of ID.
func (s *AutocompleteCurrency) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteCurrency) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *AutocompleteCurrency) GetCode() string {
	return s.Code
}

// GetSymbol returns the value of Symbol.
func (s *AutocompleteCurrency) GetSymbol() string {
	return s.Symbol
}

// GetDecimalPlaces returns the value of DecimalPlaces.
func (s *AutocompleteCurrency) GetDecimalPlaces() int32 {
	return s.DecimalPlaces
}

// SetID sets the value of ID.
func (s *AutocompleteCurrency) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteCurrency) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *AutocompleteCurrency) SetCode(val string) {
	s.Code = val
}

// SetSymbol sets the value of Symbol.
func (s *AutocompleteCurrency) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimalPlaces sets the value of DecimalPlaces.
func (s *AutocompleteCurrency) SetDecimalPlaces(val int32) {
	s.DecimalPlaces = val
}

type AutocompleteCurrencyArray []AutocompleteCurrency

func (*AutocompleteCurrencyArray) getCurrenciesACRes() {}

// Ref: #/components/schemas/AutocompleteCurrencyCode
type AutocompleteCurrencyCode struct {
	ID string `json:"id"`
	// Currency name with the code between brackets.
	Name string `json:"name"`
	// Currency code.
	Code          string `json:"code"`
	Symbol        string `json:"symbol"`
	DecimalPlaces int32  `json:"decimal_places"`
}

// GetID returns the value of ID.
func (s *AutocompleteCurrencyCode) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteCurrencyCode) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *AutocompleteCurrencyCode) GetCode() string {
	return s.Code
}

// GetSymbol returns the value of Symbol.
func (s *AutocompleteCurrencyCode) GetSymbol() string {
	return s.Symbol
}

// GetDecimalPlaces returns the value of DecimalPlaces.
func (s *AutocompleteCurrencyCode) GetDecimalPlaces() int32 {
	return s.DecimalPlaces
}

// SetID sets the value of ID.
func (s *AutocompleteCurrencyCode) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteCurrencyCode) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *AutocompleteCurrencyCode) SetCode(val string) {
	s.Code = val
}

// SetSymbol sets the value of Symbol.
func (s *AutocompleteCurrencyCode) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimalPlaces sets the value of DecimalPlaces.
func (s *AutocompleteCurrencyCode) SetDecimalPlaces(val int32) {
	s.DecimalPlaces = val
}

type AutocompleteCurrencyCodeArray []AutocompleteCurrencyCode

func (*AutocompleteCurrencyCodeArray) getCurrenciesCodeACRes() {}

// Ref: #/components/schemas/AutocompleteObjectGroup
type AutocompleteObjectGroup struct {
	ID string `json:"id"`
	// Title of the object group found by an auto-complete search.
	Title string `json:"title"`
	// Title of the object group found by an auto-complete search.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *AutocompleteObjectGroup) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *AutocompleteObjectGroup) GetTitle() string {
	return s.Title
}

// GetName returns the value of Name.
func (s *AutocompleteObjectGroup) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *AutocompleteObjectGroup) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *AutocompleteObjectGroup) SetTitle(val string) {
	s.Title = val
}

// SetName sets the value of Name.
func (s *AutocompleteObjectGroup) SetName(val string) {
	s.Name = val
}

type AutocompleteObjectGroupArray []AutocompleteObjectGroup

func (*AutocompleteObjectGroupArray) getObjectGroupsACRes() {}

// Ref: #/components/schemas/AutocompletePiggy
type AutocompletePiggy struct {
	ID string `json:"id"`
	// Name of the piggy bank found by an auto-complete search.
	Name string `json:"name"`
	// Currency ID for this piggy bank.
	CurrencyID OptString `json:"currency_id"`
	// Currency code for this piggy bank.
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Currency name for the currency used by this account.
	CurrencyName          OptString `json:"currency_name"`
	CurrencyDecimalPlaces OptInt32  `json:"currency_decimal_places"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetID returns the value of ID.
func (s *AutocompletePiggy) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompletePiggy) GetName() string {
	return s.Name
}

// GetCurrencyID returns the value of CurrencyID.
func (s *AutocompletePiggy) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *AutocompletePiggy) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *AutocompletePiggy) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyName returns the value of CurrencyName.
func (s *AutocompletePiggy) GetCurrencyName() OptString {
	return s.CurrencyName
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *AutocompletePiggy) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *AutocompletePiggy) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *AutocompletePiggy) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetID sets the value of ID.
func (s *AutocompletePiggy) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompletePiggy) SetName(val string) {
	s.Name = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *AutocompletePiggy) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *AutocompletePiggy) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *AutocompletePiggy) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyName sets the value of CurrencyName.
func (s *AutocompletePiggy) SetCurrencyName(val OptString) {
	s.CurrencyName = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *AutocompletePiggy) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *AutocompletePiggy) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *AutocompletePiggy) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

type AutocompletePiggyArray []AutocompletePiggy

func (*AutocompletePiggyArray) getPiggiesACRes() {}

// Ref: #/components/schemas/AutocompletePiggyBalance
type AutocompletePiggyBalance struct {
	ID string `json:"id"`
	// Name of the piggy bank found by an auto-complete search.
	Name string `json:"name"`
	// Name of the piggy bank found by an auto-complete search with the current balance formatted nicely.
	NameWithBalance OptString `json:"name_with_balance"`
	// Currency ID for this piggy bank.
	CurrencyID OptString `json:"currency_id"`
	// Currency code for this piggy bank.
	CurrencyCode          OptString `json:"currency_code"`
	CurrencySymbol        OptString `json:"currency_symbol"`
	CurrencyDecimalPlaces OptInt32  `json:"currency_decimal_places"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetID returns the value of ID.
func (s *AutocompletePiggyBalance) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompletePiggyBalance) GetName() string {
	return s.Name
}

// GetNameWithBalance returns the value of NameWithBalance.
func (s *AutocompletePiggyBalance) GetNameWithBalance() OptString {
	return s.NameWithBalance
}

// GetCurrencyID returns the value of CurrencyID.
func (s *AutocompletePiggyBalance) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *AutocompletePiggyBalance) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *AutocompletePiggyBalance) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *AutocompletePiggyBalance) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *AutocompletePiggyBalance) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *AutocompletePiggyBalance) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetID sets the value of ID.
func (s *AutocompletePiggyBalance) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompletePiggyBalance) SetName(val string) {
	s.Name = val
}

// SetNameWithBalance sets the value of NameWithBalance.
func (s *AutocompletePiggyBalance) SetNameWithBalance(val OptString) {
	s.NameWithBalance = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *AutocompletePiggyBalance) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *AutocompletePiggyBalance) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *AutocompletePiggyBalance) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *AutocompletePiggyBalance) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *AutocompletePiggyBalance) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *AutocompletePiggyBalance) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

type AutocompletePiggyBalanceArray []AutocompletePiggyBalance

func (*AutocompletePiggyBalanceArray) getPiggiesBalanceACRes() {}

// Ref: #/components/schemas/AutocompleteRecurrence
type AutocompleteRecurrence struct {
	ID string `json:"id"`
	// Name of the recurrence found by an auto-complete search.
	Name string `json:"name"`
	// Description of the recurrence found by auto-complete.
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *AutocompleteRecurrence) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteRecurrence) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AutocompleteRecurrence) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *AutocompleteRecurrence) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteRecurrence) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AutocompleteRecurrence) SetDescription(val OptString) {
	s.Description = val
}

type AutocompleteRecurrenceArray []AutocompleteRecurrence

func (*AutocompleteRecurrenceArray) getRecurringACRes() {}

// Ref: #/components/schemas/AutocompleteRule
type AutocompleteRule struct {
	ID string `json:"id"`
	// Name of the rule found by an auto-complete search.
	Name string `json:"name"`
	// Description of the rule found by auto-complete.
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *AutocompleteRule) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteRule) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AutocompleteRule) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *AutocompleteRule) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteRule) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AutocompleteRule) SetDescription(val OptString) {
	s.Description = val
}

type AutocompleteRuleArray []AutocompleteRule

func (*AutocompleteRuleArray) getRulesACRes() {}

// Ref: #/components/schemas/AutocompleteRuleGroup
type AutocompleteRuleGroup struct {
	ID string `json:"id"`
	// Name of the rule group found by an auto-complete search.
	Name string `json:"name"`
	// Description of the rule group found by auto-complete.
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *AutocompleteRuleGroup) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteRuleGroup) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AutocompleteRuleGroup) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *AutocompleteRuleGroup) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteRuleGroup) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AutocompleteRuleGroup) SetDescription(val OptString) {
	s.Description = val
}

type AutocompleteRuleGroupArray []AutocompleteRuleGroup

func (*AutocompleteRuleGroupArray) getRuleGroupsACRes() {}

// Ref: #/components/schemas/AutocompleteTag
type AutocompleteTag struct {
	ID string `json:"id"`
	// Name of the tag found by an auto-complete search.
	Name string `json:"name"`
	// Name of the tag found by an auto-complete search.
	Tag string `json:"tag"`
}

// GetID returns the value of ID.
func (s *AutocompleteTag) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteTag) GetName() string {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *AutocompleteTag) GetTag() string {
	return s.Tag
}

// SetID sets the value of ID.
func (s *AutocompleteTag) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteTag) SetName(val string) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *AutocompleteTag) SetTag(val string) {
	s.Tag = val
}

type AutocompleteTagArray []AutocompleteTag

func (*AutocompleteTagArray) getTagACRes() {}

// Ref: #/components/schemas/AutocompleteTransaction
type AutocompleteTransaction struct {
	// The ID of a transaction journal (basically a single split).
	ID string `json:"id"`
	// The ID of the underlying transaction group.
	TransactionGroupID OptString `json:"transaction_group_id"`
	// Transaction description.
	Name string `json:"name"`
	// Transaction description.
	Description string `json:"description"`
}

// GetID returns the value of ID.
func (s *AutocompleteTransaction) GetID() string {
	return s.ID
}

// GetTransactionGroupID returns the value of TransactionGroupID.
func (s *AutocompleteTransaction) GetTransactionGroupID() OptString {
	return s.TransactionGroupID
}

// GetName returns the value of Name.
func (s *AutocompleteTransaction) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AutocompleteTransaction) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *AutocompleteTransaction) SetID(val string) {
	s.ID = val
}

// SetTransactionGroupID sets the value of TransactionGroupID.
func (s *AutocompleteTransaction) SetTransactionGroupID(val OptString) {
	s.TransactionGroupID = val
}

// SetName sets the value of Name.
func (s *AutocompleteTransaction) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AutocompleteTransaction) SetDescription(val string) {
	s.Description = val
}

type AutocompleteTransactionArray []AutocompleteTransaction

func (*AutocompleteTransactionArray) getTransactionsACRes() {}

// Ref: #/components/schemas/AutocompleteTransactionID
type AutocompleteTransactionID struct {
	// The ID of a transaction journal (basically a single split).
	ID string `json:"id"`
	// The ID of the underlying transaction group.
	TransactionGroupID OptString `json:"transaction_group_id"`
	// Transaction description with ID in the name.
	Name string `json:"name"`
	// Transaction description with ID in the name.
	Description string `json:"description"`
}

// GetID returns the value of ID.
func (s *AutocompleteTransactionID) GetID() string {
	return s.ID
}

// GetTransactionGroupID returns the value of TransactionGroupID.
func (s *AutocompleteTransactionID) GetTransactionGroupID() OptString {
	return s.TransactionGroupID
}

// GetName returns the value of Name.
func (s *AutocompleteTransactionID) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AutocompleteTransactionID) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *AutocompleteTransactionID) SetID(val string) {
	s.ID = val
}

// SetTransactionGroupID sets the value of TransactionGroupID.
func (s *AutocompleteTransactionID) SetTransactionGroupID(val OptString) {
	s.TransactionGroupID = val
}

// SetName sets the value of Name.
func (s *AutocompleteTransactionID) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AutocompleteTransactionID) SetDescription(val string) {
	s.Description = val
}

type AutocompleteTransactionIDArray []AutocompleteTransactionID

func (*AutocompleteTransactionIDArray) getTransactionsIDACRes() {}

// Ref: #/components/schemas/AutocompleteTransactionType
type AutocompleteTransactionType struct {
	ID string `json:"id"`
	// Type of the object found by an auto-complete search.
	Name string `json:"name"`
	// Name of the object found by an auto-complete search.
	Type string `json:"type"`
}

// GetID returns the value of ID.
func (s *AutocompleteTransactionType) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutocompleteTransactionType) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *AutocompleteTransactionType) GetType() string {
	return s.Type
}

// SetID sets the value of ID.
func (s *AutocompleteTransactionType) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutocompleteTransactionType) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *AutocompleteTransactionType) SetType(val string) {
	s.Type = val
}

type AutocompleteTransactionTypeArray []AutocompleteTransactionType

func (*AutocompleteTransactionTypeArray) getTransactionTypesACRes() {}

// Ref: #/components/schemas/AvailableBudget
type AvailableBudget struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// Use either currency_id or currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code.
	CurrencyCode          OptString `json:"currency_code"`
	CurrencySymbol        OptString `json:"currency_symbol"`
	CurrencyDecimalPlaces OptInt32  `json:"currency_decimal_places"`
	Amount                string    `json:"amount"`
	// Start date of the available budget.
	Start time.Time `json:"start"`
	// End date of the available budget.
	End                time.Time     `json:"end"`
	SpentInBudgets     []BudgetSpent `json:"spent_in_budgets"`
	SpentOutsideBudget []BudgetSpent `json:"spent_outside_budget"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AvailableBudget) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AvailableBudget) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetCurrencyID returns the value of CurrencyID.
func (s *AvailableBudget) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *AvailableBudget) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *AvailableBudget) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *AvailableBudget) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetAmount returns the value of Amount.
func (s *AvailableBudget) GetAmount() string {
	return s.Amount
}

// GetStart returns the value of Start.
func (s *AvailableBudget) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *AvailableBudget) GetEnd() time.Time {
	return s.End
}

// GetSpentInBudgets returns the value of SpentInBudgets.
func (s *AvailableBudget) GetSpentInBudgets() []BudgetSpent {
	return s.SpentInBudgets
}

// GetSpentOutsideBudget returns the value of SpentOutsideBudget.
func (s *AvailableBudget) GetSpentOutsideBudget() []BudgetSpent {
	return s.SpentOutsideBudget
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AvailableBudget) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AvailableBudget) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *AvailableBudget) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *AvailableBudget) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *AvailableBudget) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *AvailableBudget) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetAmount sets the value of Amount.
func (s *AvailableBudget) SetAmount(val string) {
	s.Amount = val
}

// SetStart sets the value of Start.
func (s *AvailableBudget) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *AvailableBudget) SetEnd(val time.Time) {
	s.End = val
}

// SetSpentInBudgets sets the value of SpentInBudgets.
func (s *AvailableBudget) SetSpentInBudgets(val []BudgetSpent) {
	s.SpentInBudgets = val
}

// SetSpentOutsideBudget sets the value of SpentOutsideBudget.
func (s *AvailableBudget) SetSpentOutsideBudget(val []BudgetSpent) {
	s.SpentOutsideBudget = val
}

// Ref: #/components/schemas/AvailableBudgetArray
type AvailableBudgetArray struct {
	Data []AvailableBudgetRead `json:"data"`
	Meta Meta                  `json:"meta"`
}

// GetData returns the value of Data.
func (s *AvailableBudgetArray) GetData() []AvailableBudgetRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *AvailableBudgetArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *AvailableBudgetArray) SetData(val []AvailableBudgetRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *AvailableBudgetArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*AvailableBudgetArray) listAvailableBudgetByCurrencyRes() {}
func (*AvailableBudgetArray) listAvailableBudgetRes()           {}

// Ref: #/components/schemas/AvailableBudgetRead
type AvailableBudgetRead struct {
	// Immutable value.
	Type       string          `json:"type"`
	ID         string          `json:"id"`
	Attributes AvailableBudget `json:"attributes"`
}

// GetType returns the value of Type.
func (s *AvailableBudgetRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *AvailableBudgetRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *AvailableBudgetRead) GetAttributes() AvailableBudget {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *AvailableBudgetRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *AvailableBudgetRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *AvailableBudgetRead) SetAttributes(val AvailableBudget) {
	s.Attributes = val
}

// Ref: #/components/schemas/AvailableBudgetSingle
type AvailableBudgetSingle struct {
	Data AvailableBudgetRead `json:"data"`
}

// GetData returns the value of Data.
func (s *AvailableBudgetSingle) GetData() AvailableBudgetRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *AvailableBudgetSingle) SetData(val AvailableBudgetRead) {
	s.Data = val
}

func (*AvailableBudgetSingle) getAvailableBudgetRes() {}

// Ref: #/components/schemas/BadRequest
type BadRequest struct {
	Message   OptString `json:"message"`
	Exception OptString `json:"exception"`
}

// GetMessage returns the value of Message.
func (s *BadRequest) GetMessage() OptString {
	return s.Message
}

// GetException returns the value of Exception.
func (s *BadRequest) GetException() OptString {
	return s.Exception
}

// SetMessage sets the value of Message.
func (s *BadRequest) SetMessage(val OptString) {
	s.Message = val
}

// SetException sets the value of Exception.
func (s *BadRequest) SetException(val OptString) {
	s.Exception = val
}

func (*BadRequest) bulkUpdateTransactionsRes()         {}
func (*BadRequest) defaultCurrencyRes()                {}
func (*BadRequest) deleteAccountRes()                  {}
func (*BadRequest) deleteAttachmentRes()               {}
func (*BadRequest) deleteBillRes()                     {}
func (*BadRequest) deleteBudgetLimitRes()              {}
func (*BadRequest) deleteBudgetRes()                   {}
func (*BadRequest) deleteCategoryRes()                 {}
func (*BadRequest) deleteCurrencyRes()                 {}
func (*BadRequest) deleteLinkTypeRes()                 {}
func (*BadRequest) deleteObjectGroupRes()              {}
func (*BadRequest) deletePiggyBankRes()                {}
func (*BadRequest) deleteRecurrenceRes()               {}
func (*BadRequest) deleteRuleGroupRes()                {}
func (*BadRequest) deleteRuleRes()                     {}
func (*BadRequest) deleteTagRes()                      {}
func (*BadRequest) deleteTransactionJournalRes()       {}
func (*BadRequest) deleteTransactionLinkRes()          {}
func (*BadRequest) deleteTransactionRes()              {}
func (*BadRequest) deleteUserRes()                     {}
func (*BadRequest) deleteWebhookMessageAttemptRes()    {}
func (*BadRequest) deleteWebhookMessageRes()           {}
func (*BadRequest) deleteWebhookRes()                  {}
func (*BadRequest) destroyDataRes()                    {}
func (*BadRequest) disableCurrencyRes()                {}
func (*BadRequest) downloadAttachmentRes()             {}
func (*BadRequest) enableCurrencyRes()                 {}
func (*BadRequest) exportAccountsRes()                 {}
func (*BadRequest) exportBillsRes()                    {}
func (*BadRequest) exportBudgetsRes()                  {}
func (*BadRequest) exportCategoriesRes()               {}
func (*BadRequest) exportPiggiesRes()                  {}
func (*BadRequest) exportRecurringRes()                {}
func (*BadRequest) exportRulesRes()                    {}
func (*BadRequest) exportTagsRes()                     {}
func (*BadRequest) exportTransactionsRes()             {}
func (*BadRequest) fireRuleGroupRes()                  {}
func (*BadRequest) fireRuleRes()                       {}
func (*BadRequest) getAboutRes()                       {}
func (*BadRequest) getAccountRes()                     {}
func (*BadRequest) getAccountsACRes()                  {}
func (*BadRequest) getAttachmentRes()                  {}
func (*BadRequest) getAvailableBudgetRes()             {}
func (*BadRequest) getBasicSummaryRes()                {}
func (*BadRequest) getBillRes()                        {}
func (*BadRequest) getBillsACRes()                     {}
func (*BadRequest) getBudgetLimitRes()                 {}
func (*BadRequest) getBudgetRes()                      {}
func (*BadRequest) getBudgetsACRes()                   {}
func (*BadRequest) getCategoriesACRes()                {}
func (*BadRequest) getCategoryRes()                    {}
func (*BadRequest) getChartAccountOverviewRes()        {}
func (*BadRequest) getConfigurationRes()               {}
func (*BadRequest) getCronRes()                        {}
func (*BadRequest) getCurrenciesACRes()                {}
func (*BadRequest) getCurrenciesCodeACRes()            {}
func (*BadRequest) getCurrencyRes()                    {}
func (*BadRequest) getCurrentUserRes()                 {}
func (*BadRequest) getDefaultCurrencyRes()             {}
func (*BadRequest) getLinkTypeRes()                    {}
func (*BadRequest) getObjectGroupRes()                 {}
func (*BadRequest) getObjectGroupsACRes()              {}
func (*BadRequest) getPiggiesACRes()                   {}
func (*BadRequest) getPiggiesBalanceACRes()            {}
func (*BadRequest) getPiggyBankRes()                   {}
func (*BadRequest) getPreferenceRes()                  {}
func (*BadRequest) getRecurrenceRes()                  {}
func (*BadRequest) getRecurringACRes()                 {}
func (*BadRequest) getRuleGroupRes()                   {}
func (*BadRequest) getRuleGroupsACRes()                {}
func (*BadRequest) getRuleRes()                        {}
func (*BadRequest) getRulesACRes()                     {}
func (*BadRequest) getSingleConfigurationRes()         {}
func (*BadRequest) getSingleWebhookMessageAttemptRes() {}
func (*BadRequest) getSingleWebhookMessageRes()        {}
func (*BadRequest) getTagACRes()                       {}
func (*BadRequest) getTagRes()                         {}
func (*BadRequest) getTransactionByJournalRes()        {}
func (*BadRequest) getTransactionLinkRes()             {}
func (*BadRequest) getTransactionRes()                 {}
func (*BadRequest) getTransactionTypesACRes()          {}
func (*BadRequest) getTransactionsACRes()              {}
func (*BadRequest) getTransactionsIDACRes()            {}
func (*BadRequest) getUserRes()                        {}
func (*BadRequest) getWebhookMessageAttemptsRes()      {}
func (*BadRequest) getWebhookMessagesRes()             {}
func (*BadRequest) getWebhookRes()                     {}
func (*BadRequest) insightExpenseAssetRes()            {}
func (*BadRequest) insightExpenseBillRes()             {}
func (*BadRequest) insightExpenseBudgetRes()           {}
func (*BadRequest) insightExpenseCategoryRes()         {}
func (*BadRequest) insightExpenseExpenseRes()          {}
func (*BadRequest) insightExpenseNoBillRes()           {}
func (*BadRequest) insightExpenseNoBudgetRes()         {}
func (*BadRequest) insightExpenseNoCategoryRes()       {}
func (*BadRequest) insightExpenseNoTagRes()            {}
func (*BadRequest) insightExpenseTagRes()              {}
func (*BadRequest) insightExpenseTotalRes()            {}
func (*BadRequest) insightIncomeAssetRes()             {}
func (*BadRequest) insightIncomeCategoryRes()          {}
func (*BadRequest) insightIncomeNoCategoryRes()        {}
func (*BadRequest) insightIncomeNoTagRes()             {}
func (*BadRequest) insightIncomeRevenueRes()           {}
func (*BadRequest) insightIncomeTagRes()               {}
func (*BadRequest) insightIncomeTotalRes()             {}
func (*BadRequest) insightTransferCategoryRes()        {}
func (*BadRequest) insightTransferNoCategoryRes()      {}
func (*BadRequest) insightTransferNoTagRes()           {}
func (*BadRequest) insightTransferTagRes()             {}
func (*BadRequest) insightTransferTotalRes()           {}
func (*BadRequest) insightTransfersRes()               {}
func (*BadRequest) listAccountByCurrencyRes()          {}
func (*BadRequest) listAccountRes()                    {}
func (*BadRequest) listAttachmentByAccountRes()        {}
func (*BadRequest) listAttachmentByBillRes()           {}
func (*BadRequest) listAttachmentByBudgetRes()         {}
func (*BadRequest) listAttachmentByCategoryRes()       {}
func (*BadRequest) listAttachmentByPiggyBankRes()      {}
func (*BadRequest) listAttachmentByTagRes()            {}
func (*BadRequest) listAttachmentByTransactionRes()    {}
func (*BadRequest) listAttachmentRes()                 {}
func (*BadRequest) listAvailableBudgetByCurrencyRes()  {}
func (*BadRequest) listAvailableBudgetRes()            {}
func (*BadRequest) listBillByCurrencyRes()             {}
func (*BadRequest) listBillByObjectGroupRes()          {}
func (*BadRequest) listBillRes()                       {}
func (*BadRequest) listBudgetLimitByBudgetRes()        {}
func (*BadRequest) listBudgetLimitByCurrencyRes()      {}
func (*BadRequest) listBudgetLimitRes()                {}
func (*BadRequest) listBudgetRes()                     {}
func (*BadRequest) listCategoryRes()                   {}
func (*BadRequest) listCurrencyRes()                   {}
func (*BadRequest) listEventByPiggyBankRes()           {}
func (*BadRequest) listEventByTransactionRes()         {}
func (*BadRequest) listLinkTypeRes()                   {}
func (*BadRequest) listLinksByJournalRes()             {}
func (*BadRequest) listObjectGroupsRes()               {}
func (*BadRequest) listPiggyBankByAccountRes()         {}
func (*BadRequest) listPiggyBankByObjectGroupRes()     {}
func (*BadRequest) listPiggyBankRes()                  {}
func (*BadRequest) listPreferenceRes()                 {}
func (*BadRequest) listRecurrenceByCurrencyRes()       {}
func (*BadRequest) listRecurrenceRes()                 {}
func (*BadRequest) listRuleByBillRes()                 {}
func (*BadRequest) listRuleByCurrencyRes()             {}
func (*BadRequest) listRuleByGroupRes()                {}
func (*BadRequest) listRuleGroupRes()                  {}
func (*BadRequest) listRuleRes()                       {}
func (*BadRequest) listTagRes()                        {}
func (*BadRequest) listTransactionByAccountRes()       {}
func (*BadRequest) listTransactionByBillRes()          {}
func (*BadRequest) listTransactionByBudgetLimitRes()   {}
func (*BadRequest) listTransactionByBudgetRes()        {}
func (*BadRequest) listTransactionByCategoryRes()      {}
func (*BadRequest) listTransactionByCurrencyRes()      {}
func (*BadRequest) listTransactionByLinkTypeRes()      {}
func (*BadRequest) listTransactionByRecurrenceRes()    {}
func (*BadRequest) listTransactionByTagRes()           {}
func (*BadRequest) listTransactionLinkRes()            {}
func (*BadRequest) listTransactionRes()                {}
func (*BadRequest) listUserRes()                       {}
func (*BadRequest) listWebhookRes()                    {}
func (*BadRequest) purgeDataRes()                      {}
func (*BadRequest) searchAccountsRes()                 {}
func (*BadRequest) searchTransactionsRes()             {}
func (*BadRequest) setConfigurationRes()               {}
func (*BadRequest) storeAccountRes()                   {}
func (*BadRequest) storeAttachmentRes()                {}
func (*BadRequest) storeBillRes()                      {}
func (*BadRequest) storeBudgetLimitRes()               {}
func (*BadRequest) storeBudgetRes()                    {}
func (*BadRequest) storeCategoryRes()                  {}
func (*BadRequest) storeCurrencyRes()                  {}
func (*BadRequest) storeLinkTypeRes()                  {}
func (*BadRequest) storePiggyBankRes()                 {}
func (*BadRequest) storePreferenceRes()                {}
func (*BadRequest) storeRecurrenceRes()                {}
func (*BadRequest) storeRuleGroupRes()                 {}
func (*BadRequest) storeRuleRes()                      {}
func (*BadRequest) storeTagRes()                       {}
func (*BadRequest) storeTransactionLinkRes()           {}
func (*BadRequest) storeTransactionRes()               {}
func (*BadRequest) storeUserRes()                      {}
func (*BadRequest) storeWebhookRes()                   {}
func (*BadRequest) testRuleGroupRes()                  {}
func (*BadRequest) testRuleRes()                       {}
func (*BadRequest) updateAccountRes()                  {}
func (*BadRequest) updateAttachmentRes()               {}
func (*BadRequest) updateBillRes()                     {}
func (*BadRequest) updateBudgetLimitRes()              {}
func (*BadRequest) updateBudgetRes()                   {}
func (*BadRequest) updateCategoryRes()                 {}
func (*BadRequest) updateCurrencyRes()                 {}
func (*BadRequest) updateLinkTypeRes()                 {}
func (*BadRequest) updateObjectGroupRes()              {}
func (*BadRequest) updatePiggyBankRes()                {}
func (*BadRequest) updatePreferenceRes()               {}
func (*BadRequest) updateRecurrenceRes()               {}
func (*BadRequest) updateRuleGroupRes()                {}
func (*BadRequest) updateRuleRes()                     {}
func (*BadRequest) updateTagRes()                      {}
func (*BadRequest) updateTransactionLinkRes()          {}
func (*BadRequest) updateTransactionRes()              {}
func (*BadRequest) updateUserRes()                     {}
func (*BadRequest) updateWebhookRes()                  {}
func (*BadRequest) uploadAttachmentRes()               {}

// Ref: #/components/schemas/BasicSummary
type BasicSummary map[string]BasicSummaryEntry

func (s *BasicSummary) init() BasicSummary {
	m := *s
	if m == nil {
		m = map[string]BasicSummaryEntry{}
		*s = m
	}
	return m
}

func (*BasicSummary) getBasicSummaryRes() {}

// Ref: #/components/schemas/BasicSummaryEntry
type BasicSummaryEntry struct {
	// This is a reference to the type of info shared, not influenced by translations or user preferences.
	//  The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC,
	// spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and
	// net-worth-in-ABC.
	Key OptString `json:"key"`
	// A translated title for the information shared.
	Title OptString `json:"title"`
	// The amount as a float.
	MonetaryValue OptFloat64 `json:"monetary_value"`
	// The currency ID of the associated currency.
	CurrencyID     OptString `json:"currency_id"`
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals for the associated currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
	// The amount formatted according to the users locale.
	ValueParsed OptString `json:"value_parsed"`
	// Reference to a font-awesome icon without the fa- part.
	LocalIcon OptString `json:"local_icon"`
	// A short explanation of the amounts origin. Already formatted according to the locale of the user
	// or translated, if relevant.
	SubTitle OptString `json:"sub_title"`
}

// GetKey returns the value of Key.
func (s *BasicSummaryEntry) GetKey() OptString {
	return s.Key
}

// GetTitle returns the value of Title.
func (s *BasicSummaryEntry) GetTitle() OptString {
	return s.Title
}

// GetMonetaryValue returns the value of MonetaryValue.
func (s *BasicSummaryEntry) GetMonetaryValue() OptFloat64 {
	return s.MonetaryValue
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BasicSummaryEntry) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *BasicSummaryEntry) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *BasicSummaryEntry) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *BasicSummaryEntry) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetValueParsed returns the value of ValueParsed.
func (s *BasicSummaryEntry) GetValueParsed() OptString {
	return s.ValueParsed
}

// GetLocalIcon returns the value of LocalIcon.
func (s *BasicSummaryEntry) GetLocalIcon() OptString {
	return s.LocalIcon
}

// GetSubTitle returns the value of SubTitle.
func (s *BasicSummaryEntry) GetSubTitle() OptString {
	return s.SubTitle
}

// SetKey sets the value of Key.
func (s *BasicSummaryEntry) SetKey(val OptString) {
	s.Key = val
}

// SetTitle sets the value of Title.
func (s *BasicSummaryEntry) SetTitle(val OptString) {
	s.Title = val
}

// SetMonetaryValue sets the value of MonetaryValue.
func (s *BasicSummaryEntry) SetMonetaryValue(val OptFloat64) {
	s.MonetaryValue = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BasicSummaryEntry) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *BasicSummaryEntry) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *BasicSummaryEntry) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *BasicSummaryEntry) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetValueParsed sets the value of ValueParsed.
func (s *BasicSummaryEntry) SetValueParsed(val OptString) {
	s.ValueParsed = val
}

// SetLocalIcon sets the value of LocalIcon.
func (s *BasicSummaryEntry) SetLocalIcon(val OptString) {
	s.LocalIcon = val
}

// SetSubTitle sets the value of SubTitle.
func (s *BasicSummaryEntry) SetSubTitle(val OptString) {
	s.SubTitle = val
}

// Ref: #/components/schemas/Bill
type Bill struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// Use either currency_id or currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code.
	CurrencyCode          OptString `json:"currency_code"`
	CurrencySymbol        OptString `json:"currency_symbol"`
	CurrencyDecimalPlaces OptInt32  `json:"currency_decimal_places"`
	Name                  string    `json:"name"`
	AmountMin             string    `json:"amount_min"`
	AmountMax             string    `json:"amount_max"`
	Date                  time.Time `json:"date"`
	// The date after which this bill is no longer valid or applicable.
	EndDate OptDateTime `json:"end_date"`
	// The date before which the bill must be renewed (or cancelled).
	ExtensionDate OptDateTime         `json:"extension_date"`
	RepeatFreq    BillRepeatFrequency `json:"repeat_freq"`
	// How often the bill must be skipped. 1 means a bi-monthly bill.
	Skip OptInt32 `json:"skip"`
	// If the bill is active.
	Active OptBool `json:"active"`
	// Order of the bill.
	Order OptInt32     `json:"order"`
	Notes OptNilString `json:"notes"`
	// When the bill is expected to be due.
	NextExpectedMatch OptNilDateTime `json:"next_expected_match"`
	// Formatted (locally) when the bill is due.
	NextExpectedMatchDiff OptNilString `json:"next_expected_match_diff"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The order of the group. At least 1, for the highest sorting.
	ObjectGroupOrder OptNilInt32 `json:"object_group_order"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
	// Array of future dates when the bill is expected to be paid. Autogenerated.
	PayDates []time.Time `json:"pay_dates"`
	// Array of past transactions when the bill was paid.
	PaidDates []BillPaidDatesItem `json:"paid_dates"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Bill) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Bill) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetCurrencyID returns the value of CurrencyID.
func (s *Bill) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *Bill) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *Bill) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *Bill) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetName returns the value of Name.
func (s *Bill) GetName() string {
	return s.Name
}

// GetAmountMin returns the value of AmountMin.
func (s *Bill) GetAmountMin() string {
	return s.AmountMin
}

// GetAmountMax returns the value of AmountMax.
func (s *Bill) GetAmountMax() string {
	return s.AmountMax
}

// GetDate returns the value of Date.
func (s *Bill) GetDate() time.Time {
	return s.Date
}

// GetEndDate returns the value of EndDate.
func (s *Bill) GetEndDate() OptDateTime {
	return s.EndDate
}

// GetExtensionDate returns the value of ExtensionDate.
func (s *Bill) GetExtensionDate() OptDateTime {
	return s.ExtensionDate
}

// GetRepeatFreq returns the value of RepeatFreq.
func (s *Bill) GetRepeatFreq() BillRepeatFrequency {
	return s.RepeatFreq
}

// GetSkip returns the value of Skip.
func (s *Bill) GetSkip() OptInt32 {
	return s.Skip
}

// GetActive returns the value of Active.
func (s *Bill) GetActive() OptBool {
	return s.Active
}

// GetOrder returns the value of Order.
func (s *Bill) GetOrder() OptInt32 {
	return s.Order
}

// GetNotes returns the value of Notes.
func (s *Bill) GetNotes() OptNilString {
	return s.Notes
}

// GetNextExpectedMatch returns the value of NextExpectedMatch.
func (s *Bill) GetNextExpectedMatch() OptNilDateTime {
	return s.NextExpectedMatch
}

// GetNextExpectedMatchDiff returns the value of NextExpectedMatchDiff.
func (s *Bill) GetNextExpectedMatchDiff() OptNilString {
	return s.NextExpectedMatchDiff
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *Bill) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupOrder returns the value of ObjectGroupOrder.
func (s *Bill) GetObjectGroupOrder() OptNilInt32 {
	return s.ObjectGroupOrder
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *Bill) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// GetPayDates returns the value of PayDates.
func (s *Bill) GetPayDates() []time.Time {
	return s.PayDates
}

// GetPaidDates returns the value of PaidDates.
func (s *Bill) GetPaidDates() []BillPaidDatesItem {
	return s.PaidDates
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Bill) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Bill) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *Bill) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *Bill) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *Bill) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *Bill) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetName sets the value of Name.
func (s *Bill) SetName(val string) {
	s.Name = val
}

// SetAmountMin sets the value of AmountMin.
func (s *Bill) SetAmountMin(val string) {
	s.AmountMin = val
}

// SetAmountMax sets the value of AmountMax.
func (s *Bill) SetAmountMax(val string) {
	s.AmountMax = val
}

// SetDate sets the value of Date.
func (s *Bill) SetDate(val time.Time) {
	s.Date = val
}

// SetEndDate sets the value of EndDate.
func (s *Bill) SetEndDate(val OptDateTime) {
	s.EndDate = val
}

// SetExtensionDate sets the value of ExtensionDate.
func (s *Bill) SetExtensionDate(val OptDateTime) {
	s.ExtensionDate = val
}

// SetRepeatFreq sets the value of RepeatFreq.
func (s *Bill) SetRepeatFreq(val BillRepeatFrequency) {
	s.RepeatFreq = val
}

// SetSkip sets the value of Skip.
func (s *Bill) SetSkip(val OptInt32) {
	s.Skip = val
}

// SetActive sets the value of Active.
func (s *Bill) SetActive(val OptBool) {
	s.Active = val
}

// SetOrder sets the value of Order.
func (s *Bill) SetOrder(val OptInt32) {
	s.Order = val
}

// SetNotes sets the value of Notes.
func (s *Bill) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetNextExpectedMatch sets the value of NextExpectedMatch.
func (s *Bill) SetNextExpectedMatch(val OptNilDateTime) {
	s.NextExpectedMatch = val
}

// SetNextExpectedMatchDiff sets the value of NextExpectedMatchDiff.
func (s *Bill) SetNextExpectedMatchDiff(val OptNilString) {
	s.NextExpectedMatchDiff = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *Bill) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupOrder sets the value of ObjectGroupOrder.
func (s *Bill) SetObjectGroupOrder(val OptNilInt32) {
	s.ObjectGroupOrder = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *Bill) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

// SetPayDates sets the value of PayDates.
func (s *Bill) SetPayDates(val []time.Time) {
	s.PayDates = val
}

// SetPaidDates sets the value of PaidDates.
func (s *Bill) SetPaidDates(val []BillPaidDatesItem) {
	s.PaidDates = val
}

// Ref: #/components/schemas/BillArray
type BillArray struct {
	Data []BillRead `json:"data"`
	Meta Meta       `json:"meta"`
}

// GetData returns the value of Data.
func (s *BillArray) GetData() []BillRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *BillArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *BillArray) SetData(val []BillRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *BillArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*BillArray) listBillByCurrencyRes()    {}
func (*BillArray) listBillByObjectGroupRes() {}
func (*BillArray) listBillRes()              {}

type BillPaidDatesItem struct {
	// Transaction group ID of the paid bill.
	TransactionGroupID OptString `json:"transaction_group_id"`
	// Transaction journal ID of the paid bill.
	TransactionJournalID OptString `json:"transaction_journal_id"`
	// Date the bill was paid.
	Date OptDateTime `json:"date"`
}

// GetTransactionGroupID returns the value of TransactionGroupID.
func (s *BillPaidDatesItem) GetTransactionGroupID() OptString {
	return s.TransactionGroupID
}

// GetTransactionJournalID returns the value of TransactionJournalID.
func (s *BillPaidDatesItem) GetTransactionJournalID() OptString {
	return s.TransactionJournalID
}

// GetDate returns the value of Date.
func (s *BillPaidDatesItem) GetDate() OptDateTime {
	return s.Date
}

// SetTransactionGroupID sets the value of TransactionGroupID.
func (s *BillPaidDatesItem) SetTransactionGroupID(val OptString) {
	s.TransactionGroupID = val
}

// SetTransactionJournalID sets the value of TransactionJournalID.
func (s *BillPaidDatesItem) SetTransactionJournalID(val OptString) {
	s.TransactionJournalID = val
}

// SetDate sets the value of Date.
func (s *BillPaidDatesItem) SetDate(val OptDateTime) {
	s.Date = val
}

// Ref: #/components/schemas/BillRead
type BillRead struct {
	// Immutable value.
	Type       string `json:"type"`
	ID         string `json:"id"`
	Attributes Bill   `json:"attributes"`
}

// GetType returns the value of Type.
func (s *BillRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *BillRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *BillRead) GetAttributes() Bill {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *BillRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *BillRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *BillRead) SetAttributes(val Bill) {
	s.Attributes = val
}

// How often the bill must be paid.
// Ref: #/components/schemas/BillRepeatFrequency
type BillRepeatFrequency string

const (
	BillRepeatFrequencyWeekly    BillRepeatFrequency = "weekly"
	BillRepeatFrequencyMonthly   BillRepeatFrequency = "monthly"
	BillRepeatFrequencyQuarterly BillRepeatFrequency = "quarterly"
	BillRepeatFrequencyHalfYear  BillRepeatFrequency = "half-year"
	BillRepeatFrequencyYearly    BillRepeatFrequency = "yearly"
)

// AllValues returns all BillRepeatFrequency values.
func (BillRepeatFrequency) AllValues() []BillRepeatFrequency {
	return []BillRepeatFrequency{
		BillRepeatFrequencyWeekly,
		BillRepeatFrequencyMonthly,
		BillRepeatFrequencyQuarterly,
		BillRepeatFrequencyHalfYear,
		BillRepeatFrequencyYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillRepeatFrequency) MarshalText() ([]byte, error) {
	switch s {
	case BillRepeatFrequencyWeekly:
		return []byte(s), nil
	case BillRepeatFrequencyMonthly:
		return []byte(s), nil
	case BillRepeatFrequencyQuarterly:
		return []byte(s), nil
	case BillRepeatFrequencyHalfYear:
		return []byte(s), nil
	case BillRepeatFrequencyYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillRepeatFrequency) UnmarshalText(data []byte) error {
	switch BillRepeatFrequency(data) {
	case BillRepeatFrequencyWeekly:
		*s = BillRepeatFrequencyWeekly
		return nil
	case BillRepeatFrequencyMonthly:
		*s = BillRepeatFrequencyMonthly
		return nil
	case BillRepeatFrequencyQuarterly:
		*s = BillRepeatFrequencyQuarterly
		return nil
	case BillRepeatFrequencyHalfYear:
		*s = BillRepeatFrequencyHalfYear
		return nil
	case BillRepeatFrequencyYearly:
		*s = BillRepeatFrequencyYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BillSingle
type BillSingle struct {
	Data BillRead `json:"data"`
}

// GetData returns the value of Data.
func (s *BillSingle) GetData() BillRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *BillSingle) SetData(val BillRead) {
	s.Data = val
}

func (*BillSingle) getBillRes()    {}
func (*BillSingle) storeBillRes()  {}
func (*BillSingle) updateBillRes() {}

// Ref: #/components/schemas/BillStore
type BillStore struct {
	// Use either currency_id or currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code.
	CurrencyCode OptString `json:"currency_code"`
	Name         string    `json:"name"`
	AmountMin    string    `json:"amount_min"`
	AmountMax    string    `json:"amount_max"`
	Date         time.Time `json:"date"`
	// The date after which this bill is no longer valid or applicable.
	EndDate OptDateTime `json:"end_date"`
	// The date before which the bill must be renewed (or cancelled).
	ExtensionDate OptDateTime         `json:"extension_date"`
	RepeatFreq    BillRepeatFrequency `json:"repeat_freq"`
	// How often the bill must be skipped. 1 means a bi-monthly bill.
	Skip OptInt32 `json:"skip"`
	// If the bill is active.
	Active OptBool      `json:"active"`
	Notes  OptNilString `json:"notes"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BillStore) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *BillStore) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetName returns the value of Name.
func (s *BillStore) GetName() string {
	return s.Name
}

// GetAmountMin returns the value of AmountMin.
func (s *BillStore) GetAmountMin() string {
	return s.AmountMin
}

// GetAmountMax returns the value of AmountMax.
func (s *BillStore) GetAmountMax() string {
	return s.AmountMax
}

// GetDate returns the value of Date.
func (s *BillStore) GetDate() time.Time {
	return s.Date
}

// GetEndDate returns the value of EndDate.
func (s *BillStore) GetEndDate() OptDateTime {
	return s.EndDate
}

// GetExtensionDate returns the value of ExtensionDate.
func (s *BillStore) GetExtensionDate() OptDateTime {
	return s.ExtensionDate
}

// GetRepeatFreq returns the value of RepeatFreq.
func (s *BillStore) GetRepeatFreq() BillRepeatFrequency {
	return s.RepeatFreq
}

// GetSkip returns the value of Skip.
func (s *BillStore) GetSkip() OptInt32 {
	return s.Skip
}

// GetActive returns the value of Active.
func (s *BillStore) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *BillStore) GetNotes() OptNilString {
	return s.Notes
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *BillStore) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *BillStore) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BillStore) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *BillStore) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetName sets the value of Name.
func (s *BillStore) SetName(val string) {
	s.Name = val
}

// SetAmountMin sets the value of AmountMin.
func (s *BillStore) SetAmountMin(val string) {
	s.AmountMin = val
}

// SetAmountMax sets the value of AmountMax.
func (s *BillStore) SetAmountMax(val string) {
	s.AmountMax = val
}

// SetDate sets the value of Date.
func (s *BillStore) SetDate(val time.Time) {
	s.Date = val
}

// SetEndDate sets the value of EndDate.
func (s *BillStore) SetEndDate(val OptDateTime) {
	s.EndDate = val
}

// SetExtensionDate sets the value of ExtensionDate.
func (s *BillStore) SetExtensionDate(val OptDateTime) {
	s.ExtensionDate = val
}

// SetRepeatFreq sets the value of RepeatFreq.
func (s *BillStore) SetRepeatFreq(val BillRepeatFrequency) {
	s.RepeatFreq = val
}

// SetSkip sets the value of Skip.
func (s *BillStore) SetSkip(val OptInt32) {
	s.Skip = val
}

// SetActive sets the value of Active.
func (s *BillStore) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *BillStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *BillStore) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *BillStore) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

// Ref: #/components/schemas/BillUpdate
type BillUpdate struct {
	// Use either currency_id or currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code.
	CurrencyCode OptString   `json:"currency_code"`
	Name         string      `json:"name"`
	AmountMin    OptString   `json:"amount_min"`
	AmountMax    OptString   `json:"amount_max"`
	Date         OptDateTime `json:"date"`
	// The date after which this bill is no longer valid or applicable.
	EndDate OptDateTime `json:"end_date"`
	// The date before which the bill must be renewed (or cancelled).
	ExtensionDate OptDateTime            `json:"extension_date"`
	RepeatFreq    OptBillRepeatFrequency `json:"repeat_freq"`
	// How often the bill must be skipped. 1 means a bi-monthly bill.
	Skip OptInt32 `json:"skip"`
	// If the bill is active.
	Active OptBool      `json:"active"`
	Notes  OptNilString `json:"notes"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BillUpdate) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *BillUpdate) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetName returns the value of Name.
func (s *BillUpdate) GetName() string {
	return s.Name
}

// GetAmountMin returns the value of AmountMin.
func (s *BillUpdate) GetAmountMin() OptString {
	return s.AmountMin
}

// GetAmountMax returns the value of AmountMax.
func (s *BillUpdate) GetAmountMax() OptString {
	return s.AmountMax
}

// GetDate returns the value of Date.
func (s *BillUpdate) GetDate() OptDateTime {
	return s.Date
}

// GetEndDate returns the value of EndDate.
func (s *BillUpdate) GetEndDate() OptDateTime {
	return s.EndDate
}

// GetExtensionDate returns the value of ExtensionDate.
func (s *BillUpdate) GetExtensionDate() OptDateTime {
	return s.ExtensionDate
}

// GetRepeatFreq returns the value of RepeatFreq.
func (s *BillUpdate) GetRepeatFreq() OptBillRepeatFrequency {
	return s.RepeatFreq
}

// GetSkip returns the value of Skip.
func (s *BillUpdate) GetSkip() OptInt32 {
	return s.Skip
}

// GetActive returns the value of Active.
func (s *BillUpdate) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *BillUpdate) GetNotes() OptNilString {
	return s.Notes
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *BillUpdate) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *BillUpdate) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BillUpdate) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *BillUpdate) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetName sets the value of Name.
func (s *BillUpdate) SetName(val string) {
	s.Name = val
}

// SetAmountMin sets the value of AmountMin.
func (s *BillUpdate) SetAmountMin(val OptString) {
	s.AmountMin = val
}

// SetAmountMax sets the value of AmountMax.
func (s *BillUpdate) SetAmountMax(val OptString) {
	s.AmountMax = val
}

// SetDate sets the value of Date.
func (s *BillUpdate) SetDate(val OptDateTime) {
	s.Date = val
}

// SetEndDate sets the value of EndDate.
func (s *BillUpdate) SetEndDate(val OptDateTime) {
	s.EndDate = val
}

// SetExtensionDate sets the value of ExtensionDate.
func (s *BillUpdate) SetExtensionDate(val OptDateTime) {
	s.ExtensionDate = val
}

// SetRepeatFreq sets the value of RepeatFreq.
func (s *BillUpdate) SetRepeatFreq(val OptBillRepeatFrequency) {
	s.RepeatFreq = val
}

// SetSkip sets the value of Skip.
func (s *BillUpdate) SetSkip(val OptInt32) {
	s.Skip = val
}

// SetActive sets the value of Active.
func (s *BillUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *BillUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *BillUpdate) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *BillUpdate) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

// Ref: #/components/schemas/Budget
type Budget struct {
	CreatedAt      OptDateTime          `json:"created_at"`
	UpdatedAt      OptDateTime          `json:"updated_at"`
	Name           string               `json:"name"`
	Active         OptBool              `json:"active"`
	Notes          OptNilString         `json:"notes"`
	Order          OptInt32             `json:"order"`
	AutoBudgetType OptNilAutoBudgetType `json:"auto_budget_type"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	AutoBudgetCurrencyID OptNilString `json:"auto_budget_currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	AutoBudgetCurrencyCode OptNilString           `json:"auto_budget_currency_code"`
	AutoBudgetAmount       OptNilString           `json:"auto_budget_amount"`
	AutoBudgetPeriod       OptNilAutoBudgetPeriod `json:"auto_budget_period"`
	// Information on how much was spent in this budget. Is only filled in when the start and end date
	// are submitted.
	Spent []BudgetSpent `json:"spent"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Budget) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Budget) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Budget) GetName() string {
	return s.Name
}

// GetActive returns the value of Active.
func (s *Budget) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *Budget) GetNotes() OptNilString {
	return s.Notes
}

// GetOrder returns the value of Order.
func (s *Budget) GetOrder() OptInt32 {
	return s.Order
}

// GetAutoBudgetType returns the value of AutoBudgetType.
func (s *Budget) GetAutoBudgetType() OptNilAutoBudgetType {
	return s.AutoBudgetType
}

// GetAutoBudgetCurrencyID returns the value of AutoBudgetCurrencyID.
func (s *Budget) GetAutoBudgetCurrencyID() OptNilString {
	return s.AutoBudgetCurrencyID
}

// GetAutoBudgetCurrencyCode returns the value of AutoBudgetCurrencyCode.
func (s *Budget) GetAutoBudgetCurrencyCode() OptNilString {
	return s.AutoBudgetCurrencyCode
}

// GetAutoBudgetAmount returns the value of AutoBudgetAmount.
func (s *Budget) GetAutoBudgetAmount() OptNilString {
	return s.AutoBudgetAmount
}

// GetAutoBudgetPeriod returns the value of AutoBudgetPeriod.
func (s *Budget) GetAutoBudgetPeriod() OptNilAutoBudgetPeriod {
	return s.AutoBudgetPeriod
}

// GetSpent returns the value of Spent.
func (s *Budget) GetSpent() []BudgetSpent {
	return s.Spent
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Budget) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Budget) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Budget) SetName(val string) {
	s.Name = val
}

// SetActive sets the value of Active.
func (s *Budget) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *Budget) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetOrder sets the value of Order.
func (s *Budget) SetOrder(val OptInt32) {
	s.Order = val
}

// SetAutoBudgetType sets the value of AutoBudgetType.
func (s *Budget) SetAutoBudgetType(val OptNilAutoBudgetType) {
	s.AutoBudgetType = val
}

// SetAutoBudgetCurrencyID sets the value of AutoBudgetCurrencyID.
func (s *Budget) SetAutoBudgetCurrencyID(val OptNilString) {
	s.AutoBudgetCurrencyID = val
}

// SetAutoBudgetCurrencyCode sets the value of AutoBudgetCurrencyCode.
func (s *Budget) SetAutoBudgetCurrencyCode(val OptNilString) {
	s.AutoBudgetCurrencyCode = val
}

// SetAutoBudgetAmount sets the value of AutoBudgetAmount.
func (s *Budget) SetAutoBudgetAmount(val OptNilString) {
	s.AutoBudgetAmount = val
}

// SetAutoBudgetPeriod sets the value of AutoBudgetPeriod.
func (s *Budget) SetAutoBudgetPeriod(val OptNilAutoBudgetPeriod) {
	s.AutoBudgetPeriod = val
}

// SetSpent sets the value of Spent.
func (s *Budget) SetSpent(val []BudgetSpent) {
	s.Spent = val
}

// Ref: #/components/schemas/BudgetArray
type BudgetArray struct {
	Data []BudgetRead `json:"data"`
	Meta Meta         `json:"meta"`
}

// GetData returns the value of Data.
func (s *BudgetArray) GetData() []BudgetRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *BudgetArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *BudgetArray) SetData(val []BudgetRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *BudgetArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*BudgetArray) listBudgetRes() {}

// Ref: #/components/schemas/BudgetLimit
type BudgetLimit struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// Start date of the budget limit.
	Start time.Time `json:"start"`
	// End date of the budget limit.
	End time.Time `json:"end"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode          OptString `json:"currency_code"`
	CurrencyName          OptString `json:"currency_name"`
	CurrencySymbol        OptString `json:"currency_symbol"`
	CurrencyDecimalPlaces OptInt32  `json:"currency_decimal_places"`
	// The budget ID of the associated budget.
	BudgetID string `json:"budget_id"`
	// Period of the budget limit. Only used when auto-generated by auto-budget.
	Period OptNilString `json:"period"`
	Amount string       `json:"amount"`
	Spent  OptNilString `json:"spent"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BudgetLimit) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BudgetLimit) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetStart returns the value of Start.
func (s *BudgetLimit) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *BudgetLimit) GetEnd() time.Time {
	return s.End
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BudgetLimit) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *BudgetLimit) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencyName returns the value of CurrencyName.
func (s *BudgetLimit) GetCurrencyName() OptString {
	return s.CurrencyName
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *BudgetLimit) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *BudgetLimit) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetBudgetID returns the value of BudgetID.
func (s *BudgetLimit) GetBudgetID() string {
	return s.BudgetID
}

// GetPeriod returns the value of Period.
func (s *BudgetLimit) GetPeriod() OptNilString {
	return s.Period
}

// GetAmount returns the value of Amount.
func (s *BudgetLimit) GetAmount() string {
	return s.Amount
}

// GetSpent returns the value of Spent.
func (s *BudgetLimit) GetSpent() OptNilString {
	return s.Spent
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BudgetLimit) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BudgetLimit) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetStart sets the value of Start.
func (s *BudgetLimit) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *BudgetLimit) SetEnd(val time.Time) {
	s.End = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BudgetLimit) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *BudgetLimit) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencyName sets the value of CurrencyName.
func (s *BudgetLimit) SetCurrencyName(val OptString) {
	s.CurrencyName = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *BudgetLimit) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *BudgetLimit) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetBudgetID sets the value of BudgetID.
func (s *BudgetLimit) SetBudgetID(val string) {
	s.BudgetID = val
}

// SetPeriod sets the value of Period.
func (s *BudgetLimit) SetPeriod(val OptNilString) {
	s.Period = val
}

// SetAmount sets the value of Amount.
func (s *BudgetLimit) SetAmount(val string) {
	s.Amount = val
}

// SetSpent sets the value of Spent.
func (s *BudgetLimit) SetSpent(val OptNilString) {
	s.Spent = val
}

// Ref: #/components/schemas/BudgetLimitArray
type BudgetLimitArray struct {
	Data []BudgetLimitRead `json:"data"`
	Meta Meta              `json:"meta"`
}

// GetData returns the value of Data.
func (s *BudgetLimitArray) GetData() []BudgetLimitRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *BudgetLimitArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *BudgetLimitArray) SetData(val []BudgetLimitRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *BudgetLimitArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*BudgetLimitArray) listBudgetLimitByBudgetRes()   {}
func (*BudgetLimitArray) listBudgetLimitByCurrencyRes() {}
func (*BudgetLimitArray) listBudgetLimitRes()           {}

// Ref: #/components/schemas/BudgetLimitRead
type BudgetLimitRead struct {
	// Immutable value.
	Type       string      `json:"type"`
	ID         string      `json:"id"`
	Attributes BudgetLimit `json:"attributes"`
}

// GetType returns the value of Type.
func (s *BudgetLimitRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *BudgetLimitRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *BudgetLimitRead) GetAttributes() BudgetLimit {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *BudgetLimitRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *BudgetLimitRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *BudgetLimitRead) SetAttributes(val BudgetLimit) {
	s.Attributes = val
}

// Ref: #/components/schemas/BudgetLimitSingle
type BudgetLimitSingle struct {
	Data BudgetLimitRead `json:"data"`
}

// GetData returns the value of Data.
func (s *BudgetLimitSingle) GetData() BudgetLimitRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *BudgetLimitSingle) SetData(val BudgetLimitRead) {
	s.Data = val
}

func (*BudgetLimitSingle) getBudgetLimitRes()    {}
func (*BudgetLimitSingle) storeBudgetLimitRes()  {}
func (*BudgetLimitSingle) updateBudgetLimitRes() {}

// Ref: #/components/schemas/BudgetLimitStore
type BudgetLimitStore struct {
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyID OptString `json:"currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode OptString `json:"currency_code"`
	// The budget ID of the associated budget.
	BudgetID string `json:"budget_id"`
	// Start date of the budget limit.
	Start time.Time `json:"start"`
	// Period of the budget limit. Only used when auto-generated by auto-budget.
	Period OptNilString `json:"period"`
	// End date of the budget limit.
	End    time.Time `json:"end"`
	Amount string    `json:"amount"`
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BudgetLimitStore) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *BudgetLimitStore) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetBudgetID returns the value of BudgetID.
func (s *BudgetLimitStore) GetBudgetID() string {
	return s.BudgetID
}

// GetStart returns the value of Start.
func (s *BudgetLimitStore) GetStart() time.Time {
	return s.Start
}

// GetPeriod returns the value of Period.
func (s *BudgetLimitStore) GetPeriod() OptNilString {
	return s.Period
}

// GetEnd returns the value of End.
func (s *BudgetLimitStore) GetEnd() time.Time {
	return s.End
}

// GetAmount returns the value of Amount.
func (s *BudgetLimitStore) GetAmount() string {
	return s.Amount
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BudgetLimitStore) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *BudgetLimitStore) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetBudgetID sets the value of BudgetID.
func (s *BudgetLimitStore) SetBudgetID(val string) {
	s.BudgetID = val
}

// SetStart sets the value of Start.
func (s *BudgetLimitStore) SetStart(val time.Time) {
	s.Start = val
}

// SetPeriod sets the value of Period.
func (s *BudgetLimitStore) SetPeriod(val OptNilString) {
	s.Period = val
}

// SetEnd sets the value of End.
func (s *BudgetLimitStore) SetEnd(val time.Time) {
	s.End = val
}

// SetAmount sets the value of Amount.
func (s *BudgetLimitStore) SetAmount(val string) {
	s.Amount = val
}

// Ref: #/components/schemas/BudgetRead
type BudgetRead struct {
	// Immutable value.
	Type       string `json:"type"`
	ID         string `json:"id"`
	Attributes Budget `json:"attributes"`
}

// GetType returns the value of Type.
func (s *BudgetRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *BudgetRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *BudgetRead) GetAttributes() Budget {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *BudgetRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *BudgetRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *BudgetRead) SetAttributes(val Budget) {
	s.Attributes = val
}

// Ref: #/components/schemas/BudgetSingle
type BudgetSingle struct {
	Data BudgetRead `json:"data"`
}

// GetData returns the value of Data.
func (s *BudgetSingle) GetData() BudgetRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *BudgetSingle) SetData(val BudgetRead) {
	s.Data = val
}

func (*BudgetSingle) getBudgetRes()    {}
func (*BudgetSingle) storeBudgetRes()  {}
func (*BudgetSingle) updateBudgetRes() {}

// Ref: #/components/schemas/BudgetSpent
type BudgetSpent struct {
	// The amount spent.
	Sum            OptString `json:"sum"`
	CurrencyID     OptString `json:"currency_id"`
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals supported by the currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
}

// GetSum returns the value of Sum.
func (s *BudgetSpent) GetSum() OptString {
	return s.Sum
}

// GetCurrencyID returns the value of CurrencyID.
func (s *BudgetSpent) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *BudgetSpent) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *BudgetSpent) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *BudgetSpent) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// SetSum sets the value of Sum.
func (s *BudgetSpent) SetSum(val OptString) {
	s.Sum = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *BudgetSpent) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *BudgetSpent) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *BudgetSpent) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *BudgetSpent) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// Ref: #/components/schemas/BudgetStore
type BudgetStore struct {
	Name           string               `json:"name"`
	Active         OptBool              `json:"active"`
	Order          OptInt32             `json:"order"`
	Notes          OptNilString         `json:"notes"`
	AutoBudgetType OptNilAutoBudgetType `json:"auto_budget_type"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	AutoBudgetCurrencyID OptNilString `json:"auto_budget_currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	AutoBudgetCurrencyCode OptNilString           `json:"auto_budget_currency_code"`
	AutoBudgetAmount       OptNilString           `json:"auto_budget_amount"`
	AutoBudgetPeriod       OptNilAutoBudgetPeriod `json:"auto_budget_period"`
}

// GetName returns the value of Name.
func (s *BudgetStore) GetName() string {
	return s.Name
}

// GetActive returns the value of Active.
func (s *BudgetStore) GetActive() OptBool {
	return s.Active
}

// GetOrder returns the value of Order.
func (s *BudgetStore) GetOrder() OptInt32 {
	return s.Order
}

// GetNotes returns the value of Notes.
func (s *BudgetStore) GetNotes() OptNilString {
	return s.Notes
}

// GetAutoBudgetType returns the value of AutoBudgetType.
func (s *BudgetStore) GetAutoBudgetType() OptNilAutoBudgetType {
	return s.AutoBudgetType
}

// GetAutoBudgetCurrencyID returns the value of AutoBudgetCurrencyID.
func (s *BudgetStore) GetAutoBudgetCurrencyID() OptNilString {
	return s.AutoBudgetCurrencyID
}

// GetAutoBudgetCurrencyCode returns the value of AutoBudgetCurrencyCode.
func (s *BudgetStore) GetAutoBudgetCurrencyCode() OptNilString {
	return s.AutoBudgetCurrencyCode
}

// GetAutoBudgetAmount returns the value of AutoBudgetAmount.
func (s *BudgetStore) GetAutoBudgetAmount() OptNilString {
	return s.AutoBudgetAmount
}

// GetAutoBudgetPeriod returns the value of AutoBudgetPeriod.
func (s *BudgetStore) GetAutoBudgetPeriod() OptNilAutoBudgetPeriod {
	return s.AutoBudgetPeriod
}

// SetName sets the value of Name.
func (s *BudgetStore) SetName(val string) {
	s.Name = val
}

// SetActive sets the value of Active.
func (s *BudgetStore) SetActive(val OptBool) {
	s.Active = val
}

// SetOrder sets the value of Order.
func (s *BudgetStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetNotes sets the value of Notes.
func (s *BudgetStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetAutoBudgetType sets the value of AutoBudgetType.
func (s *BudgetStore) SetAutoBudgetType(val OptNilAutoBudgetType) {
	s.AutoBudgetType = val
}

// SetAutoBudgetCurrencyID sets the value of AutoBudgetCurrencyID.
func (s *BudgetStore) SetAutoBudgetCurrencyID(val OptNilString) {
	s.AutoBudgetCurrencyID = val
}

// SetAutoBudgetCurrencyCode sets the value of AutoBudgetCurrencyCode.
func (s *BudgetStore) SetAutoBudgetCurrencyCode(val OptNilString) {
	s.AutoBudgetCurrencyCode = val
}

// SetAutoBudgetAmount sets the value of AutoBudgetAmount.
func (s *BudgetStore) SetAutoBudgetAmount(val OptNilString) {
	s.AutoBudgetAmount = val
}

// SetAutoBudgetPeriod sets the value of AutoBudgetPeriod.
func (s *BudgetStore) SetAutoBudgetPeriod(val OptNilAutoBudgetPeriod) {
	s.AutoBudgetPeriod = val
}

// Ref: #/components/schemas/BudgetUpdate
type BudgetUpdate struct {
	Name           string               `json:"name"`
	Active         OptBool              `json:"active"`
	Order          OptInt32             `json:"order"`
	Notes          OptNilString         `json:"notes"`
	AutoBudgetType OptNilAutoBudgetType `json:"auto_budget_type"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	AutoBudgetCurrencyID OptNilString `json:"auto_budget_currency_id"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	AutoBudgetCurrencyCode OptNilString           `json:"auto_budget_currency_code"`
	AutoBudgetAmount       OptNilString           `json:"auto_budget_amount"`
	AutoBudgetPeriod       OptNilAutoBudgetPeriod `json:"auto_budget_period"`
}

// GetName returns the value of Name.
func (s *BudgetUpdate) GetName() string {
	return s.Name
}

// GetActive returns the value of Active.
func (s *BudgetUpdate) GetActive() OptBool {
	return s.Active
}

// GetOrder returns the value of Order.
func (s *BudgetUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetNotes returns the value of Notes.
func (s *BudgetUpdate) GetNotes() OptNilString {
	return s.Notes
}

// GetAutoBudgetType returns the value of AutoBudgetType.
func (s *BudgetUpdate) GetAutoBudgetType() OptNilAutoBudgetType {
	return s.AutoBudgetType
}

// GetAutoBudgetCurrencyID returns the value of AutoBudgetCurrencyID.
func (s *BudgetUpdate) GetAutoBudgetCurrencyID() OptNilString {
	return s.AutoBudgetCurrencyID
}

// GetAutoBudgetCurrencyCode returns the value of AutoBudgetCurrencyCode.
func (s *BudgetUpdate) GetAutoBudgetCurrencyCode() OptNilString {
	return s.AutoBudgetCurrencyCode
}

// GetAutoBudgetAmount returns the value of AutoBudgetAmount.
func (s *BudgetUpdate) GetAutoBudgetAmount() OptNilString {
	return s.AutoBudgetAmount
}

// GetAutoBudgetPeriod returns the value of AutoBudgetPeriod.
func (s *BudgetUpdate) GetAutoBudgetPeriod() OptNilAutoBudgetPeriod {
	return s.AutoBudgetPeriod
}

// SetName sets the value of Name.
func (s *BudgetUpdate) SetName(val string) {
	s.Name = val
}

// SetActive sets the value of Active.
func (s *BudgetUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetOrder sets the value of Order.
func (s *BudgetUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetNotes sets the value of Notes.
func (s *BudgetUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetAutoBudgetType sets the value of AutoBudgetType.
func (s *BudgetUpdate) SetAutoBudgetType(val OptNilAutoBudgetType) {
	s.AutoBudgetType = val
}

// SetAutoBudgetCurrencyID sets the value of AutoBudgetCurrencyID.
func (s *BudgetUpdate) SetAutoBudgetCurrencyID(val OptNilString) {
	s.AutoBudgetCurrencyID = val
}

// SetAutoBudgetCurrencyCode sets the value of AutoBudgetCurrencyCode.
func (s *BudgetUpdate) SetAutoBudgetCurrencyCode(val OptNilString) {
	s.AutoBudgetCurrencyCode = val
}

// SetAutoBudgetAmount sets the value of AutoBudgetAmount.
func (s *BudgetUpdate) SetAutoBudgetAmount(val OptNilString) {
	s.AutoBudgetAmount = val
}

// SetAutoBudgetPeriod sets the value of AutoBudgetPeriod.
func (s *BudgetUpdate) SetAutoBudgetPeriod(val OptNilAutoBudgetPeriod) {
	s.AutoBudgetPeriod = val
}

// BulkUpdateTransactionsNoContent is response for BulkUpdateTransactions operation.
type BulkUpdateTransactionsNoContent struct{}

func (*BulkUpdateTransactionsNoContent) bulkUpdateTransactionsRes() {}

// Ref: #/components/schemas/Category
type Category struct {
	CreatedAt OptDateTime      `json:"created_at"`
	UpdatedAt OptDateTime      `json:"updated_at"`
	Name      string           `json:"name"`
	Notes     OptNilString     `json:"notes"`
	Spent     []CategorySpent  `json:"spent"`
	Earned    []CategoryEarned `json:"earned"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Category) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Category) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Category) GetName() string {
	return s.Name
}

// GetNotes returns the value of Notes.
func (s *Category) GetNotes() OptNilString {
	return s.Notes
}

// GetSpent returns the value of Spent.
func (s *Category) GetSpent() []CategorySpent {
	return s.Spent
}

// GetEarned returns the value of Earned.
func (s *Category) GetEarned() []CategoryEarned {
	return s.Earned
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Category) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Category) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val string) {
	s.Name = val
}

// SetNotes sets the value of Notes.
func (s *Category) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetSpent sets the value of Spent.
func (s *Category) SetSpent(val []CategorySpent) {
	s.Spent = val
}

// SetEarned sets the value of Earned.
func (s *Category) SetEarned(val []CategoryEarned) {
	s.Earned = val
}

// Ref: #/components/schemas/CategoryArray
type CategoryArray struct {
	Data []CategoryRead `json:"data"`
	Meta Meta           `json:"meta"`
}

// GetData returns the value of Data.
func (s *CategoryArray) GetData() []CategoryRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *CategoryArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *CategoryArray) SetData(val []CategoryRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *CategoryArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*CategoryArray) listCategoryRes() {}

// Ref: #/components/schemas/CategoryEarned
type CategoryEarned struct {
	CurrencyID     OptString `json:"currency_id"`
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals supported by the currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
	// The amount earned.
	Sum OptString `json:"sum"`
}

// GetCurrencyID returns the value of CurrencyID.
func (s *CategoryEarned) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *CategoryEarned) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *CategoryEarned) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *CategoryEarned) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetSum returns the value of Sum.
func (s *CategoryEarned) GetSum() OptString {
	return s.Sum
}

// SetCurrencyID sets the value of CurrencyID.
func (s *CategoryEarned) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *CategoryEarned) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *CategoryEarned) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *CategoryEarned) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetSum sets the value of Sum.
func (s *CategoryEarned) SetSum(val OptString) {
	s.Sum = val
}

// Ref: #/components/schemas/CategoryRead
type CategoryRead struct {
	// Immutable value.
	Type       string   `json:"type"`
	ID         string   `json:"id"`
	Attributes Category `json:"attributes"`
}

// GetType returns the value of Type.
func (s *CategoryRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *CategoryRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *CategoryRead) GetAttributes() Category {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *CategoryRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *CategoryRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *CategoryRead) SetAttributes(val Category) {
	s.Attributes = val
}

// Ref: #/components/schemas/CategorySingle
type CategorySingle struct {
	Data CategoryRead `json:"data"`
}

// GetData returns the value of Data.
func (s *CategorySingle) GetData() CategoryRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *CategorySingle) SetData(val CategoryRead) {
	s.Data = val
}

func (*CategorySingle) getCategoryRes()    {}
func (*CategorySingle) storeCategoryRes()  {}
func (*CategorySingle) updateCategoryRes() {}

// Ref: #/components/schemas/CategorySpent
type CategorySpent struct {
	CurrencyID     OptString `json:"currency_id"`
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals supported by the currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
	// The amount spent.
	Sum OptString `json:"sum"`
}

// GetCurrencyID returns the value of CurrencyID.
func (s *CategorySpent) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *CategorySpent) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *CategorySpent) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *CategorySpent) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetSum returns the value of Sum.
func (s *CategorySpent) GetSum() OptString {
	return s.Sum
}

// SetCurrencyID sets the value of CurrencyID.
func (s *CategorySpent) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *CategorySpent) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *CategorySpent) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *CategorySpent) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetSum sets the value of Sum.
func (s *CategorySpent) SetSum(val OptString) {
	s.Sum = val
}

// Ref: #/components/schemas/CategoryUpdate
type CategoryUpdate struct {
	Name  string       `json:"name"`
	Notes OptNilString `json:"notes"`
}

// GetName returns the value of Name.
func (s *CategoryUpdate) GetName() string {
	return s.Name
}

// GetNotes returns the value of Notes.
func (s *CategoryUpdate) GetNotes() OptNilString {
	return s.Notes
}

// SetName sets the value of Name.
func (s *CategoryUpdate) SetName(val string) {
	s.Name = val
}

// SetNotes sets the value of Notes.
func (s *CategoryUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// Ref: #/components/schemas/ChartDataPoint
type ChartDataPoint struct {
	// The key is the label of the value, so for example: '2018-01-01' => 13 or 'Groceries' => -123.
	Key OptString `json:"key"`
}

// GetKey returns the value of Key.
func (s *ChartDataPoint) GetKey() OptString {
	return s.Key
}

// SetKey sets the value of Key.
func (s *ChartDataPoint) SetKey(val OptString) {
	s.Key = val
}

// Ref: #/components/schemas/ChartDataSet
type ChartDataSet struct {
	// This is the title of the current set. It can refer to an account, a budget or another object (by
	// name).
	Label OptString `json:"label"`
	// The currency ID of the currency associated to the data in the entries.
	CurrencyID     OptString `json:"currency_id"`
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals for the currency associated to the data in the entries.
	CurrencyDecimalPlaces OptInt32    `json:"currency_decimal_places"`
	StartDate             OptDateTime `json:"start_date"`
	EndDate               OptDateTime `json:"end_date"`
	// Indicated the type of chart that is expected to be rendered. You can safely ignore this if you
	// want.
	Type OptString `json:"type"`
	// Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of
	// the chart).
	YAxisID OptInt32 `json:"yAxisID"`
	// The actual entries for this data set. They 'key' value is the label for the data point. The value
	// is the actual (numerical) value.
	Entries OptChartDataSetEntries `json:"entries"`
}

// GetLabel returns the value of Label.
func (s *ChartDataSet) GetLabel() OptString {
	return s.Label
}

// GetCurrencyID returns the value of CurrencyID.
func (s *ChartDataSet) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *ChartDataSet) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *ChartDataSet) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *ChartDataSet) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetStartDate returns the value of StartDate.
func (s *ChartDataSet) GetStartDate() OptDateTime {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *ChartDataSet) GetEndDate() OptDateTime {
	return s.EndDate
}

// GetType returns the value of Type.
func (s *ChartDataSet) GetType() OptString {
	return s.Type
}

// GetYAxisID returns the value of YAxisID.
func (s *ChartDataSet) GetYAxisID() OptInt32 {
	return s.YAxisID
}

// GetEntries returns the value of Entries.
func (s *ChartDataSet) GetEntries() OptChartDataSetEntries {
	return s.Entries
}

// SetLabel sets the value of Label.
func (s *ChartDataSet) SetLabel(val OptString) {
	s.Label = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *ChartDataSet) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *ChartDataSet) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *ChartDataSet) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *ChartDataSet) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetStartDate sets the value of StartDate.
func (s *ChartDataSet) SetStartDate(val OptDateTime) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *ChartDataSet) SetEndDate(val OptDateTime) {
	s.EndDate = val
}

// SetType sets the value of Type.
func (s *ChartDataSet) SetType(val OptString) {
	s.Type = val
}

// SetYAxisID sets the value of YAxisID.
func (s *ChartDataSet) SetYAxisID(val OptInt32) {
	s.YAxisID = val
}

// SetEntries sets the value of Entries.
func (s *ChartDataSet) SetEntries(val OptChartDataSetEntries) {
	s.Entries = val
}

// The actual entries for this data set. They 'key' value is the label for the data point. The value
// is the actual (numerical) value.
type ChartDataSetEntries map[string]ChartDataPoint

func (s *ChartDataSetEntries) init() ChartDataSetEntries {
	m := *s
	if m == nil {
		m = map[string]ChartDataPoint{}
		*s = m
	}
	return m
}

type ChartLine []ChartDataSet

func (*ChartLine) getChartAccountOverviewRes() {}

// Ref: #/components/schemas/ConfigValueFilter
type ConfigValueFilter string

const (
	ConfigValueFilterConfigurationIsDemoSite            ConfigValueFilter = "configuration.is_demo_site"
	ConfigValueFilterConfigurationPermissionUpdateCheck ConfigValueFilter = "configuration.permission_update_check"
	ConfigValueFilterConfigurationLastUpdateCheck       ConfigValueFilter = "configuration.last_update_check"
	ConfigValueFilterConfigurationSingleUserMode        ConfigValueFilter = "configuration.single_user_mode"
	ConfigValueFilterFireflyVersion                     ConfigValueFilter = "firefly.version"
	ConfigValueFilterFireflyAPIVersion                  ConfigValueFilter = "firefly.api_version"
	ConfigValueFilterFireflyDefaultLocation             ConfigValueFilter = "firefly.default_location"
	ConfigValueFilterFireflyAccountToTransaction        ConfigValueFilter = "firefly.account_to_transaction"
	ConfigValueFilterFireflyAllowedOpposingTypes        ConfigValueFilter = "firefly.allowed_opposing_types"
	ConfigValueFilterFireflyAccountRoles                ConfigValueFilter = "firefly.accountRoles"
	ConfigValueFilterFireflyValidLiabilities            ConfigValueFilter = "firefly.valid_liabilities"
	ConfigValueFilterFireflyInterestPeriods             ConfigValueFilter = "firefly.interest_periods"
	ConfigValueFilterFireflyEnableExternalMap           ConfigValueFilter = "firefly.enable_external_map"
	ConfigValueFilterFireflyExpectedSourceTypes         ConfigValueFilter = "firefly.expected_source_types"
	ConfigValueFilterAppTimezone                        ConfigValueFilter = "app.timezone"
	ConfigValueFilterFireflyBillPeriods                 ConfigValueFilter = "firefly.bill_periods"
	ConfigValueFilterFireflyCreditCardTypes             ConfigValueFilter = "firefly.credit_card_types"
	ConfigValueFilterFireflyLanguages                   ConfigValueFilter = "firefly.languages"
	ConfigValueFilterFireflyValidViewRanges             ConfigValueFilter = "firefly.valid_view_ranges"
)

// AllValues returns all ConfigValueFilter values.
func (ConfigValueFilter) AllValues() []ConfigValueFilter {
	return []ConfigValueFilter{
		ConfigValueFilterConfigurationIsDemoSite,
		ConfigValueFilterConfigurationPermissionUpdateCheck,
		ConfigValueFilterConfigurationLastUpdateCheck,
		ConfigValueFilterConfigurationSingleUserMode,
		ConfigValueFilterFireflyVersion,
		ConfigValueFilterFireflyAPIVersion,
		ConfigValueFilterFireflyDefaultLocation,
		ConfigValueFilterFireflyAccountToTransaction,
		ConfigValueFilterFireflyAllowedOpposingTypes,
		ConfigValueFilterFireflyAccountRoles,
		ConfigValueFilterFireflyValidLiabilities,
		ConfigValueFilterFireflyInterestPeriods,
		ConfigValueFilterFireflyEnableExternalMap,
		ConfigValueFilterFireflyExpectedSourceTypes,
		ConfigValueFilterAppTimezone,
		ConfigValueFilterFireflyBillPeriods,
		ConfigValueFilterFireflyCreditCardTypes,
		ConfigValueFilterFireflyLanguages,
		ConfigValueFilterFireflyValidViewRanges,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConfigValueFilter) MarshalText() ([]byte, error) {
	switch s {
	case ConfigValueFilterConfigurationIsDemoSite:
		return []byte(s), nil
	case ConfigValueFilterConfigurationPermissionUpdateCheck:
		return []byte(s), nil
	case ConfigValueFilterConfigurationLastUpdateCheck:
		return []byte(s), nil
	case ConfigValueFilterConfigurationSingleUserMode:
		return []byte(s), nil
	case ConfigValueFilterFireflyVersion:
		return []byte(s), nil
	case ConfigValueFilterFireflyAPIVersion:
		return []byte(s), nil
	case ConfigValueFilterFireflyDefaultLocation:
		return []byte(s), nil
	case ConfigValueFilterFireflyAccountToTransaction:
		return []byte(s), nil
	case ConfigValueFilterFireflyAllowedOpposingTypes:
		return []byte(s), nil
	case ConfigValueFilterFireflyAccountRoles:
		return []byte(s), nil
	case ConfigValueFilterFireflyValidLiabilities:
		return []byte(s), nil
	case ConfigValueFilterFireflyInterestPeriods:
		return []byte(s), nil
	case ConfigValueFilterFireflyEnableExternalMap:
		return []byte(s), nil
	case ConfigValueFilterFireflyExpectedSourceTypes:
		return []byte(s), nil
	case ConfigValueFilterAppTimezone:
		return []byte(s), nil
	case ConfigValueFilterFireflyBillPeriods:
		return []byte(s), nil
	case ConfigValueFilterFireflyCreditCardTypes:
		return []byte(s), nil
	case ConfigValueFilterFireflyLanguages:
		return []byte(s), nil
	case ConfigValueFilterFireflyValidViewRanges:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConfigValueFilter) UnmarshalText(data []byte) error {
	switch ConfigValueFilter(data) {
	case ConfigValueFilterConfigurationIsDemoSite:
		*s = ConfigValueFilterConfigurationIsDemoSite
		return nil
	case ConfigValueFilterConfigurationPermissionUpdateCheck:
		*s = ConfigValueFilterConfigurationPermissionUpdateCheck
		return nil
	case ConfigValueFilterConfigurationLastUpdateCheck:
		*s = ConfigValueFilterConfigurationLastUpdateCheck
		return nil
	case ConfigValueFilterConfigurationSingleUserMode:
		*s = ConfigValueFilterConfigurationSingleUserMode
		return nil
	case ConfigValueFilterFireflyVersion:
		*s = ConfigValueFilterFireflyVersion
		return nil
	case ConfigValueFilterFireflyAPIVersion:
		*s = ConfigValueFilterFireflyAPIVersion
		return nil
	case ConfigValueFilterFireflyDefaultLocation:
		*s = ConfigValueFilterFireflyDefaultLocation
		return nil
	case ConfigValueFilterFireflyAccountToTransaction:
		*s = ConfigValueFilterFireflyAccountToTransaction
		return nil
	case ConfigValueFilterFireflyAllowedOpposingTypes:
		*s = ConfigValueFilterFireflyAllowedOpposingTypes
		return nil
	case ConfigValueFilterFireflyAccountRoles:
		*s = ConfigValueFilterFireflyAccountRoles
		return nil
	case ConfigValueFilterFireflyValidLiabilities:
		*s = ConfigValueFilterFireflyValidLiabilities
		return nil
	case ConfigValueFilterFireflyInterestPeriods:
		*s = ConfigValueFilterFireflyInterestPeriods
		return nil
	case ConfigValueFilterFireflyEnableExternalMap:
		*s = ConfigValueFilterFireflyEnableExternalMap
		return nil
	case ConfigValueFilterFireflyExpectedSourceTypes:
		*s = ConfigValueFilterFireflyExpectedSourceTypes
		return nil
	case ConfigValueFilterAppTimezone:
		*s = ConfigValueFilterAppTimezone
		return nil
	case ConfigValueFilterFireflyBillPeriods:
		*s = ConfigValueFilterFireflyBillPeriods
		return nil
	case ConfigValueFilterFireflyCreditCardTypes:
		*s = ConfigValueFilterFireflyCreditCardTypes
		return nil
	case ConfigValueFilterFireflyLanguages:
		*s = ConfigValueFilterFireflyLanguages
		return nil
	case ConfigValueFilterFireflyValidViewRanges:
		*s = ConfigValueFilterFireflyValidViewRanges
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ConfigValueUpdateFilter
type ConfigValueUpdateFilter string

const (
	ConfigValueUpdateFilterConfigurationIsDemoSite            ConfigValueUpdateFilter = "configuration.is_demo_site"
	ConfigValueUpdateFilterConfigurationPermissionUpdateCheck ConfigValueUpdateFilter = "configuration.permission_update_check"
	ConfigValueUpdateFilterConfigurationLastUpdateCheck       ConfigValueUpdateFilter = "configuration.last_update_check"
	ConfigValueUpdateFilterConfigurationSingleUserMode        ConfigValueUpdateFilter = "configuration.single_user_mode"
)

// AllValues returns all ConfigValueUpdateFilter values.
func (ConfigValueUpdateFilter) AllValues() []ConfigValueUpdateFilter {
	return []ConfigValueUpdateFilter{
		ConfigValueUpdateFilterConfigurationIsDemoSite,
		ConfigValueUpdateFilterConfigurationPermissionUpdateCheck,
		ConfigValueUpdateFilterConfigurationLastUpdateCheck,
		ConfigValueUpdateFilterConfigurationSingleUserMode,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConfigValueUpdateFilter) MarshalText() ([]byte, error) {
	switch s {
	case ConfigValueUpdateFilterConfigurationIsDemoSite:
		return []byte(s), nil
	case ConfigValueUpdateFilterConfigurationPermissionUpdateCheck:
		return []byte(s), nil
	case ConfigValueUpdateFilterConfigurationLastUpdateCheck:
		return []byte(s), nil
	case ConfigValueUpdateFilterConfigurationSingleUserMode:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConfigValueUpdateFilter) UnmarshalText(data []byte) error {
	switch ConfigValueUpdateFilter(data) {
	case ConfigValueUpdateFilterConfigurationIsDemoSite:
		*s = ConfigValueUpdateFilterConfigurationIsDemoSite
		return nil
	case ConfigValueUpdateFilterConfigurationPermissionUpdateCheck:
		*s = ConfigValueUpdateFilterConfigurationPermissionUpdateCheck
		return nil
	case ConfigValueUpdateFilterConfigurationLastUpdateCheck:
		*s = ConfigValueUpdateFilterConfigurationLastUpdateCheck
		return nil
	case ConfigValueUpdateFilterConfigurationSingleUserMode:
		*s = ConfigValueUpdateFilterConfigurationSingleUserMode
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Configuration
type Configuration struct {
	// Title of the configuration value.
	Title ConfigValueFilter `json:"title"`
	// Content of the configuration variable. Is very dynamic and can be anything from booleans to arrays.
	Value PolymorphicProperty `json:"value"`
	// If this config variable can be edited by the user.
	Editable bool `json:"editable"`
}

// GetTitle returns the value of Title.
func (s *Configuration) GetTitle() ConfigValueFilter {
	return s.Title
}

// GetValue returns the value of Value.
func (s *Configuration) GetValue() PolymorphicProperty {
	return s.Value
}

// GetEditable returns the value of Editable.
func (s *Configuration) GetEditable() bool {
	return s.Editable
}

// SetTitle sets the value of Title.
func (s *Configuration) SetTitle(val ConfigValueFilter) {
	s.Title = val
}

// SetValue sets the value of Value.
func (s *Configuration) SetValue(val PolymorphicProperty) {
	s.Value = val
}

// SetEditable sets the value of Editable.
func (s *Configuration) SetEditable(val bool) {
	s.Editable = val
}

type ConfigurationArray []Configuration

func (*ConfigurationArray) getConfigurationRes() {}

// Ref: #/components/schemas/ConfigurationSingle
type ConfigurationSingle struct {
	Data Configuration `json:"data"`
}

// GetData returns the value of Data.
func (s *ConfigurationSingle) GetData() Configuration {
	return s.Data
}

// SetData sets the value of Data.
func (s *ConfigurationSingle) SetData(val Configuration) {
	s.Data = val
}

func (*ConfigurationSingle) getSingleConfigurationRes() {}
func (*ConfigurationSingle) setConfigurationRes()       {}

// Ref: #/components/schemas/ConfigurationUpdate
type ConfigurationUpdate struct {
	// Can be a number, a string, boolean or object. This depends on the actual configuration value.
	Value PolymorphicProperty `json:"value"`
}

// GetValue returns the value of Value.
func (s *ConfigurationUpdate) GetValue() PolymorphicProperty {
	return s.Value
}

// SetValue sets the value of Value.
func (s *ConfigurationUpdate) SetValue(val PolymorphicProperty) {
	s.Value = val
}

// Mandatory when the account_role is ccAsset. Can only be monthlyFull or null.
// Ref: #/components/schemas/CreditCardType
type CreditCardType string

const (
	CreditCardTypeMonthlyFull CreditCardType = "monthlyFull"
)

// AllValues returns all CreditCardType values.
func (CreditCardType) AllValues() []CreditCardType {
	return []CreditCardType{
		CreditCardTypeMonthlyFull,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreditCardType) MarshalText() ([]byte, error) {
	switch s {
	case CreditCardTypeMonthlyFull:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreditCardType) UnmarshalText(data []byte) error {
	switch CreditCardType(data) {
	case CreditCardTypeMonthlyFull:
		*s = CreditCardTypeMonthlyFull
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CronResult
type CronResult struct {
	RecurringTransactions OptCronResultRow `json:"recurring_transactions"`
	AutoBudgets           OptCronResultRow `json:"auto_budgets"`
	Telemetry             OptCronResultRow `json:"telemetry"`
}

// GetRecurringTransactions returns the value of RecurringTransactions.
func (s *CronResult) GetRecurringTransactions() OptCronResultRow {
	return s.RecurringTransactions
}

// GetAutoBudgets returns the value of AutoBudgets.
func (s *CronResult) GetAutoBudgets() OptCronResultRow {
	return s.AutoBudgets
}

// GetTelemetry returns the value of Telemetry.
func (s *CronResult) GetTelemetry() OptCronResultRow {
	return s.Telemetry
}

// SetRecurringTransactions sets the value of RecurringTransactions.
func (s *CronResult) SetRecurringTransactions(val OptCronResultRow) {
	s.RecurringTransactions = val
}

// SetAutoBudgets sets the value of AutoBudgets.
func (s *CronResult) SetAutoBudgets(val OptCronResultRow) {
	s.AutoBudgets = val
}

// SetTelemetry sets the value of Telemetry.
func (s *CronResult) SetTelemetry(val OptCronResultRow) {
	s.Telemetry = val
}

func (*CronResult) getCronRes() {}

// Ref: #/components/schemas/CronResultRow
type CronResultRow struct {
	// This value tells you if this specific cron job actually fired. It may not fire. Some cron jobs
	// only fire every 24 hours, for example.
	JobFired OptNilBool `json:"job_fired"`
	// This value tells you if this specific cron job actually did something. The job may fire but not
	// change anything.
	JobSucceeded OptNilBool `json:"job_succeeded"`
	// If the cron jobs ran into some kind of an error, this value will be true.
	JobErrored OptNilBool `json:"job_errored"`
	// If the cron job ran into some kind of an error, this value will be the error message. The success
	// message
	// if the job actually ran OK.
	Message OptNilString `json:"message"`
}

// GetJobFired returns the value of JobFired.
func (s *CronResultRow) GetJobFired() OptNilBool {
	return s.JobFired
}

// GetJobSucceeded returns the value of JobSucceeded.
func (s *CronResultRow) GetJobSucceeded() OptNilBool {
	return s.JobSucceeded
}

// GetJobErrored returns the value of JobErrored.
func (s *CronResultRow) GetJobErrored() OptNilBool {
	return s.JobErrored
}

// GetMessage returns the value of Message.
func (s *CronResultRow) GetMessage() OptNilString {
	return s.Message
}

// SetJobFired sets the value of JobFired.
func (s *CronResultRow) SetJobFired(val OptNilBool) {
	s.JobFired = val
}

// SetJobSucceeded sets the value of JobSucceeded.
func (s *CronResultRow) SetJobSucceeded(val OptNilBool) {
	s.JobSucceeded = val
}

// SetJobErrored sets the value of JobErrored.
func (s *CronResultRow) SetJobErrored(val OptNilBool) {
	s.JobErrored = val
}

// SetMessage sets the value of Message.
func (s *CronResultRow) SetMessage(val OptNilString) {
	s.Message = val
}

// Ref: #/components/schemas/Currency
type Currency struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// Defaults to true.
	Enabled OptBool `json:"enabled"`
	// Make this currency the default currency.
	Default OptBool `json:"default"`
	Code    string  `json:"code"`
	Name    string  `json:"name"`
	Symbol  string  `json:"symbol"`
	// Supports 0-16 decimals.
	DecimalPlaces OptInt32 `json:"decimal_places"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Currency) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Currency) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetEnabled returns the value of Enabled.
func (s *Currency) GetEnabled() OptBool {
	return s.Enabled
}

// GetDefault returns the value of Default.
func (s *Currency) GetDefault() OptBool {
	return s.Default
}

// GetCode returns the value of Code.
func (s *Currency) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *Currency) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s *Currency) GetSymbol() string {
	return s.Symbol
}

// GetDecimalPlaces returns the value of DecimalPlaces.
func (s *Currency) GetDecimalPlaces() OptInt32 {
	return s.DecimalPlaces
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Currency) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Currency) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetEnabled sets the value of Enabled.
func (s *Currency) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetDefault sets the value of Default.
func (s *Currency) SetDefault(val OptBool) {
	s.Default = val
}

// SetCode sets the value of Code.
func (s *Currency) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *Currency) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *Currency) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimalPlaces sets the value of DecimalPlaces.
func (s *Currency) SetDecimalPlaces(val OptInt32) {
	s.DecimalPlaces = val
}

// Ref: #/components/schemas/CurrencyArray
type CurrencyArray struct {
	Data  []CurrencyRead `json:"data"`
	Meta  Meta           `json:"meta"`
	Links PageLink       `json:"links"`
}

// GetData returns the value of Data.
func (s *CurrencyArray) GetData() []CurrencyRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *CurrencyArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *CurrencyArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *CurrencyArray) SetData(val []CurrencyRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *CurrencyArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *CurrencyArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*CurrencyArray) listCurrencyRes() {}

// Ref: #/components/schemas/CurrencyRead
type CurrencyRead struct {
	// Immutable value.
	Type       string   `json:"type"`
	ID         string   `json:"id"`
	Attributes Currency `json:"attributes"`
}

// GetType returns the value of Type.
func (s *CurrencyRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *CurrencyRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *CurrencyRead) GetAttributes() Currency {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *CurrencyRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *CurrencyRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *CurrencyRead) SetAttributes(val Currency) {
	s.Attributes = val
}

// Ref: #/components/schemas/CurrencySingle
type CurrencySingle struct {
	Data CurrencyRead `json:"data"`
}

// GetData returns the value of Data.
func (s *CurrencySingle) GetData() CurrencyRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *CurrencySingle) SetData(val CurrencyRead) {
	s.Data = val
}

func (*CurrencySingle) defaultCurrencyRes()    {}
func (*CurrencySingle) disableCurrencyRes()    {}
func (*CurrencySingle) enableCurrencyRes()     {}
func (*CurrencySingle) getCurrencyRes()        {}
func (*CurrencySingle) getDefaultCurrencyRes() {}
func (*CurrencySingle) storeCurrencyRes()      {}
func (*CurrencySingle) updateCurrencyRes()     {}

// Ref: #/components/schemas/CurrencyStore
type CurrencyStore struct {
	// Defaults to true.
	Enabled OptBool `json:"enabled"`
	// Make this currency the default currency.
	Default OptBool `json:"default"`
	Code    string  `json:"code"`
	Name    string  `json:"name"`
	Symbol  string  `json:"symbol"`
	// Supports 0-16 decimals.
	DecimalPlaces OptInt32 `json:"decimal_places"`
}

// GetEnabled returns the value of Enabled.
func (s *CurrencyStore) GetEnabled() OptBool {
	return s.Enabled
}

// GetDefault returns the value of Default.
func (s *CurrencyStore) GetDefault() OptBool {
	return s.Default
}

// GetCode returns the value of Code.
func (s *CurrencyStore) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *CurrencyStore) GetName() string {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s *CurrencyStore) GetSymbol() string {
	return s.Symbol
}

// GetDecimalPlaces returns the value of DecimalPlaces.
func (s *CurrencyStore) GetDecimalPlaces() OptInt32 {
	return s.DecimalPlaces
}

// SetEnabled sets the value of Enabled.
func (s *CurrencyStore) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetDefault sets the value of Default.
func (s *CurrencyStore) SetDefault(val OptBool) {
	s.Default = val
}

// SetCode sets the value of Code.
func (s *CurrencyStore) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *CurrencyStore) SetName(val string) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *CurrencyStore) SetSymbol(val string) {
	s.Symbol = val
}

// SetDecimalPlaces sets the value of DecimalPlaces.
func (s *CurrencyStore) SetDecimalPlaces(val OptInt32) {
	s.DecimalPlaces = val
}

// Ref: #/components/schemas/CurrencyUpdate
type CurrencyUpdate struct {
	// If the currency is enabled.
	Enabled OptBool `json:"enabled"`
	// If the currency must be the default for the user. You can only submit TRUE.
	Default OptCurrencyUpdateDefault `json:"default"`
	// The currency code.
	Code OptString `json:"code"`
	// The currency name.
	Name OptString `json:"name"`
	// The currency symbol.
	Symbol OptString `json:"symbol"`
	// How many decimals to use when displaying this currency. Between 0 and 16.
	DecimalPlaces OptInt32 `json:"decimal_places"`
}

// GetEnabled returns the value of Enabled.
func (s *CurrencyUpdate) GetEnabled() OptBool {
	return s.Enabled
}

// GetDefault returns the value of Default.
func (s *CurrencyUpdate) GetDefault() OptCurrencyUpdateDefault {
	return s.Default
}

// GetCode returns the value of Code.
func (s *CurrencyUpdate) GetCode() OptString {
	return s.Code
}

// GetName returns the value of Name.
func (s *CurrencyUpdate) GetName() OptString {
	return s.Name
}

// GetSymbol returns the value of Symbol.
func (s *CurrencyUpdate) GetSymbol() OptString {
	return s.Symbol
}

// GetDecimalPlaces returns the value of DecimalPlaces.
func (s *CurrencyUpdate) GetDecimalPlaces() OptInt32 {
	return s.DecimalPlaces
}

// SetEnabled sets the value of Enabled.
func (s *CurrencyUpdate) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetDefault sets the value of Default.
func (s *CurrencyUpdate) SetDefault(val OptCurrencyUpdateDefault) {
	s.Default = val
}

// SetCode sets the value of Code.
func (s *CurrencyUpdate) SetCode(val OptString) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *CurrencyUpdate) SetName(val OptString) {
	s.Name = val
}

// SetSymbol sets the value of Symbol.
func (s *CurrencyUpdate) SetSymbol(val OptString) {
	s.Symbol = val
}

// SetDecimalPlaces sets the value of DecimalPlaces.
func (s *CurrencyUpdate) SetDecimalPlaces(val OptInt32) {
	s.DecimalPlaces = val
}

// If the currency must be the default for the user. You can only submit TRUE.
type CurrencyUpdateDefault bool

const (
	CurrencyUpdateDefaultTrue CurrencyUpdateDefault = true
)

// AllValues returns all CurrencyUpdateDefault values.
func (CurrencyUpdateDefault) AllValues() []CurrencyUpdateDefault {
	return []CurrencyUpdateDefault{
		CurrencyUpdateDefaultTrue,
	}
}

// Ref: #/components/schemas/DataDestroyObject
type DataDestroyObject string

const (
	DataDestroyObjectNotAssetsLiabilities DataDestroyObject = "not_assets_liabilities"
	DataDestroyObjectBudgets              DataDestroyObject = "budgets"
	DataDestroyObjectBills                DataDestroyObject = "bills"
	DataDestroyObjectPiggyBanks           DataDestroyObject = "piggy_banks"
	DataDestroyObjectRules                DataDestroyObject = "rules"
	DataDestroyObjectRecurring            DataDestroyObject = "recurring"
	DataDestroyObjectCategories           DataDestroyObject = "categories"
	DataDestroyObjectTags                 DataDestroyObject = "tags"
	DataDestroyObjectObjectGroups         DataDestroyObject = "object_groups"
	DataDestroyObjectAccounts             DataDestroyObject = "accounts"
	DataDestroyObjectAssetAccounts        DataDestroyObject = "asset_accounts"
	DataDestroyObjectExpenseAccounts      DataDestroyObject = "expense_accounts"
	DataDestroyObjectRevenueAccounts      DataDestroyObject = "revenue_accounts"
	DataDestroyObjectLiabilities          DataDestroyObject = "liabilities"
	DataDestroyObjectTransactions         DataDestroyObject = "transactions"
	DataDestroyObjectWithdrawals          DataDestroyObject = "withdrawals"
	DataDestroyObjectDeposits             DataDestroyObject = "deposits"
	DataDestroyObjectTransfers            DataDestroyObject = "transfers"
)

// AllValues returns all DataDestroyObject values.
func (DataDestroyObject) AllValues() []DataDestroyObject {
	return []DataDestroyObject{
		DataDestroyObjectNotAssetsLiabilities,
		DataDestroyObjectBudgets,
		DataDestroyObjectBills,
		DataDestroyObjectPiggyBanks,
		DataDestroyObjectRules,
		DataDestroyObjectRecurring,
		DataDestroyObjectCategories,
		DataDestroyObjectTags,
		DataDestroyObjectObjectGroups,
		DataDestroyObjectAccounts,
		DataDestroyObjectAssetAccounts,
		DataDestroyObjectExpenseAccounts,
		DataDestroyObjectRevenueAccounts,
		DataDestroyObjectLiabilities,
		DataDestroyObjectTransactions,
		DataDestroyObjectWithdrawals,
		DataDestroyObjectDeposits,
		DataDestroyObjectTransfers,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataDestroyObject) MarshalText() ([]byte, error) {
	switch s {
	case DataDestroyObjectNotAssetsLiabilities:
		return []byte(s), nil
	case DataDestroyObjectBudgets:
		return []byte(s), nil
	case DataDestroyObjectBills:
		return []byte(s), nil
	case DataDestroyObjectPiggyBanks:
		return []byte(s), nil
	case DataDestroyObjectRules:
		return []byte(s), nil
	case DataDestroyObjectRecurring:
		return []byte(s), nil
	case DataDestroyObjectCategories:
		return []byte(s), nil
	case DataDestroyObjectTags:
		return []byte(s), nil
	case DataDestroyObjectObjectGroups:
		return []byte(s), nil
	case DataDestroyObjectAccounts:
		return []byte(s), nil
	case DataDestroyObjectAssetAccounts:
		return []byte(s), nil
	case DataDestroyObjectExpenseAccounts:
		return []byte(s), nil
	case DataDestroyObjectRevenueAccounts:
		return []byte(s), nil
	case DataDestroyObjectLiabilities:
		return []byte(s), nil
	case DataDestroyObjectTransactions:
		return []byte(s), nil
	case DataDestroyObjectWithdrawals:
		return []byte(s), nil
	case DataDestroyObjectDeposits:
		return []byte(s), nil
	case DataDestroyObjectTransfers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataDestroyObject) UnmarshalText(data []byte) error {
	switch DataDestroyObject(data) {
	case DataDestroyObjectNotAssetsLiabilities:
		*s = DataDestroyObjectNotAssetsLiabilities
		return nil
	case DataDestroyObjectBudgets:
		*s = DataDestroyObjectBudgets
		return nil
	case DataDestroyObjectBills:
		*s = DataDestroyObjectBills
		return nil
	case DataDestroyObjectPiggyBanks:
		*s = DataDestroyObjectPiggyBanks
		return nil
	case DataDestroyObjectRules:
		*s = DataDestroyObjectRules
		return nil
	case DataDestroyObjectRecurring:
		*s = DataDestroyObjectRecurring
		return nil
	case DataDestroyObjectCategories:
		*s = DataDestroyObjectCategories
		return nil
	case DataDestroyObjectTags:
		*s = DataDestroyObjectTags
		return nil
	case DataDestroyObjectObjectGroups:
		*s = DataDestroyObjectObjectGroups
		return nil
	case DataDestroyObjectAccounts:
		*s = DataDestroyObjectAccounts
		return nil
	case DataDestroyObjectAssetAccounts:
		*s = DataDestroyObjectAssetAccounts
		return nil
	case DataDestroyObjectExpenseAccounts:
		*s = DataDestroyObjectExpenseAccounts
		return nil
	case DataDestroyObjectRevenueAccounts:
		*s = DataDestroyObjectRevenueAccounts
		return nil
	case DataDestroyObjectLiabilities:
		*s = DataDestroyObjectLiabilities
		return nil
	case DataDestroyObjectTransactions:
		*s = DataDestroyObjectTransactions
		return nil
	case DataDestroyObjectWithdrawals:
		*s = DataDestroyObjectWithdrawals
		return nil
	case DataDestroyObjectDeposits:
		*s = DataDestroyObjectDeposits
		return nil
	case DataDestroyObjectTransfers:
		*s = DataDestroyObjectTransfers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteAccountNoContent is response for DeleteAccount operation.
type DeleteAccountNoContent struct{}

func (*DeleteAccountNoContent) deleteAccountRes() {}

// DeleteAttachmentNoContent is response for DeleteAttachment operation.
type DeleteAttachmentNoContent struct{}

func (*DeleteAttachmentNoContent) deleteAttachmentRes() {}

// DeleteBillNoContent is response for DeleteBill operation.
type DeleteBillNoContent struct{}

func (*DeleteBillNoContent) deleteBillRes() {}

// DeleteBudgetLimitNoContent is response for DeleteBudgetLimit operation.
type DeleteBudgetLimitNoContent struct{}

func (*DeleteBudgetLimitNoContent) deleteBudgetLimitRes() {}

// DeleteBudgetNoContent is response for DeleteBudget operation.
type DeleteBudgetNoContent struct{}

func (*DeleteBudgetNoContent) deleteBudgetRes() {}

// DeleteCategoryNoContent is response for DeleteCategory operation.
type DeleteCategoryNoContent struct{}

func (*DeleteCategoryNoContent) deleteCategoryRes() {}

// DeleteCurrencyNoContent is response for DeleteCurrency operation.
type DeleteCurrencyNoContent struct{}

func (*DeleteCurrencyNoContent) deleteCurrencyRes() {}

// DeleteLinkTypeNoContent is response for DeleteLinkType operation.
type DeleteLinkTypeNoContent struct{}

func (*DeleteLinkTypeNoContent) deleteLinkTypeRes() {}

// DeleteObjectGroupNoContent is response for DeleteObjectGroup operation.
type DeleteObjectGroupNoContent struct{}

func (*DeleteObjectGroupNoContent) deleteObjectGroupRes() {}

// DeletePiggyBankNoContent is response for DeletePiggyBank operation.
type DeletePiggyBankNoContent struct{}

func (*DeletePiggyBankNoContent) deletePiggyBankRes() {}

// DeleteRecurrenceNoContent is response for DeleteRecurrence operation.
type DeleteRecurrenceNoContent struct{}

func (*DeleteRecurrenceNoContent) deleteRecurrenceRes() {}

// DeleteRuleGroupNoContent is response for DeleteRuleGroup operation.
type DeleteRuleGroupNoContent struct{}

func (*DeleteRuleGroupNoContent) deleteRuleGroupRes() {}

// DeleteRuleNoContent is response for DeleteRule operation.
type DeleteRuleNoContent struct{}

func (*DeleteRuleNoContent) deleteRuleRes() {}

// DeleteTagNoContent is response for DeleteTag operation.
type DeleteTagNoContent struct{}

func (*DeleteTagNoContent) deleteTagRes() {}

// DeleteTransactionJournalNoContent is response for DeleteTransactionJournal operation.
type DeleteTransactionJournalNoContent struct{}

func (*DeleteTransactionJournalNoContent) deleteTransactionJournalRes() {}

// DeleteTransactionLinkNoContent is response for DeleteTransactionLink operation.
type DeleteTransactionLinkNoContent struct{}

func (*DeleteTransactionLinkNoContent) deleteTransactionLinkRes() {}

// DeleteTransactionNoContent is response for DeleteTransaction operation.
type DeleteTransactionNoContent struct{}

func (*DeleteTransactionNoContent) deleteTransactionRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// DeleteWebhookMessageAttemptNoContent is response for DeleteWebhookMessageAttempt operation.
type DeleteWebhookMessageAttemptNoContent struct{}

func (*DeleteWebhookMessageAttemptNoContent) deleteWebhookMessageAttemptRes() {}

// DeleteWebhookMessageNoContent is response for DeleteWebhookMessage operation.
type DeleteWebhookMessageNoContent struct{}

func (*DeleteWebhookMessageNoContent) deleteWebhookMessageRes() {}

// DeleteWebhookNoContent is response for DeleteWebhook operation.
type DeleteWebhookNoContent struct{}

func (*DeleteWebhookNoContent) deleteWebhookRes() {}

// DestroyDataNoContent is response for DestroyData operation.
type DestroyDataNoContent struct{}

func (*DestroyDataNoContent) destroyDataRes() {}

// DisableCurrencyConflict is response for DisableCurrency operation.
type DisableCurrencyConflict struct{}

func (*DisableCurrencyConflict) disableCurrencyRes() {}

type DownloadAttachmentOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DownloadAttachmentOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*DownloadAttachmentOK) downloadAttachmentRes() {}

type ExportAccountsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportAccountsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportAccountsOK) exportAccountsRes() {}

type ExportBillsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBillsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBillsOK) exportBillsRes() {}

type ExportBudgetsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportBudgetsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportBudgetsOK) exportBudgetsRes() {}

type ExportCategoriesOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportCategoriesOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportCategoriesOK) exportCategoriesRes() {}

// Ref: #/components/schemas/ExportFileFilter
type ExportFileFilter string

const (
	ExportFileFilterCsv ExportFileFilter = "csv"
)

// AllValues returns all ExportFileFilter values.
func (ExportFileFilter) AllValues() []ExportFileFilter {
	return []ExportFileFilter{
		ExportFileFilterCsv,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExportFileFilter) MarshalText() ([]byte, error) {
	switch s {
	case ExportFileFilterCsv:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExportFileFilter) UnmarshalText(data []byte) error {
	switch ExportFileFilter(data) {
	case ExportFileFilterCsv:
		*s = ExportFileFilterCsv
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExportPiggiesOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportPiggiesOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportPiggiesOK) exportPiggiesRes() {}

type ExportRecurringOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportRecurringOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportRecurringOK) exportRecurringRes() {}

type ExportRulesOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportRulesOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportRulesOK) exportRulesRes() {}

type ExportTagsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportTagsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportTagsOK) exportTagsRes() {}

type ExportTransactionsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ExportTransactionsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ExportTransactionsOK) exportTransactionsRes() {}

// FireRuleGroupNoContent is response for FireRuleGroup operation.
type FireRuleGroupNoContent struct{}

func (*FireRuleGroupNoContent) fireRuleGroupRes() {}

// FireRuleNoContent is response for FireRule operation.
type FireRuleNoContent struct{}

func (*FireRuleNoContent) fireRuleRes() {}

type FireflyIiiAuth struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *FireflyIiiAuth) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *FireflyIiiAuth) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *FireflyIiiAuth) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *FireflyIiiAuth) SetScopes(val []string) {
	s.Scopes = val
}

type InsightGroup []InsightGroupEntry

func (*InsightGroup) insightExpenseAssetRes()     {}
func (*InsightGroup) insightExpenseBillRes()      {}
func (*InsightGroup) insightExpenseBudgetRes()    {}
func (*InsightGroup) insightExpenseCategoryRes()  {}
func (*InsightGroup) insightExpenseExpenseRes()   {}
func (*InsightGroup) insightExpenseTagRes()       {}
func (*InsightGroup) insightIncomeAssetRes()      {}
func (*InsightGroup) insightIncomeCategoryRes()   {}
func (*InsightGroup) insightIncomeRevenueRes()    {}
func (*InsightGroup) insightIncomeTagRes()        {}
func (*InsightGroup) insightTransferCategoryRes() {}
func (*InsightGroup) insightTransferTagRes()      {}

// Ref: #/components/schemas/InsightGroupEntry
type InsightGroupEntry struct {
	// This ID is a reference to the original object.
	ID OptString `json:"id"`
	// This is the name of the object.
	Name OptString `json:"name"`
	// The amount spent or earned between start date and end date, a number defined as a string, for this
	// object and all asset accounts.
	Difference OptString `json:"difference"`
	// The amount spent or earned between start date and end date, a number as a float, for this object
	// and all asset accounts. May have rounding errors.
	DifferenceFloat OptFloat64 `json:"difference_float"`
	// The currency ID of the expenses listed for this account.
	CurrencyID OptString `json:"currency_id"`
	// The currency code of the expenses listed for this account.
	CurrencyCode OptString `json:"currency_code"`
}

// GetID returns the value of ID.
func (s *InsightGroupEntry) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *InsightGroupEntry) GetName() OptString {
	return s.Name
}

// GetDifference returns the value of Difference.
func (s *InsightGroupEntry) GetDifference() OptString {
	return s.Difference
}

// GetDifferenceFloat returns the value of DifferenceFloat.
func (s *InsightGroupEntry) GetDifferenceFloat() OptFloat64 {
	return s.DifferenceFloat
}

// GetCurrencyID returns the value of CurrencyID.
func (s *InsightGroupEntry) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *InsightGroupEntry) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// SetID sets the value of ID.
func (s *InsightGroupEntry) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *InsightGroupEntry) SetName(val OptString) {
	s.Name = val
}

// SetDifference sets the value of Difference.
func (s *InsightGroupEntry) SetDifference(val OptString) {
	s.Difference = val
}

// SetDifferenceFloat sets the value of DifferenceFloat.
func (s *InsightGroupEntry) SetDifferenceFloat(val OptFloat64) {
	s.DifferenceFloat = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *InsightGroupEntry) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *InsightGroupEntry) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

type InsightTotal []InsightTotalEntry

func (*InsightTotal) insightExpenseNoBillRes()      {}
func (*InsightTotal) insightExpenseNoBudgetRes()    {}
func (*InsightTotal) insightExpenseNoCategoryRes()  {}
func (*InsightTotal) insightExpenseNoTagRes()       {}
func (*InsightTotal) insightExpenseTotalRes()       {}
func (*InsightTotal) insightIncomeNoCategoryRes()   {}
func (*InsightTotal) insightIncomeNoTagRes()        {}
func (*InsightTotal) insightIncomeTotalRes()        {}
func (*InsightTotal) insightTransferNoCategoryRes() {}
func (*InsightTotal) insightTransferNoTagRes()      {}
func (*InsightTotal) insightTransferTotalRes()      {}

// Ref: #/components/schemas/InsightTotalEntry
type InsightTotalEntry struct {
	// The amount spent between start date and end date, defined as a string, for this expense account
	// and all asset accounts.
	Difference OptString `json:"difference"`
	// The amount spent between start date and end date, defined as a string, for this expense account
	// and all asset accounts. This number is a float (double) and may have rounding errors.
	DifferenceFloat OptFloat64 `json:"difference_float"`
	// The currency ID of the expenses listed for this expense account.
	CurrencyID OptString `json:"currency_id"`
	// The currency code of the expenses listed for this expense account.
	CurrencyCode OptString `json:"currency_code"`
}

// GetDifference returns the value of Difference.
func (s *InsightTotalEntry) GetDifference() OptString {
	return s.Difference
}

// GetDifferenceFloat returns the value of DifferenceFloat.
func (s *InsightTotalEntry) GetDifferenceFloat() OptFloat64 {
	return s.DifferenceFloat
}

// GetCurrencyID returns the value of CurrencyID.
func (s *InsightTotalEntry) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *InsightTotalEntry) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// SetDifference sets the value of Difference.
func (s *InsightTotalEntry) SetDifference(val OptString) {
	s.Difference = val
}

// SetDifferenceFloat sets the value of DifferenceFloat.
func (s *InsightTotalEntry) SetDifferenceFloat(val OptFloat64) {
	s.DifferenceFloat = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *InsightTotalEntry) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *InsightTotalEntry) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

type InsightTransfer []InsightTransferEntry

func (*InsightTransfer) insightTransfersRes() {}

// Ref: #/components/schemas/InsightTransferEntry
type InsightTransferEntry struct {
	// This ID is a reference to the original object.
	ID OptString `json:"id"`
	// This is the name of the object.
	Name OptString `json:"name"`
	// The total amount transferred between start date and end date, a number defined as a string, for
	// this asset account.
	Difference OptString `json:"difference"`
	// The total amount transferred between start date and end date, a number as a float, for this asset
	// account. May have rounding errors.
	DifferenceFloat OptFloat64 `json:"difference_float"`
	// The total amount transferred TO this account between start date and end date, a number defined as
	// a string, for this asset account.
	In OptString `json:"in"`
	// The total amount transferred FROM this account between start date and end date, a number as a
	// float, for this asset account. May have rounding errors.
	InFloat OptFloat64 `json:"in_float"`
	// The total amount transferred FROM this account between start date and end date, a number defined
	// as a string, for this asset account.
	Out OptString `json:"out"`
	// The total amount transferred TO this account between start date and end date, a number as a float,
	// for this asset account. May have rounding errors.
	OutFloat OptFloat64 `json:"out_float"`
	// The currency ID of the expenses listed for this account.
	CurrencyID OptString `json:"currency_id"`
	// The currency code of the expenses listed for this account.
	CurrencyCode OptString `json:"currency_code"`
}

// GetID returns the value of ID.
func (s *InsightTransferEntry) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *InsightTransferEntry) GetName() OptString {
	return s.Name
}

// GetDifference returns the value of Difference.
func (s *InsightTransferEntry) GetDifference() OptString {
	return s.Difference
}

// GetDifferenceFloat returns the value of DifferenceFloat.
func (s *InsightTransferEntry) GetDifferenceFloat() OptFloat64 {
	return s.DifferenceFloat
}

// GetIn returns the value of In.
func (s *InsightTransferEntry) GetIn() OptString {
	return s.In
}

// GetInFloat returns the value of InFloat.
func (s *InsightTransferEntry) GetInFloat() OptFloat64 {
	return s.InFloat
}

// GetOut returns the value of Out.
func (s *InsightTransferEntry) GetOut() OptString {
	return s.Out
}

// GetOutFloat returns the value of OutFloat.
func (s *InsightTransferEntry) GetOutFloat() OptFloat64 {
	return s.OutFloat
}

// GetCurrencyID returns the value of CurrencyID.
func (s *InsightTransferEntry) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *InsightTransferEntry) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// SetID sets the value of ID.
func (s *InsightTransferEntry) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *InsightTransferEntry) SetName(val OptString) {
	s.Name = val
}

// SetDifference sets the value of Difference.
func (s *InsightTransferEntry) SetDifference(val OptString) {
	s.Difference = val
}

// SetDifferenceFloat sets the value of DifferenceFloat.
func (s *InsightTransferEntry) SetDifferenceFloat(val OptFloat64) {
	s.DifferenceFloat = val
}

// SetIn sets the value of In.
func (s *InsightTransferEntry) SetIn(val OptString) {
	s.In = val
}

// SetInFloat sets the value of InFloat.
func (s *InsightTransferEntry) SetInFloat(val OptFloat64) {
	s.InFloat = val
}

// SetOut sets the value of Out.
func (s *InsightTransferEntry) SetOut(val OptString) {
	s.Out = val
}

// SetOutFloat sets the value of OutFloat.
func (s *InsightTransferEntry) SetOutFloat(val OptFloat64) {
	s.OutFloat = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *InsightTransferEntry) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *InsightTransferEntry) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// Mandatory when type is liability. Period over which the interest is calculated.
// Ref: #/components/schemas/InterestPeriod
type InterestPeriod string

const (
	InterestPeriodWeekly    InterestPeriod = "weekly"
	InterestPeriodMonthly   InterestPeriod = "monthly"
	InterestPeriodQuarterly InterestPeriod = "quarterly"
	InterestPeriodHalfYear  InterestPeriod = "half-year"
	InterestPeriodYearly    InterestPeriod = "yearly"
)

// AllValues returns all InterestPeriod values.
func (InterestPeriod) AllValues() []InterestPeriod {
	return []InterestPeriod{
		InterestPeriodWeekly,
		InterestPeriodMonthly,
		InterestPeriodQuarterly,
		InterestPeriodHalfYear,
		InterestPeriodYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InterestPeriod) MarshalText() ([]byte, error) {
	switch s {
	case InterestPeriodWeekly:
		return []byte(s), nil
	case InterestPeriodMonthly:
		return []byte(s), nil
	case InterestPeriodQuarterly:
		return []byte(s), nil
	case InterestPeriodHalfYear:
		return []byte(s), nil
	case InterestPeriodYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InterestPeriod) UnmarshalText(data []byte) error {
	switch InterestPeriod(data) {
	case InterestPeriodWeekly:
		*s = InterestPeriodWeekly
		return nil
	case InterestPeriodMonthly:
		*s = InterestPeriodMonthly
		return nil
	case InterestPeriodQuarterly:
		*s = InterestPeriodQuarterly
		return nil
	case InterestPeriodHalfYear:
		*s = InterestPeriodHalfYear
		return nil
	case InterestPeriodYearly:
		*s = InterestPeriodYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/InternalException
type InternalException struct {
	Message   OptString `json:"message"`
	Exception OptString `json:"exception"`
}

// GetMessage returns the value of Message.
func (s *InternalException) GetMessage() OptString {
	return s.Message
}

// GetException returns the value of Exception.
func (s *InternalException) GetException() OptString {
	return s.Exception
}

// SetMessage sets the value of Message.
func (s *InternalException) SetMessage(val OptString) {
	s.Message = val
}

// SetException sets the value of Exception.
func (s *InternalException) SetException(val OptString) {
	s.Exception = val
}

func (*InternalException) bulkUpdateTransactionsRes()         {}
func (*InternalException) defaultCurrencyRes()                {}
func (*InternalException) deleteAccountRes()                  {}
func (*InternalException) deleteAttachmentRes()               {}
func (*InternalException) deleteBillRes()                     {}
func (*InternalException) deleteBudgetLimitRes()              {}
func (*InternalException) deleteBudgetRes()                   {}
func (*InternalException) deleteCategoryRes()                 {}
func (*InternalException) deleteCurrencyRes()                 {}
func (*InternalException) deleteLinkTypeRes()                 {}
func (*InternalException) deleteObjectGroupRes()              {}
func (*InternalException) deletePiggyBankRes()                {}
func (*InternalException) deleteRecurrenceRes()               {}
func (*InternalException) deleteRuleGroupRes()                {}
func (*InternalException) deleteRuleRes()                     {}
func (*InternalException) deleteTagRes()                      {}
func (*InternalException) deleteTransactionJournalRes()       {}
func (*InternalException) deleteTransactionLinkRes()          {}
func (*InternalException) deleteTransactionRes()              {}
func (*InternalException) deleteUserRes()                     {}
func (*InternalException) deleteWebhookMessageAttemptRes()    {}
func (*InternalException) deleteWebhookMessageRes()           {}
func (*InternalException) deleteWebhookRes()                  {}
func (*InternalException) destroyDataRes()                    {}
func (*InternalException) disableCurrencyRes()                {}
func (*InternalException) downloadAttachmentRes()             {}
func (*InternalException) enableCurrencyRes()                 {}
func (*InternalException) exportAccountsRes()                 {}
func (*InternalException) exportBillsRes()                    {}
func (*InternalException) exportBudgetsRes()                  {}
func (*InternalException) exportCategoriesRes()               {}
func (*InternalException) exportPiggiesRes()                  {}
func (*InternalException) exportRecurringRes()                {}
func (*InternalException) exportRulesRes()                    {}
func (*InternalException) exportTagsRes()                     {}
func (*InternalException) exportTransactionsRes()             {}
func (*InternalException) fireRuleGroupRes()                  {}
func (*InternalException) fireRuleRes()                       {}
func (*InternalException) getAboutRes()                       {}
func (*InternalException) getAccountRes()                     {}
func (*InternalException) getAccountsACRes()                  {}
func (*InternalException) getAttachmentRes()                  {}
func (*InternalException) getAvailableBudgetRes()             {}
func (*InternalException) getBasicSummaryRes()                {}
func (*InternalException) getBillRes()                        {}
func (*InternalException) getBillsACRes()                     {}
func (*InternalException) getBudgetLimitRes()                 {}
func (*InternalException) getBudgetRes()                      {}
func (*InternalException) getBudgetsACRes()                   {}
func (*InternalException) getCategoriesACRes()                {}
func (*InternalException) getCategoryRes()                    {}
func (*InternalException) getChartAccountOverviewRes()        {}
func (*InternalException) getConfigurationRes()               {}
func (*InternalException) getCronRes()                        {}
func (*InternalException) getCurrenciesACRes()                {}
func (*InternalException) getCurrenciesCodeACRes()            {}
func (*InternalException) getCurrencyRes()                    {}
func (*InternalException) getCurrentUserRes()                 {}
func (*InternalException) getDefaultCurrencyRes()             {}
func (*InternalException) getLinkTypeRes()                    {}
func (*InternalException) getObjectGroupRes()                 {}
func (*InternalException) getObjectGroupsACRes()              {}
func (*InternalException) getPiggiesACRes()                   {}
func (*InternalException) getPiggiesBalanceACRes()            {}
func (*InternalException) getPiggyBankRes()                   {}
func (*InternalException) getPreferenceRes()                  {}
func (*InternalException) getRecurrenceRes()                  {}
func (*InternalException) getRecurringACRes()                 {}
func (*InternalException) getRuleGroupRes()                   {}
func (*InternalException) getRuleGroupsACRes()                {}
func (*InternalException) getRuleRes()                        {}
func (*InternalException) getRulesACRes()                     {}
func (*InternalException) getSingleConfigurationRes()         {}
func (*InternalException) getSingleWebhookMessageAttemptRes() {}
func (*InternalException) getSingleWebhookMessageRes()        {}
func (*InternalException) getTagACRes()                       {}
func (*InternalException) getTagRes()                         {}
func (*InternalException) getTransactionByJournalRes()        {}
func (*InternalException) getTransactionLinkRes()             {}
func (*InternalException) getTransactionRes()                 {}
func (*InternalException) getTransactionTypesACRes()          {}
func (*InternalException) getTransactionsACRes()              {}
func (*InternalException) getTransactionsIDACRes()            {}
func (*InternalException) getUserRes()                        {}
func (*InternalException) getWebhookMessageAttemptsRes()      {}
func (*InternalException) getWebhookMessagesRes()             {}
func (*InternalException) getWebhookRes()                     {}
func (*InternalException) insightExpenseAssetRes()            {}
func (*InternalException) insightExpenseBillRes()             {}
func (*InternalException) insightExpenseBudgetRes()           {}
func (*InternalException) insightExpenseCategoryRes()         {}
func (*InternalException) insightExpenseExpenseRes()          {}
func (*InternalException) insightExpenseNoBillRes()           {}
func (*InternalException) insightExpenseNoBudgetRes()         {}
func (*InternalException) insightExpenseNoCategoryRes()       {}
func (*InternalException) insightExpenseNoTagRes()            {}
func (*InternalException) insightExpenseTagRes()              {}
func (*InternalException) insightExpenseTotalRes()            {}
func (*InternalException) insightIncomeAssetRes()             {}
func (*InternalException) insightIncomeCategoryRes()          {}
func (*InternalException) insightIncomeNoCategoryRes()        {}
func (*InternalException) insightIncomeNoTagRes()             {}
func (*InternalException) insightIncomeRevenueRes()           {}
func (*InternalException) insightIncomeTagRes()               {}
func (*InternalException) insightIncomeTotalRes()             {}
func (*InternalException) insightTransferCategoryRes()        {}
func (*InternalException) insightTransferNoCategoryRes()      {}
func (*InternalException) insightTransferNoTagRes()           {}
func (*InternalException) insightTransferTagRes()             {}
func (*InternalException) insightTransferTotalRes()           {}
func (*InternalException) insightTransfersRes()               {}
func (*InternalException) listAccountByCurrencyRes()          {}
func (*InternalException) listAccountRes()                    {}
func (*InternalException) listAttachmentByAccountRes()        {}
func (*InternalException) listAttachmentByBillRes()           {}
func (*InternalException) listAttachmentByBudgetRes()         {}
func (*InternalException) listAttachmentByCategoryRes()       {}
func (*InternalException) listAttachmentByPiggyBankRes()      {}
func (*InternalException) listAttachmentByTagRes()            {}
func (*InternalException) listAttachmentByTransactionRes()    {}
func (*InternalException) listAttachmentRes()                 {}
func (*InternalException) listAvailableBudgetByCurrencyRes()  {}
func (*InternalException) listAvailableBudgetRes()            {}
func (*InternalException) listBillByCurrencyRes()             {}
func (*InternalException) listBillByObjectGroupRes()          {}
func (*InternalException) listBillRes()                       {}
func (*InternalException) listBudgetLimitByBudgetRes()        {}
func (*InternalException) listBudgetLimitByCurrencyRes()      {}
func (*InternalException) listBudgetLimitRes()                {}
func (*InternalException) listBudgetRes()                     {}
func (*InternalException) listCategoryRes()                   {}
func (*InternalException) listCurrencyRes()                   {}
func (*InternalException) listEventByPiggyBankRes()           {}
func (*InternalException) listEventByTransactionRes()         {}
func (*InternalException) listLinkTypeRes()                   {}
func (*InternalException) listLinksByJournalRes()             {}
func (*InternalException) listObjectGroupsRes()               {}
func (*InternalException) listPiggyBankByAccountRes()         {}
func (*InternalException) listPiggyBankByObjectGroupRes()     {}
func (*InternalException) listPiggyBankRes()                  {}
func (*InternalException) listPreferenceRes()                 {}
func (*InternalException) listRecurrenceByCurrencyRes()       {}
func (*InternalException) listRecurrenceRes()                 {}
func (*InternalException) listRuleByBillRes()                 {}
func (*InternalException) listRuleByCurrencyRes()             {}
func (*InternalException) listRuleByGroupRes()                {}
func (*InternalException) listRuleGroupRes()                  {}
func (*InternalException) listRuleRes()                       {}
func (*InternalException) listTagRes()                        {}
func (*InternalException) listTransactionByAccountRes()       {}
func (*InternalException) listTransactionByBillRes()          {}
func (*InternalException) listTransactionByBudgetLimitRes()   {}
func (*InternalException) listTransactionByBudgetRes()        {}
func (*InternalException) listTransactionByCategoryRes()      {}
func (*InternalException) listTransactionByCurrencyRes()      {}
func (*InternalException) listTransactionByLinkTypeRes()      {}
func (*InternalException) listTransactionByRecurrenceRes()    {}
func (*InternalException) listTransactionByTagRes()           {}
func (*InternalException) listTransactionLinkRes()            {}
func (*InternalException) listTransactionRes()                {}
func (*InternalException) listUserRes()                       {}
func (*InternalException) listWebhookRes()                    {}
func (*InternalException) purgeDataRes()                      {}
func (*InternalException) searchAccountsRes()                 {}
func (*InternalException) searchTransactionsRes()             {}
func (*InternalException) setConfigurationRes()               {}
func (*InternalException) storeAccountRes()                   {}
func (*InternalException) storeAttachmentRes()                {}
func (*InternalException) storeBillRes()                      {}
func (*InternalException) storeBudgetLimitRes()               {}
func (*InternalException) storeBudgetRes()                    {}
func (*InternalException) storeCategoryRes()                  {}
func (*InternalException) storeCurrencyRes()                  {}
func (*InternalException) storeLinkTypeRes()                  {}
func (*InternalException) storePiggyBankRes()                 {}
func (*InternalException) storePreferenceRes()                {}
func (*InternalException) storeRecurrenceRes()                {}
func (*InternalException) storeRuleGroupRes()                 {}
func (*InternalException) storeRuleRes()                      {}
func (*InternalException) storeTagRes()                       {}
func (*InternalException) storeTransactionLinkRes()           {}
func (*InternalException) storeTransactionRes()               {}
func (*InternalException) storeUserRes()                      {}
func (*InternalException) storeWebhookRes()                   {}
func (*InternalException) testRuleGroupRes()                  {}
func (*InternalException) testRuleRes()                       {}
func (*InternalException) updateAccountRes()                  {}
func (*InternalException) updateAttachmentRes()               {}
func (*InternalException) updateBillRes()                     {}
func (*InternalException) updateBudgetLimitRes()              {}
func (*InternalException) updateBudgetRes()                   {}
func (*InternalException) updateCategoryRes()                 {}
func (*InternalException) updateCurrencyRes()                 {}
func (*InternalException) updateLinkTypeRes()                 {}
func (*InternalException) updateObjectGroupRes()              {}
func (*InternalException) updatePiggyBankRes()                {}
func (*InternalException) updatePreferenceRes()               {}
func (*InternalException) updateRecurrenceRes()               {}
func (*InternalException) updateRuleGroupRes()                {}
func (*InternalException) updateRuleRes()                     {}
func (*InternalException) updateTagRes()                      {}
func (*InternalException) updateTransactionLinkRes()          {}
func (*InternalException) updateTransactionRes()              {}
func (*InternalException) updateUserRes()                     {}
func (*InternalException) updateWebhookRes()                  {}
func (*InternalException) uploadAttachmentRes()               {}

// 'credit' indicates somebody owes you the liability. 'debit' Indicates you owe this debt yourself.
// Works only for liabiltiies.
// Ref: #/components/schemas/LiabilityDirection
type LiabilityDirection string

const (
	LiabilityDirectionCredit LiabilityDirection = "credit"
	LiabilityDirectionDebit  LiabilityDirection = "debit"
)

// AllValues returns all LiabilityDirection values.
func (LiabilityDirection) AllValues() []LiabilityDirection {
	return []LiabilityDirection{
		LiabilityDirectionCredit,
		LiabilityDirectionDebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LiabilityDirection) MarshalText() ([]byte, error) {
	switch s {
	case LiabilityDirectionCredit:
		return []byte(s), nil
	case LiabilityDirectionDebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LiabilityDirection) UnmarshalText(data []byte) error {
	switch LiabilityDirection(data) {
	case LiabilityDirectionCredit:
		*s = LiabilityDirectionCredit
		return nil
	case LiabilityDirectionDebit:
		*s = LiabilityDirectionDebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Mandatory when type is liability. Specifies the exact type.
// Ref: #/components/schemas/LiabilityType
type LiabilityType string

const (
	LiabilityTypeLoan     LiabilityType = "loan"
	LiabilityTypeDebt     LiabilityType = "debt"
	LiabilityTypeMortgage LiabilityType = "mortgage"
)

// AllValues returns all LiabilityType values.
func (LiabilityType) AllValues() []LiabilityType {
	return []LiabilityType{
		LiabilityTypeLoan,
		LiabilityTypeDebt,
		LiabilityTypeMortgage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LiabilityType) MarshalText() ([]byte, error) {
	switch s {
	case LiabilityTypeLoan:
		return []byte(s), nil
	case LiabilityTypeDebt:
		return []byte(s), nil
	case LiabilityTypeMortgage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LiabilityType) UnmarshalText(data []byte) error {
	switch LiabilityType(data) {
	case LiabilityTypeLoan:
		*s = LiabilityTypeLoan
		return nil
	case LiabilityTypeDebt:
		*s = LiabilityTypeDebt
		return nil
	case LiabilityTypeMortgage:
		*s = LiabilityTypeMortgage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/LinkType
type LinkType struct {
	Name     string  `json:"name"`
	Inward   string  `json:"inward"`
	Outward  string  `json:"outward"`
	Editable OptBool `json:"editable"`
}

// GetName returns the value of Name.
func (s *LinkType) GetName() string {
	return s.Name
}

// GetInward returns the value of Inward.
func (s *LinkType) GetInward() string {
	return s.Inward
}

// GetOutward returns the value of Outward.
func (s *LinkType) GetOutward() string {
	return s.Outward
}

// GetEditable returns the value of Editable.
func (s *LinkType) GetEditable() OptBool {
	return s.Editable
}

// SetName sets the value of Name.
func (s *LinkType) SetName(val string) {
	s.Name = val
}

// SetInward sets the value of Inward.
func (s *LinkType) SetInward(val string) {
	s.Inward = val
}

// SetOutward sets the value of Outward.
func (s *LinkType) SetOutward(val string) {
	s.Outward = val
}

// SetEditable sets the value of Editable.
func (s *LinkType) SetEditable(val OptBool) {
	s.Editable = val
}

// Ref: #/components/schemas/LinkTypeArray
type LinkTypeArray struct {
	Data  []LinkTypeRead `json:"data"`
	Meta  Meta           `json:"meta"`
	Links PageLink       `json:"links"`
}

// GetData returns the value of Data.
func (s *LinkTypeArray) GetData() []LinkTypeRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *LinkTypeArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *LinkTypeArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *LinkTypeArray) SetData(val []LinkTypeRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *LinkTypeArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *LinkTypeArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*LinkTypeArray) listLinkTypeRes() {}

// Ref: #/components/schemas/LinkTypeRead
type LinkTypeRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes LinkType   `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *LinkTypeRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *LinkTypeRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *LinkTypeRead) GetAttributes() LinkType {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *LinkTypeRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *LinkTypeRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *LinkTypeRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *LinkTypeRead) SetAttributes(val LinkType) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *LinkTypeRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/LinkTypeSingle
type LinkTypeSingle struct {
	Data LinkTypeRead `json:"data"`
}

// GetData returns the value of Data.
func (s *LinkTypeSingle) GetData() LinkTypeRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *LinkTypeSingle) SetData(val LinkTypeRead) {
	s.Data = val
}

func (*LinkTypeSingle) getLinkTypeRes()    {}
func (*LinkTypeSingle) storeLinkTypeRes()  {}
func (*LinkTypeSingle) updateLinkTypeRes() {}

// Ref: #/components/schemas/LinkTypeUpdate
type LinkTypeUpdate struct {
	Name    OptString `json:"name"`
	Inward  OptString `json:"inward"`
	Outward OptString `json:"outward"`
}

// GetName returns the value of Name.
func (s *LinkTypeUpdate) GetName() OptString {
	return s.Name
}

// GetInward returns the value of Inward.
func (s *LinkTypeUpdate) GetInward() OptString {
	return s.Inward
}

// GetOutward returns the value of Outward.
func (s *LinkTypeUpdate) GetOutward() OptString {
	return s.Outward
}

// SetName sets the value of Name.
func (s *LinkTypeUpdate) SetName(val OptString) {
	s.Name = val
}

// SetInward sets the value of Inward.
func (s *LinkTypeUpdate) SetInward(val OptString) {
	s.Inward = val
}

// SetOutward sets the value of Outward.
func (s *LinkTypeUpdate) SetOutward(val OptString) {
	s.Outward = val
}

// Ref: #/components/schemas/Meta
type Meta struct {
	Pagination OptMetaPagination `json:"pagination"`
}

// GetPagination returns the value of Pagination.
func (s *Meta) GetPagination() OptMetaPagination {
	return s.Pagination
}

// SetPagination sets the value of Pagination.
func (s *Meta) SetPagination(val OptMetaPagination) {
	s.Pagination = val
}

type MetaPagination struct {
	Total       OptInt `json:"total"`
	Count       OptInt `json:"count"`
	PerPage     OptInt `json:"per_page"`
	CurrentPage OptInt `json:"current_page"`
	TotalPages  OptInt `json:"total_pages"`
}

// GetTotal returns the value of Total.
func (s *MetaPagination) GetTotal() OptInt {
	return s.Total
}

// GetCount returns the value of Count.
func (s *MetaPagination) GetCount() OptInt {
	return s.Count
}

// GetPerPage returns the value of PerPage.
func (s *MetaPagination) GetPerPage() OptInt {
	return s.PerPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *MetaPagination) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetTotalPages returns the value of TotalPages.
func (s *MetaPagination) GetTotalPages() OptInt {
	return s.TotalPages
}

// SetTotal sets the value of Total.
func (s *MetaPagination) SetTotal(val OptInt) {
	s.Total = val
}

// SetCount sets the value of Count.
func (s *MetaPagination) SetCount(val OptInt) {
	s.Count = val
}

// SetPerPage sets the value of PerPage.
func (s *MetaPagination) SetPerPage(val OptInt) {
	s.PerPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *MetaPagination) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetTotalPages sets the value of TotalPages.
func (s *MetaPagination) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// NewNilDate returns new NilDate with value set to v.
func NewNilDate(v time.Time) NilDate {
	return NilDate{
		Value: v,
	}
}

// NilDate is nullable time.Time.
type NilDate struct {
	Value time.Time
	Null  bool
}

// SetTo sets value to v.
func (o *NilDate) SetTo(v time.Time) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilDate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilDate) SetToNull() {
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilDate) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/NotFound
type NotFound struct {
	Message   OptString `json:"message"`
	Exception OptString `json:"exception"`
}

// GetMessage returns the value of Message.
func (s *NotFound) GetMessage() OptString {
	return s.Message
}

// GetException returns the value of Exception.
func (s *NotFound) GetException() OptString {
	return s.Exception
}

// SetMessage sets the value of Message.
func (s *NotFound) SetMessage(val OptString) {
	s.Message = val
}

// SetException sets the value of Exception.
func (s *NotFound) SetException(val OptString) {
	s.Exception = val
}

func (*NotFound) bulkUpdateTransactionsRes()         {}
func (*NotFound) defaultCurrencyRes()                {}
func (*NotFound) deleteAccountRes()                  {}
func (*NotFound) deleteAttachmentRes()               {}
func (*NotFound) deleteBillRes()                     {}
func (*NotFound) deleteBudgetLimitRes()              {}
func (*NotFound) deleteBudgetRes()                   {}
func (*NotFound) deleteCategoryRes()                 {}
func (*NotFound) deleteCurrencyRes()                 {}
func (*NotFound) deleteLinkTypeRes()                 {}
func (*NotFound) deleteObjectGroupRes()              {}
func (*NotFound) deletePiggyBankRes()                {}
func (*NotFound) deleteRecurrenceRes()               {}
func (*NotFound) deleteRuleGroupRes()                {}
func (*NotFound) deleteRuleRes()                     {}
func (*NotFound) deleteTagRes()                      {}
func (*NotFound) deleteTransactionJournalRes()       {}
func (*NotFound) deleteTransactionLinkRes()          {}
func (*NotFound) deleteTransactionRes()              {}
func (*NotFound) deleteUserRes()                     {}
func (*NotFound) deleteWebhookMessageAttemptRes()    {}
func (*NotFound) deleteWebhookMessageRes()           {}
func (*NotFound) deleteWebhookRes()                  {}
func (*NotFound) destroyDataRes()                    {}
func (*NotFound) disableCurrencyRes()                {}
func (*NotFound) downloadAttachmentRes()             {}
func (*NotFound) enableCurrencyRes()                 {}
func (*NotFound) exportAccountsRes()                 {}
func (*NotFound) exportBillsRes()                    {}
func (*NotFound) exportBudgetsRes()                  {}
func (*NotFound) exportCategoriesRes()               {}
func (*NotFound) exportPiggiesRes()                  {}
func (*NotFound) exportRecurringRes()                {}
func (*NotFound) exportRulesRes()                    {}
func (*NotFound) exportTagsRes()                     {}
func (*NotFound) exportTransactionsRes()             {}
func (*NotFound) fireRuleGroupRes()                  {}
func (*NotFound) fireRuleRes()                       {}
func (*NotFound) getAboutRes()                       {}
func (*NotFound) getAccountRes()                     {}
func (*NotFound) getAccountsACRes()                  {}
func (*NotFound) getAttachmentRes()                  {}
func (*NotFound) getAvailableBudgetRes()             {}
func (*NotFound) getBasicSummaryRes()                {}
func (*NotFound) getBillRes()                        {}
func (*NotFound) getBillsACRes()                     {}
func (*NotFound) getBudgetLimitRes()                 {}
func (*NotFound) getBudgetRes()                      {}
func (*NotFound) getBudgetsACRes()                   {}
func (*NotFound) getCategoriesACRes()                {}
func (*NotFound) getCategoryRes()                    {}
func (*NotFound) getChartAccountOverviewRes()        {}
func (*NotFound) getConfigurationRes()               {}
func (*NotFound) getCronRes()                        {}
func (*NotFound) getCurrenciesACRes()                {}
func (*NotFound) getCurrenciesCodeACRes()            {}
func (*NotFound) getCurrencyRes()                    {}
func (*NotFound) getCurrentUserRes()                 {}
func (*NotFound) getDefaultCurrencyRes()             {}
func (*NotFound) getLinkTypeRes()                    {}
func (*NotFound) getObjectGroupRes()                 {}
func (*NotFound) getObjectGroupsACRes()              {}
func (*NotFound) getPiggiesACRes()                   {}
func (*NotFound) getPiggiesBalanceACRes()            {}
func (*NotFound) getPiggyBankRes()                   {}
func (*NotFound) getPreferenceRes()                  {}
func (*NotFound) getRecurrenceRes()                  {}
func (*NotFound) getRecurringACRes()                 {}
func (*NotFound) getRuleGroupRes()                   {}
func (*NotFound) getRuleGroupsACRes()                {}
func (*NotFound) getRuleRes()                        {}
func (*NotFound) getRulesACRes()                     {}
func (*NotFound) getSingleConfigurationRes()         {}
func (*NotFound) getSingleWebhookMessageAttemptRes() {}
func (*NotFound) getSingleWebhookMessageRes()        {}
func (*NotFound) getTagACRes()                       {}
func (*NotFound) getTagRes()                         {}
func (*NotFound) getTransactionByJournalRes()        {}
func (*NotFound) getTransactionLinkRes()             {}
func (*NotFound) getTransactionRes()                 {}
func (*NotFound) getTransactionTypesACRes()          {}
func (*NotFound) getTransactionsACRes()              {}
func (*NotFound) getTransactionsIDACRes()            {}
func (*NotFound) getUserRes()                        {}
func (*NotFound) getWebhookMessageAttemptsRes()      {}
func (*NotFound) getWebhookMessagesRes()             {}
func (*NotFound) getWebhookRes()                     {}
func (*NotFound) insightExpenseAssetRes()            {}
func (*NotFound) insightExpenseBillRes()             {}
func (*NotFound) insightExpenseBudgetRes()           {}
func (*NotFound) insightExpenseCategoryRes()         {}
func (*NotFound) insightExpenseExpenseRes()          {}
func (*NotFound) insightExpenseNoBillRes()           {}
func (*NotFound) insightExpenseNoBudgetRes()         {}
func (*NotFound) insightExpenseNoCategoryRes()       {}
func (*NotFound) insightExpenseNoTagRes()            {}
func (*NotFound) insightExpenseTagRes()              {}
func (*NotFound) insightExpenseTotalRes()            {}
func (*NotFound) insightIncomeAssetRes()             {}
func (*NotFound) insightIncomeCategoryRes()          {}
func (*NotFound) insightIncomeNoCategoryRes()        {}
func (*NotFound) insightIncomeNoTagRes()             {}
func (*NotFound) insightIncomeRevenueRes()           {}
func (*NotFound) insightIncomeTagRes()               {}
func (*NotFound) insightIncomeTotalRes()             {}
func (*NotFound) insightTransferCategoryRes()        {}
func (*NotFound) insightTransferNoCategoryRes()      {}
func (*NotFound) insightTransferNoTagRes()           {}
func (*NotFound) insightTransferTagRes()             {}
func (*NotFound) insightTransferTotalRes()           {}
func (*NotFound) insightTransfersRes()               {}
func (*NotFound) listAccountByCurrencyRes()          {}
func (*NotFound) listAccountRes()                    {}
func (*NotFound) listAttachmentByAccountRes()        {}
func (*NotFound) listAttachmentByBillRes()           {}
func (*NotFound) listAttachmentByBudgetRes()         {}
func (*NotFound) listAttachmentByCategoryRes()       {}
func (*NotFound) listAttachmentByPiggyBankRes()      {}
func (*NotFound) listAttachmentByTagRes()            {}
func (*NotFound) listAttachmentByTransactionRes()    {}
func (*NotFound) listAttachmentRes()                 {}
func (*NotFound) listAvailableBudgetByCurrencyRes()  {}
func (*NotFound) listAvailableBudgetRes()            {}
func (*NotFound) listBillByCurrencyRes()             {}
func (*NotFound) listBillByObjectGroupRes()          {}
func (*NotFound) listBillRes()                       {}
func (*NotFound) listBudgetLimitByBudgetRes()        {}
func (*NotFound) listBudgetLimitByCurrencyRes()      {}
func (*NotFound) listBudgetLimitRes()                {}
func (*NotFound) listBudgetRes()                     {}
func (*NotFound) listCategoryRes()                   {}
func (*NotFound) listCurrencyRes()                   {}
func (*NotFound) listEventByPiggyBankRes()           {}
func (*NotFound) listEventByTransactionRes()         {}
func (*NotFound) listLinkTypeRes()                   {}
func (*NotFound) listLinksByJournalRes()             {}
func (*NotFound) listObjectGroupsRes()               {}
func (*NotFound) listPiggyBankByAccountRes()         {}
func (*NotFound) listPiggyBankByObjectGroupRes()     {}
func (*NotFound) listPiggyBankRes()                  {}
func (*NotFound) listPreferenceRes()                 {}
func (*NotFound) listRecurrenceByCurrencyRes()       {}
func (*NotFound) listRecurrenceRes()                 {}
func (*NotFound) listRuleByBillRes()                 {}
func (*NotFound) listRuleByCurrencyRes()             {}
func (*NotFound) listRuleByGroupRes()                {}
func (*NotFound) listRuleGroupRes()                  {}
func (*NotFound) listRuleRes()                       {}
func (*NotFound) listTagRes()                        {}
func (*NotFound) listTransactionByAccountRes()       {}
func (*NotFound) listTransactionByBillRes()          {}
func (*NotFound) listTransactionByBudgetLimitRes()   {}
func (*NotFound) listTransactionByBudgetRes()        {}
func (*NotFound) listTransactionByCategoryRes()      {}
func (*NotFound) listTransactionByCurrencyRes()      {}
func (*NotFound) listTransactionByLinkTypeRes()      {}
func (*NotFound) listTransactionByRecurrenceRes()    {}
func (*NotFound) listTransactionByTagRes()           {}
func (*NotFound) listTransactionLinkRes()            {}
func (*NotFound) listTransactionRes()                {}
func (*NotFound) listUserRes()                       {}
func (*NotFound) listWebhookRes()                    {}
func (*NotFound) searchAccountsRes()                 {}
func (*NotFound) searchTransactionsRes()             {}
func (*NotFound) setConfigurationRes()               {}
func (*NotFound) storeAccountRes()                   {}
func (*NotFound) storeAttachmentRes()                {}
func (*NotFound) storeBillRes()                      {}
func (*NotFound) storeBudgetLimitRes()               {}
func (*NotFound) storeBudgetRes()                    {}
func (*NotFound) storeCategoryRes()                  {}
func (*NotFound) storeCurrencyRes()                  {}
func (*NotFound) storeLinkTypeRes()                  {}
func (*NotFound) storePiggyBankRes()                 {}
func (*NotFound) storePreferenceRes()                {}
func (*NotFound) storeRecurrenceRes()                {}
func (*NotFound) storeRuleGroupRes()                 {}
func (*NotFound) storeRuleRes()                      {}
func (*NotFound) storeTagRes()                       {}
func (*NotFound) storeTransactionLinkRes()           {}
func (*NotFound) storeTransactionRes()               {}
func (*NotFound) storeUserRes()                      {}
func (*NotFound) storeWebhookRes()                   {}
func (*NotFound) testRuleGroupRes()                  {}
func (*NotFound) testRuleRes()                       {}
func (*NotFound) updateAccountRes()                  {}
func (*NotFound) updateAttachmentRes()               {}
func (*NotFound) updateBillRes()                     {}
func (*NotFound) updateBudgetLimitRes()              {}
func (*NotFound) updateBudgetRes()                   {}
func (*NotFound) updateCategoryRes()                 {}
func (*NotFound) updateCurrencyRes()                 {}
func (*NotFound) updateLinkTypeRes()                 {}
func (*NotFound) updateObjectGroupRes()              {}
func (*NotFound) updatePiggyBankRes()                {}
func (*NotFound) updatePreferenceRes()               {}
func (*NotFound) updateRecurrenceRes()               {}
func (*NotFound) updateRuleGroupRes()                {}
func (*NotFound) updateRuleRes()                     {}
func (*NotFound) updateTagRes()                      {}
func (*NotFound) updateTransactionLinkRes()          {}
func (*NotFound) updateTransactionRes()              {}
func (*NotFound) updateUserRes()                     {}
func (*NotFound) updateWebhookRes()                  {}
func (*NotFound) uploadAttachmentRes()               {}

// Ref: #/components/schemas/ObjectGroup
type ObjectGroup struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	Title     string      `json:"title"`
	// Order of the object group.
	Order int32 `json:"order"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ObjectGroup) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ObjectGroup) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetTitle returns the value of Title.
func (s *ObjectGroup) GetTitle() string {
	return s.Title
}

// GetOrder returns the value of Order.
func (s *ObjectGroup) GetOrder() int32 {
	return s.Order
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ObjectGroup) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ObjectGroup) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetTitle sets the value of Title.
func (s *ObjectGroup) SetTitle(val string) {
	s.Title = val
}

// SetOrder sets the value of Order.
func (s *ObjectGroup) SetOrder(val int32) {
	s.Order = val
}

// Ref: #/components/schemas/ObjectGroupArray
type ObjectGroupArray struct {
	Data []ObjectGroupRead `json:"data"`
	Meta Meta              `json:"meta"`
}

// GetData returns the value of Data.
func (s *ObjectGroupArray) GetData() []ObjectGroupRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ObjectGroupArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ObjectGroupArray) SetData(val []ObjectGroupRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ObjectGroupArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*ObjectGroupArray) listObjectGroupsRes() {}

// Ref: #/components/schemas/ObjectGroupRead
type ObjectGroupRead struct {
	// Immutable value.
	Type       string      `json:"type"`
	ID         string      `json:"id"`
	Attributes ObjectGroup `json:"attributes"`
}

// GetType returns the value of Type.
func (s *ObjectGroupRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *ObjectGroupRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *ObjectGroupRead) GetAttributes() ObjectGroup {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *ObjectGroupRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *ObjectGroupRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *ObjectGroupRead) SetAttributes(val ObjectGroup) {
	s.Attributes = val
}

// Ref: #/components/schemas/ObjectGroupSingle
type ObjectGroupSingle struct {
	Data ObjectGroupRead `json:"data"`
}

// GetData returns the value of Data.
func (s *ObjectGroupSingle) GetData() ObjectGroupRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *ObjectGroupSingle) SetData(val ObjectGroupRead) {
	s.Data = val
}

func (*ObjectGroupSingle) getObjectGroupRes()    {}
func (*ObjectGroupSingle) updateObjectGroupRes() {}

// Ref: #/components/schemas/ObjectGroupUpdate
type ObjectGroupUpdate struct {
	Title string `json:"title"`
	// Order of the object group.
	Order OptInt32 `json:"order"`
}

// GetTitle returns the value of Title.
func (s *ObjectGroupUpdate) GetTitle() string {
	return s.Title
}

// GetOrder returns the value of Order.
func (s *ObjectGroupUpdate) GetOrder() OptInt32 {
	return s.Order
}

// SetTitle sets the value of Title.
func (s *ObjectGroupUpdate) SetTitle(val string) {
	s.Title = val
}

// SetOrder sets the value of Order.
func (s *ObjectGroupUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// Ref: #/components/schemas/ObjectLink
type ObjectLink struct {
	R0   OptObjectLink0 `json:"0"`
	Self OptURI         `json:"self"`
}

// GetR0 returns the value of R0.
func (s *ObjectLink) GetR0() OptObjectLink0 {
	return s.R0
}

// GetSelf returns the value of Self.
func (s *ObjectLink) GetSelf() OptURI {
	return s.Self
}

// SetR0 sets the value of R0.
func (s *ObjectLink) SetR0(val OptObjectLink0) {
	s.R0 = val
}

// SetSelf sets the value of Self.
func (s *ObjectLink) SetSelf(val OptURI) {
	s.Self = val
}

type ObjectLink0 struct {
	Rel OptString `json:"rel"`
	URI OptString `json:"uri"`
}

// GetRel returns the value of Rel.
func (s *ObjectLink0) GetRel() OptString {
	return s.Rel
}

// GetURI returns the value of URI.
func (s *ObjectLink0) GetURI() OptString {
	return s.URI
}

// SetRel sets the value of Rel.
func (s *ObjectLink0) SetRel(val OptString) {
	s.Rel = val
}

// SetURI sets the value of URI.
func (s *ObjectLink0) SetURI(val OptString) {
	s.URI = val
}

// NewOptAccountTypeFilter returns new OptAccountTypeFilter with value set to v.
func NewOptAccountTypeFilter(v AccountTypeFilter) OptAccountTypeFilter {
	return OptAccountTypeFilter{
		Value: v,
		Set:   true,
	}
}

// OptAccountTypeFilter is optional AccountTypeFilter.
type OptAccountTypeFilter struct {
	Value AccountTypeFilter
	Set   bool
}

// IsSet returns true if OptAccountTypeFilter was set.
func (o OptAccountTypeFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountTypeFilter) Reset() {
	var v AccountTypeFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountTypeFilter) SetTo(v AccountTypeFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountTypeFilter) Get() (v AccountTypeFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountTypeFilter) Or(d AccountTypeFilter) AccountTypeFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountTypeProperty returns new OptAccountTypeProperty with value set to v.
func NewOptAccountTypeProperty(v AccountTypeProperty) OptAccountTypeProperty {
	return OptAccountTypeProperty{
		Value: v,
		Set:   true,
	}
}

// OptAccountTypeProperty is optional AccountTypeProperty.
type OptAccountTypeProperty struct {
	Value AccountTypeProperty
	Set   bool
}

// IsSet returns true if OptAccountTypeProperty was set.
func (o OptAccountTypeProperty) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountTypeProperty) Reset() {
	var v AccountTypeProperty
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountTypeProperty) SetTo(v AccountTypeProperty) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountTypeProperty) Get() (v AccountTypeProperty, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountTypeProperty) Or(d AccountTypeProperty) AccountTypeProperty {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillRepeatFrequency returns new OptBillRepeatFrequency with value set to v.
func NewOptBillRepeatFrequency(v BillRepeatFrequency) OptBillRepeatFrequency {
	return OptBillRepeatFrequency{
		Value: v,
		Set:   true,
	}
}

// OptBillRepeatFrequency is optional BillRepeatFrequency.
type OptBillRepeatFrequency struct {
	Value BillRepeatFrequency
	Set   bool
}

// IsSet returns true if OptBillRepeatFrequency was set.
func (o OptBillRepeatFrequency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillRepeatFrequency) Reset() {
	var v BillRepeatFrequency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillRepeatFrequency) SetTo(v BillRepeatFrequency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillRepeatFrequency) Get() (v BillRepeatFrequency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillRepeatFrequency) Or(d BillRepeatFrequency) BillRepeatFrequency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChartDataSetEntries returns new OptChartDataSetEntries with value set to v.
func NewOptChartDataSetEntries(v ChartDataSetEntries) OptChartDataSetEntries {
	return OptChartDataSetEntries{
		Value: v,
		Set:   true,
	}
}

// OptChartDataSetEntries is optional ChartDataSetEntries.
type OptChartDataSetEntries struct {
	Value ChartDataSetEntries
	Set   bool
}

// IsSet returns true if OptChartDataSetEntries was set.
func (o OptChartDataSetEntries) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChartDataSetEntries) Reset() {
	var v ChartDataSetEntries
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChartDataSetEntries) SetTo(v ChartDataSetEntries) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChartDataSetEntries) Get() (v ChartDataSetEntries, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChartDataSetEntries) Or(d ChartDataSetEntries) ChartDataSetEntries {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCronResultRow returns new OptCronResultRow with value set to v.
func NewOptCronResultRow(v CronResultRow) OptCronResultRow {
	return OptCronResultRow{
		Value: v,
		Set:   true,
	}
}

// OptCronResultRow is optional CronResultRow.
type OptCronResultRow struct {
	Value CronResultRow
	Set   bool
}

// IsSet returns true if OptCronResultRow was set.
func (o OptCronResultRow) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCronResultRow) Reset() {
	var v CronResultRow
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCronResultRow) SetTo(v CronResultRow) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCronResultRow) Get() (v CronResultRow, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCronResultRow) Or(d CronResultRow) CronResultRow {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCurrencyUpdateDefault returns new OptCurrencyUpdateDefault with value set to v.
func NewOptCurrencyUpdateDefault(v CurrencyUpdateDefault) OptCurrencyUpdateDefault {
	return OptCurrencyUpdateDefault{
		Value: v,
		Set:   true,
	}
}

// OptCurrencyUpdateDefault is optional CurrencyUpdateDefault.
type OptCurrencyUpdateDefault struct {
	Value CurrencyUpdateDefault
	Set   bool
}

// IsSet returns true if OptCurrencyUpdateDefault was set.
func (o OptCurrencyUpdateDefault) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCurrencyUpdateDefault) Reset() {
	var v CurrencyUpdateDefault
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCurrencyUpdateDefault) SetTo(v CurrencyUpdateDefault) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCurrencyUpdateDefault) Get() (v CurrencyUpdateDefault, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCurrencyUpdateDefault) Or(d CurrencyUpdateDefault) CurrencyUpdateDefault {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExportFileFilter returns new OptExportFileFilter with value set to v.
func NewOptExportFileFilter(v ExportFileFilter) OptExportFileFilter {
	return OptExportFileFilter{
		Value: v,
		Set:   true,
	}
}

// OptExportFileFilter is optional ExportFileFilter.
type OptExportFileFilter struct {
	Value ExportFileFilter
	Set   bool
}

// IsSet returns true if OptExportFileFilter was set.
func (o OptExportFileFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExportFileFilter) Reset() {
	var v ExportFileFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExportFileFilter) SetTo(v ExportFileFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExportFileFilter) Get() (v ExportFileFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExportFileFilter) Or(d ExportFileFilter) ExportFileFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetaPagination returns new OptMetaPagination with value set to v.
func NewOptMetaPagination(v MetaPagination) OptMetaPagination {
	return OptMetaPagination{
		Value: v,
		Set:   true,
	}
}

// OptMetaPagination is optional MetaPagination.
type OptMetaPagination struct {
	Value MetaPagination
	Set   bool
}

// IsSet returns true if OptMetaPagination was set.
func (o OptMetaPagination) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetaPagination) Reset() {
	var v MetaPagination
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetaPagination) SetTo(v MetaPagination) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetaPagination) Get() (v MetaPagination, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetaPagination) Or(d MetaPagination) MetaPagination {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAccountRoleProperty returns new OptNilAccountRoleProperty with value set to v.
func NewOptNilAccountRoleProperty(v AccountRoleProperty) OptNilAccountRoleProperty {
	return OptNilAccountRoleProperty{
		Value: v,
		Set:   true,
	}
}

// OptNilAccountRoleProperty is optional nullable AccountRoleProperty.
type OptNilAccountRoleProperty struct {
	Value AccountRoleProperty
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAccountRoleProperty was set.
func (o OptNilAccountRoleProperty) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAccountRoleProperty) Reset() {
	var v AccountRoleProperty
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAccountRoleProperty) SetTo(v AccountRoleProperty) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAccountRoleProperty) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAccountRoleProperty) SetToNull() {
	o.Set = true
	o.Null = true
	var v AccountRoleProperty
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAccountRoleProperty) Get() (v AccountRoleProperty, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAccountRoleProperty) Or(d AccountRoleProperty) AccountRoleProperty {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAutoBudgetPeriod returns new OptNilAutoBudgetPeriod with value set to v.
func NewOptNilAutoBudgetPeriod(v AutoBudgetPeriod) OptNilAutoBudgetPeriod {
	return OptNilAutoBudgetPeriod{
		Value: v,
		Set:   true,
	}
}

// OptNilAutoBudgetPeriod is optional nullable AutoBudgetPeriod.
type OptNilAutoBudgetPeriod struct {
	Value AutoBudgetPeriod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAutoBudgetPeriod was set.
func (o OptNilAutoBudgetPeriod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAutoBudgetPeriod) Reset() {
	var v AutoBudgetPeriod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAutoBudgetPeriod) SetTo(v AutoBudgetPeriod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAutoBudgetPeriod) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAutoBudgetPeriod) SetToNull() {
	o.Set = true
	o.Null = true
	var v AutoBudgetPeriod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAutoBudgetPeriod) Get() (v AutoBudgetPeriod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAutoBudgetPeriod) Or(d AutoBudgetPeriod) AutoBudgetPeriod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAutoBudgetType returns new OptNilAutoBudgetType with value set to v.
func NewOptNilAutoBudgetType(v AutoBudgetType) OptNilAutoBudgetType {
	return OptNilAutoBudgetType{
		Value: v,
		Set:   true,
	}
}

// OptNilAutoBudgetType is optional nullable AutoBudgetType.
type OptNilAutoBudgetType struct {
	Value AutoBudgetType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAutoBudgetType was set.
func (o OptNilAutoBudgetType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAutoBudgetType) Reset() {
	var v AutoBudgetType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAutoBudgetType) SetTo(v AutoBudgetType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAutoBudgetType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAutoBudgetType) SetToNull() {
	o.Set = true
	o.Null = true
	var v AutoBudgetType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAutoBudgetType) Get() (v AutoBudgetType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAutoBudgetType) Or(d AutoBudgetType) AutoBudgetType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreditCardType returns new OptNilCreditCardType with value set to v.
func NewOptNilCreditCardType(v CreditCardType) OptNilCreditCardType {
	return OptNilCreditCardType{
		Value: v,
		Set:   true,
	}
}

// OptNilCreditCardType is optional nullable CreditCardType.
type OptNilCreditCardType struct {
	Value CreditCardType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreditCardType was set.
func (o OptNilCreditCardType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreditCardType) Reset() {
	var v CreditCardType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreditCardType) SetTo(v CreditCardType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreditCardType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreditCardType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreditCardType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreditCardType) Get() (v CreditCardType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreditCardType) Or(d CreditCardType) CreditCardType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDate returns new OptNilDate with value set to v.
func NewOptNilDate(v time.Time) OptNilDate {
	return OptNilDate{
		Value: v,
		Set:   true,
	}
}

// OptNilDate is optional nullable time.Time.
type OptNilDate struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDate was set.
func (o OptNilDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDate) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDate) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDate) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat32 returns new OptNilFloat32 with value set to v.
func NewOptNilFloat32(v float32) OptNilFloat32 {
	return OptNilFloat32{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat32 is optional nullable float32.
type OptNilFloat32 struct {
	Value float32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat32 was set.
func (o OptNilFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat32) SetTo(v float32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFloat32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFloat32) SetToNull() {
	o.Set = true
	o.Null = true
	var v float32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat32) Get() (v float32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat64 returns new OptNilFloat64 with value set to v.
func NewOptNilFloat64(v float64) OptNilFloat64 {
	return OptNilFloat64{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat64 is optional nullable float64.
type OptNilFloat64 struct {
	Value float64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat64 was set.
func (o OptNilFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat64) SetTo(v float64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFloat64) SetToNull() {
	o.Set = true
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt32 returns new OptNilInt32 with value set to v.
func NewOptNilInt32(v int32) OptNilInt32 {
	return OptNilInt32{
		Value: v,
		Set:   true,
	}
}

// OptNilInt32 is optional nullable int32.
type OptNilInt32 struct {
	Value int32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt32 was set.
func (o OptNilInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt32) SetTo(v int32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt32) SetToNull() {
	o.Set = true
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInterestPeriod returns new OptNilInterestPeriod with value set to v.
func NewOptNilInterestPeriod(v InterestPeriod) OptNilInterestPeriod {
	return OptNilInterestPeriod{
		Value: v,
		Set:   true,
	}
}

// OptNilInterestPeriod is optional nullable InterestPeriod.
type OptNilInterestPeriod struct {
	Value InterestPeriod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInterestPeriod was set.
func (o OptNilInterestPeriod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInterestPeriod) Reset() {
	var v InterestPeriod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInterestPeriod) SetTo(v InterestPeriod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInterestPeriod) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInterestPeriod) SetToNull() {
	o.Set = true
	o.Null = true
	var v InterestPeriod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInterestPeriod) Get() (v InterestPeriod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInterestPeriod) Or(d InterestPeriod) InterestPeriod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLiabilityDirection returns new OptNilLiabilityDirection with value set to v.
func NewOptNilLiabilityDirection(v LiabilityDirection) OptNilLiabilityDirection {
	return OptNilLiabilityDirection{
		Value: v,
		Set:   true,
	}
}

// OptNilLiabilityDirection is optional nullable LiabilityDirection.
type OptNilLiabilityDirection struct {
	Value LiabilityDirection
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLiabilityDirection was set.
func (o OptNilLiabilityDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLiabilityDirection) Reset() {
	var v LiabilityDirection
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLiabilityDirection) SetTo(v LiabilityDirection) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLiabilityDirection) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLiabilityDirection) SetToNull() {
	o.Set = true
	o.Null = true
	var v LiabilityDirection
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLiabilityDirection) Get() (v LiabilityDirection, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLiabilityDirection) Or(d LiabilityDirection) LiabilityDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLiabilityType returns new OptNilLiabilityType with value set to v.
func NewOptNilLiabilityType(v LiabilityType) OptNilLiabilityType {
	return OptNilLiabilityType{
		Value: v,
		Set:   true,
	}
}

// OptNilLiabilityType is optional nullable LiabilityType.
type OptNilLiabilityType struct {
	Value LiabilityType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLiabilityType was set.
func (o OptNilLiabilityType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLiabilityType) Reset() {
	var v LiabilityType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLiabilityType) SetTo(v LiabilityType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLiabilityType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLiabilityType) SetToNull() {
	o.Set = true
	o.Null = true
	var v LiabilityType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLiabilityType) Get() (v LiabilityType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLiabilityType) Or(d LiabilityType) LiabilityType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUserBlockedCodeProperty returns new OptNilUserBlockedCodeProperty with value set to v.
func NewOptNilUserBlockedCodeProperty(v UserBlockedCodeProperty) OptNilUserBlockedCodeProperty {
	return OptNilUserBlockedCodeProperty{
		Value: v,
		Set:   true,
	}
}

// OptNilUserBlockedCodeProperty is optional nullable UserBlockedCodeProperty.
type OptNilUserBlockedCodeProperty struct {
	Value UserBlockedCodeProperty
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUserBlockedCodeProperty was set.
func (o OptNilUserBlockedCodeProperty) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUserBlockedCodeProperty) Reset() {
	var v UserBlockedCodeProperty
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUserBlockedCodeProperty) SetTo(v UserBlockedCodeProperty) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUserBlockedCodeProperty) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUserBlockedCodeProperty) SetToNull() {
	o.Set = true
	o.Null = true
	var v UserBlockedCodeProperty
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUserBlockedCodeProperty) Get() (v UserBlockedCodeProperty, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUserBlockedCodeProperty) Or(d UserBlockedCodeProperty) UserBlockedCodeProperty {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUserRoleProperty returns new OptNilUserRoleProperty with value set to v.
func NewOptNilUserRoleProperty(v UserRoleProperty) OptNilUserRoleProperty {
	return OptNilUserRoleProperty{
		Value: v,
		Set:   true,
	}
}

// OptNilUserRoleProperty is optional nullable UserRoleProperty.
type OptNilUserRoleProperty struct {
	Value UserRoleProperty
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUserRoleProperty was set.
func (o OptNilUserRoleProperty) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUserRoleProperty) Reset() {
	var v UserRoleProperty
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUserRoleProperty) SetTo(v UserRoleProperty) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUserRoleProperty) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUserRoleProperty) SetToNull() {
	o.Set = true
	o.Null = true
	var v UserRoleProperty
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUserRoleProperty) Get() (v UserRoleProperty, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUserRoleProperty) Or(d UserRoleProperty) UserRoleProperty {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptObjectLink0 returns new OptObjectLink0 with value set to v.
func NewOptObjectLink0(v ObjectLink0) OptObjectLink0 {
	return OptObjectLink0{
		Value: v,
		Set:   true,
	}
}

// OptObjectLink0 is optional ObjectLink0.
type OptObjectLink0 struct {
	Value ObjectLink0
	Set   bool
}

// IsSet returns true if OptObjectLink0 was set.
func (o OptObjectLink0) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptObjectLink0) Reset() {
	var v ObjectLink0
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptObjectLink0) SetTo(v ObjectLink0) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptObjectLink0) Get() (v ObjectLink0, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptObjectLink0) Or(d ObjectLink0) ObjectLink0 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecurrenceRepetitionType returns new OptRecurrenceRepetitionType with value set to v.
func NewOptRecurrenceRepetitionType(v RecurrenceRepetitionType) OptRecurrenceRepetitionType {
	return OptRecurrenceRepetitionType{
		Value: v,
		Set:   true,
	}
}

// OptRecurrenceRepetitionType is optional RecurrenceRepetitionType.
type OptRecurrenceRepetitionType struct {
	Value RecurrenceRepetitionType
	Set   bool
}

// IsSet returns true if OptRecurrenceRepetitionType was set.
func (o OptRecurrenceRepetitionType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecurrenceRepetitionType) Reset() {
	var v RecurrenceRepetitionType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecurrenceRepetitionType) SetTo(v RecurrenceRepetitionType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecurrenceRepetitionType) Get() (v RecurrenceRepetitionType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecurrenceRepetitionType) Or(d RecurrenceRepetitionType) RecurrenceRepetitionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecurrenceTransactionType returns new OptRecurrenceTransactionType with value set to v.
func NewOptRecurrenceTransactionType(v RecurrenceTransactionType) OptRecurrenceTransactionType {
	return OptRecurrenceTransactionType{
		Value: v,
		Set:   true,
	}
}

// OptRecurrenceTransactionType is optional RecurrenceTransactionType.
type OptRecurrenceTransactionType struct {
	Value RecurrenceTransactionType
	Set   bool
}

// IsSet returns true if OptRecurrenceTransactionType was set.
func (o OptRecurrenceTransactionType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecurrenceTransactionType) Reset() {
	var v RecurrenceTransactionType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecurrenceTransactionType) SetTo(v RecurrenceTransactionType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecurrenceTransactionType) Get() (v RecurrenceTransactionType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecurrenceTransactionType) Or(d RecurrenceTransactionType) RecurrenceTransactionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleActionKeyword returns new OptRuleActionKeyword with value set to v.
func NewOptRuleActionKeyword(v RuleActionKeyword) OptRuleActionKeyword {
	return OptRuleActionKeyword{
		Value: v,
		Set:   true,
	}
}

// OptRuleActionKeyword is optional RuleActionKeyword.
type OptRuleActionKeyword struct {
	Value RuleActionKeyword
	Set   bool
}

// IsSet returns true if OptRuleActionKeyword was set.
func (o OptRuleActionKeyword) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleActionKeyword) Reset() {
	var v RuleActionKeyword
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleActionKeyword) SetTo(v RuleActionKeyword) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleActionKeyword) Get() (v RuleActionKeyword, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleActionKeyword) Or(d RuleActionKeyword) RuleActionKeyword {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleTriggerKeyword returns new OptRuleTriggerKeyword with value set to v.
func NewOptRuleTriggerKeyword(v RuleTriggerKeyword) OptRuleTriggerKeyword {
	return OptRuleTriggerKeyword{
		Value: v,
		Set:   true,
	}
}

// OptRuleTriggerKeyword is optional RuleTriggerKeyword.
type OptRuleTriggerKeyword struct {
	Value RuleTriggerKeyword
	Set   bool
}

// IsSet returns true if OptRuleTriggerKeyword was set.
func (o OptRuleTriggerKeyword) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleTriggerKeyword) Reset() {
	var v RuleTriggerKeyword
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleTriggerKeyword) SetTo(v RuleTriggerKeyword) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleTriggerKeyword) Get() (v RuleTriggerKeyword, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleTriggerKeyword) Or(d RuleTriggerKeyword) RuleTriggerKeyword {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleTriggerType returns new OptRuleTriggerType with value set to v.
func NewOptRuleTriggerType(v RuleTriggerType) OptRuleTriggerType {
	return OptRuleTriggerType{
		Value: v,
		Set:   true,
	}
}

// OptRuleTriggerType is optional RuleTriggerType.
type OptRuleTriggerType struct {
	Value RuleTriggerType
	Set   bool
}

// IsSet returns true if OptRuleTriggerType was set.
func (o OptRuleTriggerType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleTriggerType) Reset() {
	var v RuleTriggerType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleTriggerType) SetTo(v RuleTriggerType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleTriggerType) Get() (v RuleTriggerType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleTriggerType) Or(d RuleTriggerType) RuleTriggerType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSystemInfoData returns new OptSystemInfoData with value set to v.
func NewOptSystemInfoData(v SystemInfoData) OptSystemInfoData {
	return OptSystemInfoData{
		Value: v,
		Set:   true,
	}
}

// OptSystemInfoData is optional SystemInfoData.
type OptSystemInfoData struct {
	Value SystemInfoData
	Set   bool
}

// IsSet returns true if OptSystemInfoData was set.
func (o OptSystemInfoData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSystemInfoData) Reset() {
	var v SystemInfoData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSystemInfoData) SetTo(v SystemInfoData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSystemInfoData) Get() (v SystemInfoData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSystemInfoData) Or(d SystemInfoData) SystemInfoData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransactionTypeFilter returns new OptTransactionTypeFilter with value set to v.
func NewOptTransactionTypeFilter(v TransactionTypeFilter) OptTransactionTypeFilter {
	return OptTransactionTypeFilter{
		Value: v,
		Set:   true,
	}
}

// OptTransactionTypeFilter is optional TransactionTypeFilter.
type OptTransactionTypeFilter struct {
	Value TransactionTypeFilter
	Set   bool
}

// IsSet returns true if OptTransactionTypeFilter was set.
func (o OptTransactionTypeFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransactionTypeFilter) Reset() {
	var v TransactionTypeFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransactionTypeFilter) SetTo(v TransactionTypeFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransactionTypeFilter) Get() (v TransactionTypeFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransactionTypeFilter) Or(d TransactionTypeFilter) TransactionTypeFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransactionTypeProperty returns new OptTransactionTypeProperty with value set to v.
func NewOptTransactionTypeProperty(v TransactionTypeProperty) OptTransactionTypeProperty {
	return OptTransactionTypeProperty{
		Value: v,
		Set:   true,
	}
}

// OptTransactionTypeProperty is optional TransactionTypeProperty.
type OptTransactionTypeProperty struct {
	Value TransactionTypeProperty
	Set   bool
}

// IsSet returns true if OptTransactionTypeProperty was set.
func (o OptTransactionTypeProperty) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransactionTypeProperty) Reset() {
	var v TransactionTypeProperty
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransactionTypeProperty) SetTo(v TransactionTypeProperty) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransactionTypeProperty) Get() (v TransactionTypeProperty, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransactionTypeProperty) Or(d TransactionTypeProperty) TransactionTypeProperty {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidationErrorErrors returns new OptValidationErrorErrors with value set to v.
func NewOptValidationErrorErrors(v ValidationErrorErrors) OptValidationErrorErrors {
	return OptValidationErrorErrors{
		Value: v,
		Set:   true,
	}
}

// OptValidationErrorErrors is optional ValidationErrorErrors.
type OptValidationErrorErrors struct {
	Value ValidationErrorErrors
	Set   bool
}

// IsSet returns true if OptValidationErrorErrors was set.
func (o OptValidationErrorErrors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidationErrorErrors) Reset() {
	var v ValidationErrorErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidationErrorErrors) SetTo(v ValidationErrorErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidationErrorErrors) Get() (v ValidationErrorErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidationErrorErrors) Or(d ValidationErrorErrors) ValidationErrorErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDelivery returns new OptWebhookDelivery with value set to v.
func NewOptWebhookDelivery(v WebhookDelivery) OptWebhookDelivery {
	return OptWebhookDelivery{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDelivery is optional WebhookDelivery.
type OptWebhookDelivery struct {
	Value WebhookDelivery
	Set   bool
}

// IsSet returns true if OptWebhookDelivery was set.
func (o OptWebhookDelivery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDelivery) Reset() {
	var v WebhookDelivery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDelivery) SetTo(v WebhookDelivery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDelivery) Get() (v WebhookDelivery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDelivery) Or(d WebhookDelivery) WebhookDelivery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookResponse returns new OptWebhookResponse with value set to v.
func NewOptWebhookResponse(v WebhookResponse) OptWebhookResponse {
	return OptWebhookResponse{
		Value: v,
		Set:   true,
	}
}

// OptWebhookResponse is optional WebhookResponse.
type OptWebhookResponse struct {
	Value WebhookResponse
	Set   bool
}

// IsSet returns true if OptWebhookResponse was set.
func (o OptWebhookResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookResponse) Reset() {
	var v WebhookResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookResponse) SetTo(v WebhookResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookResponse) Get() (v WebhookResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookResponse) Or(d WebhookResponse) WebhookResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookTrigger returns new OptWebhookTrigger with value set to v.
func NewOptWebhookTrigger(v WebhookTrigger) OptWebhookTrigger {
	return OptWebhookTrigger{
		Value: v,
		Set:   true,
	}
}

// OptWebhookTrigger is optional WebhookTrigger.
type OptWebhookTrigger struct {
	Value WebhookTrigger
	Set   bool
}

// IsSet returns true if OptWebhookTrigger was set.
func (o OptWebhookTrigger) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookTrigger) Reset() {
	var v WebhookTrigger
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookTrigger) SetTo(v WebhookTrigger) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookTrigger) Get() (v WebhookTrigger, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookTrigger) Or(d WebhookTrigger) WebhookTrigger {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PageLink
type PageLink struct {
	Self  OptURI `json:"self"`
	First OptURI `json:"first"`
	Next  OptURI `json:"next"`
	Prev  OptURI `json:"prev"`
	Last  OptURI `json:"last"`
}

// GetSelf returns the value of Self.
func (s *PageLink) GetSelf() OptURI {
	return s.Self
}

// GetFirst returns the value of First.
func (s *PageLink) GetFirst() OptURI {
	return s.First
}

// GetNext returns the value of Next.
func (s *PageLink) GetNext() OptURI {
	return s.Next
}

// GetPrev returns the value of Prev.
func (s *PageLink) GetPrev() OptURI {
	return s.Prev
}

// GetLast returns the value of Last.
func (s *PageLink) GetLast() OptURI {
	return s.Last
}

// SetSelf sets the value of Self.
func (s *PageLink) SetSelf(val OptURI) {
	s.Self = val
}

// SetFirst sets the value of First.
func (s *PageLink) SetFirst(val OptURI) {
	s.First = val
}

// SetNext sets the value of Next.
func (s *PageLink) SetNext(val OptURI) {
	s.Next = val
}

// SetPrev sets the value of Prev.
func (s *PageLink) SetPrev(val OptURI) {
	s.Prev = val
}

// SetLast sets the value of Last.
func (s *PageLink) SetLast(val OptURI) {
	s.Last = val
}

// Ref: #/components/schemas/PiggyBank
type PiggyBank struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// The ID of the asset account this piggy bank is connected to.
	AccountID string `json:"account_id"`
	// The name of the asset account this piggy bank is connected to.
	AccountName    OptString `json:"account_name"`
	Name           string    `json:"name"`
	CurrencyID     OptString `json:"currency_id"`
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals supported by the currency.
	CurrencyDecimalPlaces OptInt32      `json:"currency_decimal_places"`
	TargetAmount          NilString     `json:"target_amount"`
	Percentage            OptNilFloat32 `json:"percentage"`
	CurrentAmount         OptString     `json:"current_amount"`
	LeftToSave            OptNilString  `json:"left_to_save"`
	SavePerMonth          OptNilString  `json:"save_per_month"`
	// The date you started with this piggy bank.
	StartDate OptDate `json:"start_date"`
	// The date you intend to finish saving money.
	TargetDate OptNilDate   `json:"target_date"`
	Order      OptInt32     `json:"order"`
	Active     OptBool      `json:"active"`
	Notes      OptNilString `json:"notes"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The order of the group. At least 1, for the highest sorting.
	ObjectGroupOrder OptNilInt32 `json:"object_group_order"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PiggyBank) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PiggyBank) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetAccountID returns the value of AccountID.
func (s *PiggyBank) GetAccountID() string {
	return s.AccountID
}

// GetAccountName returns the value of AccountName.
func (s *PiggyBank) GetAccountName() OptString {
	return s.AccountName
}

// GetName returns the value of Name.
func (s *PiggyBank) GetName() string {
	return s.Name
}

// GetCurrencyID returns the value of CurrencyID.
func (s *PiggyBank) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *PiggyBank) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *PiggyBank) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *PiggyBank) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetTargetAmount returns the value of TargetAmount.
func (s *PiggyBank) GetTargetAmount() NilString {
	return s.TargetAmount
}

// GetPercentage returns the value of Percentage.
func (s *PiggyBank) GetPercentage() OptNilFloat32 {
	return s.Percentage
}

// GetCurrentAmount returns the value of CurrentAmount.
func (s *PiggyBank) GetCurrentAmount() OptString {
	return s.CurrentAmount
}

// GetLeftToSave returns the value of LeftToSave.
func (s *PiggyBank) GetLeftToSave() OptNilString {
	return s.LeftToSave
}

// GetSavePerMonth returns the value of SavePerMonth.
func (s *PiggyBank) GetSavePerMonth() OptNilString {
	return s.SavePerMonth
}

// GetStartDate returns the value of StartDate.
func (s *PiggyBank) GetStartDate() OptDate {
	return s.StartDate
}

// GetTargetDate returns the value of TargetDate.
func (s *PiggyBank) GetTargetDate() OptNilDate {
	return s.TargetDate
}

// GetOrder returns the value of Order.
func (s *PiggyBank) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *PiggyBank) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *PiggyBank) GetNotes() OptNilString {
	return s.Notes
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *PiggyBank) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupOrder returns the value of ObjectGroupOrder.
func (s *PiggyBank) GetObjectGroupOrder() OptNilInt32 {
	return s.ObjectGroupOrder
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *PiggyBank) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PiggyBank) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PiggyBank) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetAccountID sets the value of AccountID.
func (s *PiggyBank) SetAccountID(val string) {
	s.AccountID = val
}

// SetAccountName sets the value of AccountName.
func (s *PiggyBank) SetAccountName(val OptString) {
	s.AccountName = val
}

// SetName sets the value of Name.
func (s *PiggyBank) SetName(val string) {
	s.Name = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *PiggyBank) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *PiggyBank) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *PiggyBank) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *PiggyBank) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetTargetAmount sets the value of TargetAmount.
func (s *PiggyBank) SetTargetAmount(val NilString) {
	s.TargetAmount = val
}

// SetPercentage sets the value of Percentage.
func (s *PiggyBank) SetPercentage(val OptNilFloat32) {
	s.Percentage = val
}

// SetCurrentAmount sets the value of CurrentAmount.
func (s *PiggyBank) SetCurrentAmount(val OptString) {
	s.CurrentAmount = val
}

// SetLeftToSave sets the value of LeftToSave.
func (s *PiggyBank) SetLeftToSave(val OptNilString) {
	s.LeftToSave = val
}

// SetSavePerMonth sets the value of SavePerMonth.
func (s *PiggyBank) SetSavePerMonth(val OptNilString) {
	s.SavePerMonth = val
}

// SetStartDate sets the value of StartDate.
func (s *PiggyBank) SetStartDate(val OptDate) {
	s.StartDate = val
}

// SetTargetDate sets the value of TargetDate.
func (s *PiggyBank) SetTargetDate(val OptNilDate) {
	s.TargetDate = val
}

// SetOrder sets the value of Order.
func (s *PiggyBank) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *PiggyBank) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *PiggyBank) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *PiggyBank) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupOrder sets the value of ObjectGroupOrder.
func (s *PiggyBank) SetObjectGroupOrder(val OptNilInt32) {
	s.ObjectGroupOrder = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *PiggyBank) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

// Ref: #/components/schemas/PiggyBankArray
type PiggyBankArray struct {
	Data  []PiggyBankRead `json:"data"`
	Meta  Meta            `json:"meta"`
	Links PageLink        `json:"links"`
}

// GetData returns the value of Data.
func (s *PiggyBankArray) GetData() []PiggyBankRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *PiggyBankArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *PiggyBankArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *PiggyBankArray) SetData(val []PiggyBankRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *PiggyBankArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *PiggyBankArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*PiggyBankArray) listPiggyBankByAccountRes()     {}
func (*PiggyBankArray) listPiggyBankByObjectGroupRes() {}
func (*PiggyBankArray) listPiggyBankRes()              {}

// Ref: #/components/schemas/PiggyBankEvent
type PiggyBankEvent struct {
	CreatedAt             OptDateTime `json:"created_at"`
	UpdatedAt             OptDateTime `json:"updated_at"`
	CurrencyID            OptString   `json:"currency_id"`
	CurrencyCode          OptString   `json:"currency_code"`
	CurrencySymbol        OptString   `json:"currency_symbol"`
	CurrencyDecimalPlaces OptInt32    `json:"currency_decimal_places"`
	Amount                OptString   `json:"amount"`
	// The journal associated with the event.
	TransactionJournalID OptString `json:"transaction_journal_id"`
	// The transaction group associated with the event.
	TransactionGroupID OptString `json:"transaction_group_id"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PiggyBankEvent) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PiggyBankEvent) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetCurrencyID returns the value of CurrencyID.
func (s *PiggyBankEvent) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *PiggyBankEvent) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *PiggyBankEvent) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *PiggyBankEvent) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetAmount returns the value of Amount.
func (s *PiggyBankEvent) GetAmount() OptString {
	return s.Amount
}

// GetTransactionJournalID returns the value of TransactionJournalID.
func (s *PiggyBankEvent) GetTransactionJournalID() OptString {
	return s.TransactionJournalID
}

// GetTransactionGroupID returns the value of TransactionGroupID.
func (s *PiggyBankEvent) GetTransactionGroupID() OptString {
	return s.TransactionGroupID
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PiggyBankEvent) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PiggyBankEvent) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *PiggyBankEvent) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *PiggyBankEvent) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *PiggyBankEvent) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *PiggyBankEvent) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetAmount sets the value of Amount.
func (s *PiggyBankEvent) SetAmount(val OptString) {
	s.Amount = val
}

// SetTransactionJournalID sets the value of TransactionJournalID.
func (s *PiggyBankEvent) SetTransactionJournalID(val OptString) {
	s.TransactionJournalID = val
}

// SetTransactionGroupID sets the value of TransactionGroupID.
func (s *PiggyBankEvent) SetTransactionGroupID(val OptString) {
	s.TransactionGroupID = val
}

// Ref: #/components/schemas/PiggyBankEventArray
type PiggyBankEventArray struct {
	Data  []PiggyBankEventRead `json:"data"`
	Meta  Meta                 `json:"meta"`
	Links PageLink             `json:"links"`
}

// GetData returns the value of Data.
func (s *PiggyBankEventArray) GetData() []PiggyBankEventRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *PiggyBankEventArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *PiggyBankEventArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *PiggyBankEventArray) SetData(val []PiggyBankEventRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *PiggyBankEventArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *PiggyBankEventArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*PiggyBankEventArray) listEventByPiggyBankRes()   {}
func (*PiggyBankEventArray) listEventByTransactionRes() {}

// Ref: #/components/schemas/PiggyBankEventRead
type PiggyBankEventRead struct {
	// Immutable value.
	Type       string         `json:"type"`
	ID         string         `json:"id"`
	Attributes PiggyBankEvent `json:"attributes"`
	Links      ObjectLink     `json:"links"`
}

// GetType returns the value of Type.
func (s *PiggyBankEventRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *PiggyBankEventRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *PiggyBankEventRead) GetAttributes() PiggyBankEvent {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *PiggyBankEventRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *PiggyBankEventRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PiggyBankEventRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *PiggyBankEventRead) SetAttributes(val PiggyBankEvent) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *PiggyBankEventRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/PiggyBankRead
type PiggyBankRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes PiggyBank  `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *PiggyBankRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *PiggyBankRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *PiggyBankRead) GetAttributes() PiggyBank {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *PiggyBankRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *PiggyBankRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PiggyBankRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *PiggyBankRead) SetAttributes(val PiggyBank) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *PiggyBankRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/PiggyBankSingle
type PiggyBankSingle struct {
	Data PiggyBankRead `json:"data"`
}

// GetData returns the value of Data.
func (s *PiggyBankSingle) GetData() PiggyBankRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *PiggyBankSingle) SetData(val PiggyBankRead) {
	s.Data = val
}

func (*PiggyBankSingle) getPiggyBankRes()    {}
func (*PiggyBankSingle) storePiggyBankRes()  {}
func (*PiggyBankSingle) updatePiggyBankRes() {}

// Ref: #/components/schemas/PiggyBankStore
type PiggyBankStore struct {
	Name string `json:"name"`
	// The ID of the asset account this piggy bank is connected to.
	AccountID     string    `json:"account_id"`
	TargetAmount  NilString `json:"target_amount"`
	CurrentAmount OptString `json:"current_amount"`
	// The date you started with this piggy bank.
	StartDate OptDate `json:"start_date"`
	// The date you intend to finish saving money.
	TargetDate OptNilDate   `json:"target_date"`
	Order      OptInt32     `json:"order"`
	Active     OptBool      `json:"active"`
	Notes      OptNilString `json:"notes"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetName returns the value of Name.
func (s *PiggyBankStore) GetName() string {
	return s.Name
}

// GetAccountID returns the value of AccountID.
func (s *PiggyBankStore) GetAccountID() string {
	return s.AccountID
}

// GetTargetAmount returns the value of TargetAmount.
func (s *PiggyBankStore) GetTargetAmount() NilString {
	return s.TargetAmount
}

// GetCurrentAmount returns the value of CurrentAmount.
func (s *PiggyBankStore) GetCurrentAmount() OptString {
	return s.CurrentAmount
}

// GetStartDate returns the value of StartDate.
func (s *PiggyBankStore) GetStartDate() OptDate {
	return s.StartDate
}

// GetTargetDate returns the value of TargetDate.
func (s *PiggyBankStore) GetTargetDate() OptNilDate {
	return s.TargetDate
}

// GetOrder returns the value of Order.
func (s *PiggyBankStore) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *PiggyBankStore) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *PiggyBankStore) GetNotes() OptNilString {
	return s.Notes
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *PiggyBankStore) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *PiggyBankStore) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetName sets the value of Name.
func (s *PiggyBankStore) SetName(val string) {
	s.Name = val
}

// SetAccountID sets the value of AccountID.
func (s *PiggyBankStore) SetAccountID(val string) {
	s.AccountID = val
}

// SetTargetAmount sets the value of TargetAmount.
func (s *PiggyBankStore) SetTargetAmount(val NilString) {
	s.TargetAmount = val
}

// SetCurrentAmount sets the value of CurrentAmount.
func (s *PiggyBankStore) SetCurrentAmount(val OptString) {
	s.CurrentAmount = val
}

// SetStartDate sets the value of StartDate.
func (s *PiggyBankStore) SetStartDate(val OptDate) {
	s.StartDate = val
}

// SetTargetDate sets the value of TargetDate.
func (s *PiggyBankStore) SetTargetDate(val OptNilDate) {
	s.TargetDate = val
}

// SetOrder sets the value of Order.
func (s *PiggyBankStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *PiggyBankStore) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *PiggyBankStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *PiggyBankStore) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *PiggyBankStore) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

// Ref: #/components/schemas/PiggyBankUpdate
type PiggyBankUpdate struct {
	Name OptString `json:"name"`
	// The ID of the asset account this piggy bank is connected to.
	AccountID     OptString    `json:"account_id"`
	CurrencyID    OptString    `json:"currency_id"`
	CurrencyCode  OptString    `json:"currency_code"`
	TargetAmount  OptNilString `json:"target_amount"`
	CurrentAmount OptString    `json:"current_amount"`
	// The date you started with this piggy bank.
	StartDate OptDate `json:"start_date"`
	// The date you intend to finish saving money.
	TargetDate OptNilDate   `json:"target_date"`
	Order      OptInt32     `json:"order"`
	Active     OptBool      `json:"active"`
	Notes      OptNilString `json:"notes"`
	// The group ID of the group this object is part of. NULL if no group.
	ObjectGroupID OptNilString `json:"object_group_id"`
	// The name of the group. NULL if no group.
	ObjectGroupTitle OptNilString `json:"object_group_title"`
}

// GetName returns the value of Name.
func (s *PiggyBankUpdate) GetName() OptString {
	return s.Name
}

// GetAccountID returns the value of AccountID.
func (s *PiggyBankUpdate) GetAccountID() OptString {
	return s.AccountID
}

// GetCurrencyID returns the value of CurrencyID.
func (s *PiggyBankUpdate) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *PiggyBankUpdate) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetTargetAmount returns the value of TargetAmount.
func (s *PiggyBankUpdate) GetTargetAmount() OptNilString {
	return s.TargetAmount
}

// GetCurrentAmount returns the value of CurrentAmount.
func (s *PiggyBankUpdate) GetCurrentAmount() OptString {
	return s.CurrentAmount
}

// GetStartDate returns the value of StartDate.
func (s *PiggyBankUpdate) GetStartDate() OptDate {
	return s.StartDate
}

// GetTargetDate returns the value of TargetDate.
func (s *PiggyBankUpdate) GetTargetDate() OptNilDate {
	return s.TargetDate
}

// GetOrder returns the value of Order.
func (s *PiggyBankUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *PiggyBankUpdate) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *PiggyBankUpdate) GetNotes() OptNilString {
	return s.Notes
}

// GetObjectGroupID returns the value of ObjectGroupID.
func (s *PiggyBankUpdate) GetObjectGroupID() OptNilString {
	return s.ObjectGroupID
}

// GetObjectGroupTitle returns the value of ObjectGroupTitle.
func (s *PiggyBankUpdate) GetObjectGroupTitle() OptNilString {
	return s.ObjectGroupTitle
}

// SetName sets the value of Name.
func (s *PiggyBankUpdate) SetName(val OptString) {
	s.Name = val
}

// SetAccountID sets the value of AccountID.
func (s *PiggyBankUpdate) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *PiggyBankUpdate) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *PiggyBankUpdate) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetTargetAmount sets the value of TargetAmount.
func (s *PiggyBankUpdate) SetTargetAmount(val OptNilString) {
	s.TargetAmount = val
}

// SetCurrentAmount sets the value of CurrentAmount.
func (s *PiggyBankUpdate) SetCurrentAmount(val OptString) {
	s.CurrentAmount = val
}

// SetStartDate sets the value of StartDate.
func (s *PiggyBankUpdate) SetStartDate(val OptDate) {
	s.StartDate = val
}

// SetTargetDate sets the value of TargetDate.
func (s *PiggyBankUpdate) SetTargetDate(val OptNilDate) {
	s.TargetDate = val
}

// SetOrder sets the value of Order.
func (s *PiggyBankUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *PiggyBankUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *PiggyBankUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetObjectGroupID sets the value of ObjectGroupID.
func (s *PiggyBankUpdate) SetObjectGroupID(val OptNilString) {
	s.ObjectGroupID = val
}

// SetObjectGroupTitle sets the value of ObjectGroupTitle.
func (s *PiggyBankUpdate) SetObjectGroupTitle(val OptNilString) {
	s.ObjectGroupTitle = val
}

// Ref: #/components/schemas/PolymorphicProperty
// PolymorphicProperty represents sum type.
type PolymorphicProperty struct {
	Type                 PolymorphicPropertyType // switch on this field
	Bool                 bool
	String               string
	PolymorphicProperty2 PolymorphicProperty2
	StringArrayItemArray []StringArrayItem
}

// PolymorphicPropertyType is oneOf type of PolymorphicProperty.
type PolymorphicPropertyType string

// Possible values for PolymorphicPropertyType.
const (
	BoolPolymorphicProperty                 PolymorphicPropertyType = "bool"
	StringPolymorphicProperty               PolymorphicPropertyType = "string"
	PolymorphicProperty2PolymorphicProperty PolymorphicPropertyType = "PolymorphicProperty2"
	StringArrayItemArrayPolymorphicProperty PolymorphicPropertyType = "[]StringArrayItem"
)

// IsBool reports whether PolymorphicProperty is bool.
func (s PolymorphicProperty) IsBool() bool { return s.Type == BoolPolymorphicProperty }

// IsString reports whether PolymorphicProperty is string.
func (s PolymorphicProperty) IsString() bool { return s.Type == StringPolymorphicProperty }

// IsPolymorphicProperty2 reports whether PolymorphicProperty is PolymorphicProperty2.
func (s PolymorphicProperty) IsPolymorphicProperty2() bool {
	return s.Type == PolymorphicProperty2PolymorphicProperty
}

// IsStringArrayItemArray reports whether PolymorphicProperty is []StringArrayItem.
func (s PolymorphicProperty) IsStringArrayItemArray() bool {
	return s.Type == StringArrayItemArrayPolymorphicProperty
}

// SetBool sets PolymorphicProperty to bool.
func (s *PolymorphicProperty) SetBool(v bool) {
	s.Type = BoolPolymorphicProperty
	s.Bool = v
}

// GetBool returns bool and true boolean if PolymorphicProperty is bool.
func (s PolymorphicProperty) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolPolymorphicProperty returns new PolymorphicProperty from bool.
func NewBoolPolymorphicProperty(v bool) PolymorphicProperty {
	var s PolymorphicProperty
	s.SetBool(v)
	return s
}

// SetString sets PolymorphicProperty to string.
func (s *PolymorphicProperty) SetString(v string) {
	s.Type = StringPolymorphicProperty
	s.String = v
}

// GetString returns string and true boolean if PolymorphicProperty is string.
func (s PolymorphicProperty) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringPolymorphicProperty returns new PolymorphicProperty from string.
func NewStringPolymorphicProperty(v string) PolymorphicProperty {
	var s PolymorphicProperty
	s.SetString(v)
	return s
}

// SetPolymorphicProperty2 sets PolymorphicProperty to PolymorphicProperty2.
func (s *PolymorphicProperty) SetPolymorphicProperty2(v PolymorphicProperty2) {
	s.Type = PolymorphicProperty2PolymorphicProperty
	s.PolymorphicProperty2 = v
}

// GetPolymorphicProperty2 returns PolymorphicProperty2 and true boolean if PolymorphicProperty is PolymorphicProperty2.
func (s PolymorphicProperty) GetPolymorphicProperty2() (v PolymorphicProperty2, ok bool) {
	if !s.IsPolymorphicProperty2() {
		return v, false
	}
	return s.PolymorphicProperty2, true
}

// NewPolymorphicProperty2PolymorphicProperty returns new PolymorphicProperty from PolymorphicProperty2.
func NewPolymorphicProperty2PolymorphicProperty(v PolymorphicProperty2) PolymorphicProperty {
	var s PolymorphicProperty
	s.SetPolymorphicProperty2(v)
	return s
}

// SetStringArrayItemArray sets PolymorphicProperty to []StringArrayItem.
func (s *PolymorphicProperty) SetStringArrayItemArray(v []StringArrayItem) {
	s.Type = StringArrayItemArrayPolymorphicProperty
	s.StringArrayItemArray = v
}

// GetStringArrayItemArray returns []StringArrayItem and true boolean if PolymorphicProperty is []StringArrayItem.
func (s PolymorphicProperty) GetStringArrayItemArray() (v []StringArrayItem, ok bool) {
	if !s.IsStringArrayItemArray() {
		return v, false
	}
	return s.StringArrayItemArray, true
}

// NewStringArrayItemArrayPolymorphicProperty returns new PolymorphicProperty from []StringArrayItem.
func NewStringArrayItemArrayPolymorphicProperty(v []StringArrayItem) PolymorphicProperty {
	var s PolymorphicProperty
	s.SetStringArrayItemArray(v)
	return s
}

type PolymorphicProperty2 struct{}

// Ref: #/components/schemas/Preference
type Preference struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	Name      string      `json:"name"`
	// The actual preference content.
	Data PolymorphicProperty `json:"data"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Preference) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Preference) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Preference) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *Preference) GetData() PolymorphicProperty {
	return s.Data
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Preference) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Preference) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Preference) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *Preference) SetData(val PolymorphicProperty) {
	s.Data = val
}

// Ref: #/components/schemas/PreferenceArray
type PreferenceArray struct {
	Data  []PreferenceRead `json:"data"`
	Meta  Meta             `json:"meta"`
	Links PageLink         `json:"links"`
}

// GetData returns the value of Data.
func (s *PreferenceArray) GetData() []PreferenceRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *PreferenceArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *PreferenceArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *PreferenceArray) SetData(val []PreferenceRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *PreferenceArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *PreferenceArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*PreferenceArray) listPreferenceRes() {}

// Ref: #/components/schemas/PreferenceRead
type PreferenceRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes Preference `json:"attributes"`
}

// GetType returns the value of Type.
func (s *PreferenceRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *PreferenceRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *PreferenceRead) GetAttributes() Preference {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *PreferenceRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *PreferenceRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *PreferenceRead) SetAttributes(val Preference) {
	s.Attributes = val
}

// Ref: #/components/schemas/PreferenceSingle
type PreferenceSingle struct {
	Data PreferenceRead `json:"data"`
}

// GetData returns the value of Data.
func (s *PreferenceSingle) GetData() PreferenceRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *PreferenceSingle) SetData(val PreferenceRead) {
	s.Data = val
}

func (*PreferenceSingle) getPreferenceRes()    {}
func (*PreferenceSingle) storePreferenceRes()  {}
func (*PreferenceSingle) updatePreferenceRes() {}

// Ref: #/components/schemas/PreferenceUpdate
type PreferenceUpdate struct {
	// The actual preference content.
	Data PolymorphicProperty `json:"data"`
}

// GetData returns the value of Data.
func (s *PreferenceUpdate) GetData() PolymorphicProperty {
	return s.Data
}

// SetData sets the value of Data.
func (s *PreferenceUpdate) SetData(val PolymorphicProperty) {
	s.Data = val
}

// PurgeDataNoContent is response for PurgeData operation.
type PurgeDataNoContent struct{}

func (*PurgeDataNoContent) purgeDataRes() {}

// Ref: #/components/schemas/Recurrence
type Recurrence struct {
	CreatedAt OptDateTime                  `json:"created_at"`
	UpdatedAt OptDateTime                  `json:"updated_at"`
	Type      OptRecurrenceTransactionType `json:"type"`
	Title     OptString                    `json:"title"`
	// Not to be confused with the description of the actual transaction(s) being created.
	Description OptString `json:"description"`
	// First time the recurring transaction will fire. Must be after today.
	FirstDate OptDate `json:"first_date"`
	// Last time the recurring transaction has fired.
	LatestDate OptNilDate `json:"latest_date"`
	// Date until the recurring transaction can fire. Use either this field or repetitions.
	RepeatUntil OptNilDate `json:"repeat_until"`
	// Max number of created transactions. Use either this field or repeat_until.
	NrOfRepetitions OptNilInt32 `json:"nr_of_repetitions"`
	// Whether or not to fire the rules after the creation of a transaction.
	ApplyRules OptBool `json:"apply_rules"`
	// If the recurrence is even active.
	Active       OptBool                 `json:"active"`
	Notes        OptNilString            `json:"notes"`
	Repetitions  []RecurrenceRepetition  `json:"repetitions"`
	Transactions []RecurrenceTransaction `json:"transactions"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Recurrence) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Recurrence) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetType returns the value of Type.
func (s *Recurrence) GetType() OptRecurrenceTransactionType {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Recurrence) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Recurrence) GetDescription() OptString {
	return s.Description
}

// GetFirstDate returns the value of FirstDate.
func (s *Recurrence) GetFirstDate() OptDate {
	return s.FirstDate
}

// GetLatestDate returns the value of LatestDate.
func (s *Recurrence) GetLatestDate() OptNilDate {
	return s.LatestDate
}

// GetRepeatUntil returns the value of RepeatUntil.
func (s *Recurrence) GetRepeatUntil() OptNilDate {
	return s.RepeatUntil
}

// GetNrOfRepetitions returns the value of NrOfRepetitions.
func (s *Recurrence) GetNrOfRepetitions() OptNilInt32 {
	return s.NrOfRepetitions
}

// GetApplyRules returns the value of ApplyRules.
func (s *Recurrence) GetApplyRules() OptBool {
	return s.ApplyRules
}

// GetActive returns the value of Active.
func (s *Recurrence) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *Recurrence) GetNotes() OptNilString {
	return s.Notes
}

// GetRepetitions returns the value of Repetitions.
func (s *Recurrence) GetRepetitions() []RecurrenceRepetition {
	return s.Repetitions
}

// GetTransactions returns the value of Transactions.
func (s *Recurrence) GetTransactions() []RecurrenceTransaction {
	return s.Transactions
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Recurrence) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Recurrence) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetType sets the value of Type.
func (s *Recurrence) SetType(val OptRecurrenceTransactionType) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Recurrence) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Recurrence) SetDescription(val OptString) {
	s.Description = val
}

// SetFirstDate sets the value of FirstDate.
func (s *Recurrence) SetFirstDate(val OptDate) {
	s.FirstDate = val
}

// SetLatestDate sets the value of LatestDate.
func (s *Recurrence) SetLatestDate(val OptNilDate) {
	s.LatestDate = val
}

// SetRepeatUntil sets the value of RepeatUntil.
func (s *Recurrence) SetRepeatUntil(val OptNilDate) {
	s.RepeatUntil = val
}

// SetNrOfRepetitions sets the value of NrOfRepetitions.
func (s *Recurrence) SetNrOfRepetitions(val OptNilInt32) {
	s.NrOfRepetitions = val
}

// SetApplyRules sets the value of ApplyRules.
func (s *Recurrence) SetApplyRules(val OptBool) {
	s.ApplyRules = val
}

// SetActive sets the value of Active.
func (s *Recurrence) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *Recurrence) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetRepetitions sets the value of Repetitions.
func (s *Recurrence) SetRepetitions(val []RecurrenceRepetition) {
	s.Repetitions = val
}

// SetTransactions sets the value of Transactions.
func (s *Recurrence) SetTransactions(val []RecurrenceTransaction) {
	s.Transactions = val
}

// Ref: #/components/schemas/RecurrenceArray
type RecurrenceArray struct {
	Data  []RecurrenceRead `json:"data"`
	Meta  Meta             `json:"meta"`
	Links PageLink         `json:"links"`
}

// GetData returns the value of Data.
func (s *RecurrenceArray) GetData() []RecurrenceRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *RecurrenceArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *RecurrenceArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *RecurrenceArray) SetData(val []RecurrenceRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *RecurrenceArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *RecurrenceArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*RecurrenceArray) listRecurrenceByCurrencyRes() {}
func (*RecurrenceArray) listRecurrenceRes()           {}

// Ref: #/components/schemas/RecurrenceRead
type RecurrenceRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes Recurrence `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *RecurrenceRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *RecurrenceRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *RecurrenceRead) GetAttributes() Recurrence {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *RecurrenceRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *RecurrenceRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *RecurrenceRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *RecurrenceRead) SetAttributes(val Recurrence) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *RecurrenceRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/RecurrenceRepetition
type RecurrenceRepetition struct {
	ID        OptString                `json:"id"`
	CreatedAt OptDateTime              `json:"created_at"`
	UpdatedAt OptDateTime              `json:"updated_at"`
	Type      RecurrenceRepetitionType `json:"type"`
	// Information that defined the type of repetition.
	// - For 'daily', this is empty.
	// - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).
	// - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the
	// month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd
	// Wednesday of the month
	// - For 'monthly' it is the day of the month (1 - 31)
	// - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.
	Moment string `json:"moment"`
	// How many occurrences to skip. 0 means skip nothing. 1 means every other.
	Skip OptInt32 `json:"skip"`
	// How to respond when the recurring transaction falls in the weekend. Possible values:
	// 1. Do nothing, just create it
	// 2. Create no transaction.
	// 3. Skip to the previous Friday.
	// 4. Skip to the next Monday.
	Weekend OptInt32 `json:"weekend"`
	// Auto-generated repetition description.
	Description OptString `json:"description"`
	// Array of future dates when the repetition will apply to. Auto generated.
	Occurrences []time.Time `json:"occurrences"`
}

// GetID returns the value of ID.
func (s *RecurrenceRepetition) GetID() OptString {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RecurrenceRepetition) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RecurrenceRepetition) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetType returns the value of Type.
func (s *RecurrenceRepetition) GetType() RecurrenceRepetitionType {
	return s.Type
}

// GetMoment returns the value of Moment.
func (s *RecurrenceRepetition) GetMoment() string {
	return s.Moment
}

// GetSkip returns the value of Skip.
func (s *RecurrenceRepetition) GetSkip() OptInt32 {
	return s.Skip
}

// GetWeekend returns the value of Weekend.
func (s *RecurrenceRepetition) GetWeekend() OptInt32 {
	return s.Weekend
}

// GetDescription returns the value of Description.
func (s *RecurrenceRepetition) GetDescription() OptString {
	return s.Description
}

// GetOccurrences returns the value of Occurrences.
func (s *RecurrenceRepetition) GetOccurrences() []time.Time {
	return s.Occurrences
}

// SetID sets the value of ID.
func (s *RecurrenceRepetition) SetID(val OptString) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RecurrenceRepetition) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RecurrenceRepetition) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetType sets the value of Type.
func (s *RecurrenceRepetition) SetType(val RecurrenceRepetitionType) {
	s.Type = val
}

// SetMoment sets the value of Moment.
func (s *RecurrenceRepetition) SetMoment(val string) {
	s.Moment = val
}

// SetSkip sets the value of Skip.
func (s *RecurrenceRepetition) SetSkip(val OptInt32) {
	s.Skip = val
}

// SetWeekend sets the value of Weekend.
func (s *RecurrenceRepetition) SetWeekend(val OptInt32) {
	s.Weekend = val
}

// SetDescription sets the value of Description.
func (s *RecurrenceRepetition) SetDescription(val OptString) {
	s.Description = val
}

// SetOccurrences sets the value of Occurrences.
func (s *RecurrenceRepetition) SetOccurrences(val []time.Time) {
	s.Occurrences = val
}

// Ref: #/components/schemas/RecurrenceRepetitionStore
type RecurrenceRepetitionStore struct {
	Type RecurrenceRepetitionType `json:"type"`
	// Information that defined the type of repetition.
	// - For 'daily', this is empty.
	// - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).
	// - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the
	// month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd
	// Wednesday of the month
	// - For 'monthly' it is the day of the month (1 - 31)
	// - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.
	Moment string `json:"moment"`
	// How many occurrences to skip. 0 means skip nothing. 1 means every other.
	Skip OptInt32 `json:"skip"`
	// How to respond when the recurring transaction falls in the weekend. Possible values:
	// 1. Do nothing, just create it
	// 2. Create no transaction.
	// 3. Skip to the previous Friday.
	// 4. Skip to the next Monday.
	Weekend OptInt32 `json:"weekend"`
}

// GetType returns the value of Type.
func (s *RecurrenceRepetitionStore) GetType() RecurrenceRepetitionType {
	return s.Type
}

// GetMoment returns the value of Moment.
func (s *RecurrenceRepetitionStore) GetMoment() string {
	return s.Moment
}

// GetSkip returns the value of Skip.
func (s *RecurrenceRepetitionStore) GetSkip() OptInt32 {
	return s.Skip
}

// GetWeekend returns the value of Weekend.
func (s *RecurrenceRepetitionStore) GetWeekend() OptInt32 {
	return s.Weekend
}

// SetType sets the value of Type.
func (s *RecurrenceRepetitionStore) SetType(val RecurrenceRepetitionType) {
	s.Type = val
}

// SetMoment sets the value of Moment.
func (s *RecurrenceRepetitionStore) SetMoment(val string) {
	s.Moment = val
}

// SetSkip sets the value of Skip.
func (s *RecurrenceRepetitionStore) SetSkip(val OptInt32) {
	s.Skip = val
}

// SetWeekend sets the value of Weekend.
func (s *RecurrenceRepetitionStore) SetWeekend(val OptInt32) {
	s.Weekend = val
}

// The type of the repetition. ndom means: the n-th weekday of the month, where you can also specify
// which day of the week.
// Ref: #/components/schemas/RecurrenceRepetitionType
type RecurrenceRepetitionType string

const (
	RecurrenceRepetitionTypeDaily   RecurrenceRepetitionType = "daily"
	RecurrenceRepetitionTypeWeekly  RecurrenceRepetitionType = "weekly"
	RecurrenceRepetitionTypeNdom    RecurrenceRepetitionType = "ndom"
	RecurrenceRepetitionTypeMonthly RecurrenceRepetitionType = "monthly"
	RecurrenceRepetitionTypeYearly  RecurrenceRepetitionType = "yearly"
)

// AllValues returns all RecurrenceRepetitionType values.
func (RecurrenceRepetitionType) AllValues() []RecurrenceRepetitionType {
	return []RecurrenceRepetitionType{
		RecurrenceRepetitionTypeDaily,
		RecurrenceRepetitionTypeWeekly,
		RecurrenceRepetitionTypeNdom,
		RecurrenceRepetitionTypeMonthly,
		RecurrenceRepetitionTypeYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecurrenceRepetitionType) MarshalText() ([]byte, error) {
	switch s {
	case RecurrenceRepetitionTypeDaily:
		return []byte(s), nil
	case RecurrenceRepetitionTypeWeekly:
		return []byte(s), nil
	case RecurrenceRepetitionTypeNdom:
		return []byte(s), nil
	case RecurrenceRepetitionTypeMonthly:
		return []byte(s), nil
	case RecurrenceRepetitionTypeYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecurrenceRepetitionType) UnmarshalText(data []byte) error {
	switch RecurrenceRepetitionType(data) {
	case RecurrenceRepetitionTypeDaily:
		*s = RecurrenceRepetitionTypeDaily
		return nil
	case RecurrenceRepetitionTypeWeekly:
		*s = RecurrenceRepetitionTypeWeekly
		return nil
	case RecurrenceRepetitionTypeNdom:
		*s = RecurrenceRepetitionTypeNdom
		return nil
	case RecurrenceRepetitionTypeMonthly:
		*s = RecurrenceRepetitionTypeMonthly
		return nil
	case RecurrenceRepetitionTypeYearly:
		*s = RecurrenceRepetitionTypeYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RecurrenceRepetitionUpdate
type RecurrenceRepetitionUpdate struct {
	Type OptRecurrenceRepetitionType `json:"type"`
	// Information that defined the type of repetition.
	// - For 'daily', this is empty.
	// - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).
	// - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the
	// month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd
	// Wednesday of the month
	// - For 'monthly' it is the day of the month (1 - 31)
	// - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.
	Moment OptString `json:"moment"`
	// How many occurrences to skip. 0 means skip nothing. 1 means every other.
	Skip OptInt32 `json:"skip"`
	// How to respond when the recurring transaction falls in the weekend. Possible values:
	// 1. Do nothing, just create it
	// 2. Create no transaction.
	// 3. Skip to the previous Friday.
	// 4. Skip to the next Monday.
	Weekend OptInt32 `json:"weekend"`
}

// GetType returns the value of Type.
func (s *RecurrenceRepetitionUpdate) GetType() OptRecurrenceRepetitionType {
	return s.Type
}

// GetMoment returns the value of Moment.
func (s *RecurrenceRepetitionUpdate) GetMoment() OptString {
	return s.Moment
}

// GetSkip returns the value of Skip.
func (s *RecurrenceRepetitionUpdate) GetSkip() OptInt32 {
	return s.Skip
}

// GetWeekend returns the value of Weekend.
func (s *RecurrenceRepetitionUpdate) GetWeekend() OptInt32 {
	return s.Weekend
}

// SetType sets the value of Type.
func (s *RecurrenceRepetitionUpdate) SetType(val OptRecurrenceRepetitionType) {
	s.Type = val
}

// SetMoment sets the value of Moment.
func (s *RecurrenceRepetitionUpdate) SetMoment(val OptString) {
	s.Moment = val
}

// SetSkip sets the value of Skip.
func (s *RecurrenceRepetitionUpdate) SetSkip(val OptInt32) {
	s.Skip = val
}

// SetWeekend sets the value of Weekend.
func (s *RecurrenceRepetitionUpdate) SetWeekend(val OptInt32) {
	s.Weekend = val
}

// Ref: #/components/schemas/RecurrenceSingle
type RecurrenceSingle struct {
	Data RecurrenceRead `json:"data"`
}

// GetData returns the value of Data.
func (s *RecurrenceSingle) GetData() RecurrenceRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecurrenceSingle) SetData(val RecurrenceRead) {
	s.Data = val
}

func (*RecurrenceSingle) getRecurrenceRes()    {}
func (*RecurrenceSingle) storeRecurrenceRes()  {}
func (*RecurrenceSingle) updateRecurrenceRes() {}

// Ref: #/components/schemas/RecurrenceStore
type RecurrenceStore struct {
	Type  RecurrenceTransactionType `json:"type"`
	Title string                    `json:"title"`
	// Not to be confused with the description of the actual transaction(s) being created.
	Description OptString `json:"description"`
	// First time the recurring transaction will fire. Must be after today.
	FirstDate time.Time `json:"first_date"`
	// Date until the recurring transaction can fire. Use either this field or repetitions.
	RepeatUntil NilDate `json:"repeat_until"`
	// Max number of created transactions. Use either this field or repeat_until.
	NrOfRepetitions OptNilInt32 `json:"nr_of_repetitions"`
	// Whether or not to fire the rules after the creation of a transaction.
	ApplyRules OptBool `json:"apply_rules"`
	// If the recurrence is even active.
	Active       OptBool                      `json:"active"`
	Notes        OptNilString                 `json:"notes"`
	Repetitions  []RecurrenceRepetitionStore  `json:"repetitions"`
	Transactions []RecurrenceTransactionStore `json:"transactions"`
}

// GetType returns the value of Type.
func (s *RecurrenceStore) GetType() RecurrenceTransactionType {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *RecurrenceStore) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RecurrenceStore) GetDescription() OptString {
	return s.Description
}

// GetFirstDate returns the value of FirstDate.
func (s *RecurrenceStore) GetFirstDate() time.Time {
	return s.FirstDate
}

// GetRepeatUntil returns the value of RepeatUntil.
func (s *RecurrenceStore) GetRepeatUntil() NilDate {
	return s.RepeatUntil
}

// GetNrOfRepetitions returns the value of NrOfRepetitions.
func (s *RecurrenceStore) GetNrOfRepetitions() OptNilInt32 {
	return s.NrOfRepetitions
}

// GetApplyRules returns the value of ApplyRules.
func (s *RecurrenceStore) GetApplyRules() OptBool {
	return s.ApplyRules
}

// GetActive returns the value of Active.
func (s *RecurrenceStore) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *RecurrenceStore) GetNotes() OptNilString {
	return s.Notes
}

// GetRepetitions returns the value of Repetitions.
func (s *RecurrenceStore) GetRepetitions() []RecurrenceRepetitionStore {
	return s.Repetitions
}

// GetTransactions returns the value of Transactions.
func (s *RecurrenceStore) GetTransactions() []RecurrenceTransactionStore {
	return s.Transactions
}

// SetType sets the value of Type.
func (s *RecurrenceStore) SetType(val RecurrenceTransactionType) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *RecurrenceStore) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RecurrenceStore) SetDescription(val OptString) {
	s.Description = val
}

// SetFirstDate sets the value of FirstDate.
func (s *RecurrenceStore) SetFirstDate(val time.Time) {
	s.FirstDate = val
}

// SetRepeatUntil sets the value of RepeatUntil.
func (s *RecurrenceStore) SetRepeatUntil(val NilDate) {
	s.RepeatUntil = val
}

// SetNrOfRepetitions sets the value of NrOfRepetitions.
func (s *RecurrenceStore) SetNrOfRepetitions(val OptNilInt32) {
	s.NrOfRepetitions = val
}

// SetApplyRules sets the value of ApplyRules.
func (s *RecurrenceStore) SetApplyRules(val OptBool) {
	s.ApplyRules = val
}

// SetActive sets the value of Active.
func (s *RecurrenceStore) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *RecurrenceStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetRepetitions sets the value of Repetitions.
func (s *RecurrenceStore) SetRepetitions(val []RecurrenceRepetitionStore) {
	s.Repetitions = val
}

// SetTransactions sets the value of Transactions.
func (s *RecurrenceStore) SetTransactions(val []RecurrenceTransactionStore) {
	s.Transactions = val
}

// Ref: #/components/schemas/RecurrenceTransaction
type RecurrenceTransaction struct {
	ID          OptString `json:"id"`
	Description string    `json:"description"`
	// Amount of the transaction.
	Amount string `json:"amount"`
	// Foreign amount of the transaction.
	ForeignAmount OptNilString `json:"foreign_amount"`
	// Submit either a currency_id or a currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Submit either a currency_id or a currency_code.
	CurrencyCode   OptString `json:"currency_code"`
	CurrencySymbol OptString `json:"currency_symbol"`
	// Number of decimals in the currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
	// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
	ForeignCurrencyID OptNilString `json:"foreign_currency_id"`
	// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
	ForeignCurrencyCode   OptNilString `json:"foreign_currency_code"`
	ForeignCurrencySymbol OptNilString `json:"foreign_currency_symbol"`
	// Number of decimals in the currency.
	ForeignCurrencyDecimalPlaces OptNilInt32 `json:"foreign_currency_decimal_places"`
	// The budget ID for this transaction.
	BudgetID OptString `json:"budget_id"`
	// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value
	// will be ignored.
	BudgetName OptNilString `json:"budget_name"`
	// Category ID for this transaction.
	CategoryID OptString `json:"category_id"`
	// Category name for this transaction.
	CategoryName OptString `json:"category_name"`
	// ID of the source account. Submit either this or source_name.
	SourceID OptString `json:"source_id"`
	// Name of the source account. Submit either this or source_id.
	SourceName OptString              `json:"source_name"`
	SourceIban OptNilString           `json:"source_iban"`
	SourceType OptAccountTypeProperty `json:"source_type"`
	// ID of the destination account. Submit either this or destination_name.
	DestinationID OptString `json:"destination_id"`
	// Name of the destination account. Submit either this or destination_id.
	DestinationName OptString              `json:"destination_name"`
	DestinationIban OptNilString           `json:"destination_iban"`
	DestinationType OptAccountTypeProperty `json:"destination_type"`
	// Array of tags.
	Tags OptNilStringArray `json:"tags"`
	// Optional. Use either this or the piggy_bank_name.
	PiggyBankID OptNilString `json:"piggy_bank_id"`
	// Optional. Use either this or the piggy_bank_id.
	PiggyBankName OptNilString `json:"piggy_bank_name"`
	// Optional. Use either this or the bill_name.
	BillID OptNilString `json:"bill_id"`
	// Optional. Use either this or the bill_id.
	BillName OptNilString `json:"bill_name"`
}

// GetID returns the value of ID.
func (s *RecurrenceTransaction) GetID() OptString {
	return s.ID
}

// GetDescription returns the value of Description.
func (s *RecurrenceTransaction) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *RecurrenceTransaction) GetAmount() string {
	return s.Amount
}

// GetForeignAmount returns the value of ForeignAmount.
func (s *RecurrenceTransaction) GetForeignAmount() OptNilString {
	return s.ForeignAmount
}

// GetCurrencyID returns the value of CurrencyID.
func (s *RecurrenceTransaction) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *RecurrenceTransaction) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *RecurrenceTransaction) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *RecurrenceTransaction) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetForeignCurrencyID returns the value of ForeignCurrencyID.
func (s *RecurrenceTransaction) GetForeignCurrencyID() OptNilString {
	return s.ForeignCurrencyID
}

// GetForeignCurrencyCode returns the value of ForeignCurrencyCode.
func (s *RecurrenceTransaction) GetForeignCurrencyCode() OptNilString {
	return s.ForeignCurrencyCode
}

// GetForeignCurrencySymbol returns the value of ForeignCurrencySymbol.
func (s *RecurrenceTransaction) GetForeignCurrencySymbol() OptNilString {
	return s.ForeignCurrencySymbol
}

// GetForeignCurrencyDecimalPlaces returns the value of ForeignCurrencyDecimalPlaces.
func (s *RecurrenceTransaction) GetForeignCurrencyDecimalPlaces() OptNilInt32 {
	return s.ForeignCurrencyDecimalPlaces
}

// GetBudgetID returns the value of BudgetID.
func (s *RecurrenceTransaction) GetBudgetID() OptString {
	return s.BudgetID
}

// GetBudgetName returns the value of BudgetName.
func (s *RecurrenceTransaction) GetBudgetName() OptNilString {
	return s.BudgetName
}

// GetCategoryID returns the value of CategoryID.
func (s *RecurrenceTransaction) GetCategoryID() OptString {
	return s.CategoryID
}

// GetCategoryName returns the value of CategoryName.
func (s *RecurrenceTransaction) GetCategoryName() OptString {
	return s.CategoryName
}

// GetSourceID returns the value of SourceID.
func (s *RecurrenceTransaction) GetSourceID() OptString {
	return s.SourceID
}

// GetSourceName returns the value of SourceName.
func (s *RecurrenceTransaction) GetSourceName() OptString {
	return s.SourceName
}

// GetSourceIban returns the value of SourceIban.
func (s *RecurrenceTransaction) GetSourceIban() OptNilString {
	return s.SourceIban
}

// GetSourceType returns the value of SourceType.
func (s *RecurrenceTransaction) GetSourceType() OptAccountTypeProperty {
	return s.SourceType
}

// GetDestinationID returns the value of DestinationID.
func (s *RecurrenceTransaction) GetDestinationID() OptString {
	return s.DestinationID
}

// GetDestinationName returns the value of DestinationName.
func (s *RecurrenceTransaction) GetDestinationName() OptString {
	return s.DestinationName
}

// GetDestinationIban returns the value of DestinationIban.
func (s *RecurrenceTransaction) GetDestinationIban() OptNilString {
	return s.DestinationIban
}

// GetDestinationType returns the value of DestinationType.
func (s *RecurrenceTransaction) GetDestinationType() OptAccountTypeProperty {
	return s.DestinationType
}

// GetTags returns the value of Tags.
func (s *RecurrenceTransaction) GetTags() OptNilStringArray {
	return s.Tags
}

// GetPiggyBankID returns the value of PiggyBankID.
func (s *RecurrenceTransaction) GetPiggyBankID() OptNilString {
	return s.PiggyBankID
}

// GetPiggyBankName returns the value of PiggyBankName.
func (s *RecurrenceTransaction) GetPiggyBankName() OptNilString {
	return s.PiggyBankName
}

// GetBillID returns the value of BillID.
func (s *RecurrenceTransaction) GetBillID() OptNilString {
	return s.BillID
}

// GetBillName returns the value of BillName.
func (s *RecurrenceTransaction) GetBillName() OptNilString {
	return s.BillName
}

// SetID sets the value of ID.
func (s *RecurrenceTransaction) SetID(val OptString) {
	s.ID = val
}

// SetDescription sets the value of Description.
func (s *RecurrenceTransaction) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *RecurrenceTransaction) SetAmount(val string) {
	s.Amount = val
}

// SetForeignAmount sets the value of ForeignAmount.
func (s *RecurrenceTransaction) SetForeignAmount(val OptNilString) {
	s.ForeignAmount = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *RecurrenceTransaction) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *RecurrenceTransaction) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *RecurrenceTransaction) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *RecurrenceTransaction) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetForeignCurrencyID sets the value of ForeignCurrencyID.
func (s *RecurrenceTransaction) SetForeignCurrencyID(val OptNilString) {
	s.ForeignCurrencyID = val
}

// SetForeignCurrencyCode sets the value of ForeignCurrencyCode.
func (s *RecurrenceTransaction) SetForeignCurrencyCode(val OptNilString) {
	s.ForeignCurrencyCode = val
}

// SetForeignCurrencySymbol sets the value of ForeignCurrencySymbol.
func (s *RecurrenceTransaction) SetForeignCurrencySymbol(val OptNilString) {
	s.ForeignCurrencySymbol = val
}

// SetForeignCurrencyDecimalPlaces sets the value of ForeignCurrencyDecimalPlaces.
func (s *RecurrenceTransaction) SetForeignCurrencyDecimalPlaces(val OptNilInt32) {
	s.ForeignCurrencyDecimalPlaces = val
}

// SetBudgetID sets the value of BudgetID.
func (s *RecurrenceTransaction) SetBudgetID(val OptString) {
	s.BudgetID = val
}

// SetBudgetName sets the value of BudgetName.
func (s *RecurrenceTransaction) SetBudgetName(val OptNilString) {
	s.BudgetName = val
}

// SetCategoryID sets the value of CategoryID.
func (s *RecurrenceTransaction) SetCategoryID(val OptString) {
	s.CategoryID = val
}

// SetCategoryName sets the value of CategoryName.
func (s *RecurrenceTransaction) SetCategoryName(val OptString) {
	s.CategoryName = val
}

// SetSourceID sets the value of SourceID.
func (s *RecurrenceTransaction) SetSourceID(val OptString) {
	s.SourceID = val
}

// SetSourceName sets the value of SourceName.
func (s *RecurrenceTransaction) SetSourceName(val OptString) {
	s.SourceName = val
}

// SetSourceIban sets the value of SourceIban.
func (s *RecurrenceTransaction) SetSourceIban(val OptNilString) {
	s.SourceIban = val
}

// SetSourceType sets the value of SourceType.
func (s *RecurrenceTransaction) SetSourceType(val OptAccountTypeProperty) {
	s.SourceType = val
}

// SetDestinationID sets the value of DestinationID.
func (s *RecurrenceTransaction) SetDestinationID(val OptString) {
	s.DestinationID = val
}

// SetDestinationName sets the value of DestinationName.
func (s *RecurrenceTransaction) SetDestinationName(val OptString) {
	s.DestinationName = val
}

// SetDestinationIban sets the value of DestinationIban.
func (s *RecurrenceTransaction) SetDestinationIban(val OptNilString) {
	s.DestinationIban = val
}

// SetDestinationType sets the value of DestinationType.
func (s *RecurrenceTransaction) SetDestinationType(val OptAccountTypeProperty) {
	s.DestinationType = val
}

// SetTags sets the value of Tags.
func (s *RecurrenceTransaction) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetPiggyBankID sets the value of PiggyBankID.
func (s *RecurrenceTransaction) SetPiggyBankID(val OptNilString) {
	s.PiggyBankID = val
}

// SetPiggyBankName sets the value of PiggyBankName.
func (s *RecurrenceTransaction) SetPiggyBankName(val OptNilString) {
	s.PiggyBankName = val
}

// SetBillID sets the value of BillID.
func (s *RecurrenceTransaction) SetBillID(val OptNilString) {
	s.BillID = val
}

// SetBillName sets the value of BillName.
func (s *RecurrenceTransaction) SetBillName(val OptNilString) {
	s.BillName = val
}

// Ref: #/components/schemas/RecurrenceTransactionStore
type RecurrenceTransactionStore struct {
	Description string `json:"description"`
	// Amount of the transaction.
	Amount string `json:"amount"`
	// Foreign amount of the transaction.
	ForeignAmount OptNilString `json:"foreign_amount"`
	// Submit either a currency_id or a currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Submit either a currency_id or a currency_code.
	CurrencyCode OptString `json:"currency_code"`
	// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
	ForeignCurrencyID OptNilString `json:"foreign_currency_id"`
	// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
	ForeignCurrencyCode OptNilString `json:"foreign_currency_code"`
	// The budget ID for this transaction.
	BudgetID OptString `json:"budget_id"`
	// Category ID for this transaction.
	CategoryID OptString `json:"category_id"`
	// ID of the source account.
	SourceID string `json:"source_id"`
	// ID of the destination account.
	DestinationID string `json:"destination_id"`
	// Array of tags.
	Tags OptNilStringArray `json:"tags"`
	// Optional.
	PiggyBankID OptNilString `json:"piggy_bank_id"`
	// Optional.
	BillID OptNilString `json:"bill_id"`
}

// GetDescription returns the value of Description.
func (s *RecurrenceTransactionStore) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *RecurrenceTransactionStore) GetAmount() string {
	return s.Amount
}

// GetForeignAmount returns the value of ForeignAmount.
func (s *RecurrenceTransactionStore) GetForeignAmount() OptNilString {
	return s.ForeignAmount
}

// GetCurrencyID returns the value of CurrencyID.
func (s *RecurrenceTransactionStore) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *RecurrenceTransactionStore) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetForeignCurrencyID returns the value of ForeignCurrencyID.
func (s *RecurrenceTransactionStore) GetForeignCurrencyID() OptNilString {
	return s.ForeignCurrencyID
}

// GetForeignCurrencyCode returns the value of ForeignCurrencyCode.
func (s *RecurrenceTransactionStore) GetForeignCurrencyCode() OptNilString {
	return s.ForeignCurrencyCode
}

// GetBudgetID returns the value of BudgetID.
func (s *RecurrenceTransactionStore) GetBudgetID() OptString {
	return s.BudgetID
}

// GetCategoryID returns the value of CategoryID.
func (s *RecurrenceTransactionStore) GetCategoryID() OptString {
	return s.CategoryID
}

// GetSourceID returns the value of SourceID.
func (s *RecurrenceTransactionStore) GetSourceID() string {
	return s.SourceID
}

// GetDestinationID returns the value of DestinationID.
func (s *RecurrenceTransactionStore) GetDestinationID() string {
	return s.DestinationID
}

// GetTags returns the value of Tags.
func (s *RecurrenceTransactionStore) GetTags() OptNilStringArray {
	return s.Tags
}

// GetPiggyBankID returns the value of PiggyBankID.
func (s *RecurrenceTransactionStore) GetPiggyBankID() OptNilString {
	return s.PiggyBankID
}

// GetBillID returns the value of BillID.
func (s *RecurrenceTransactionStore) GetBillID() OptNilString {
	return s.BillID
}

// SetDescription sets the value of Description.
func (s *RecurrenceTransactionStore) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *RecurrenceTransactionStore) SetAmount(val string) {
	s.Amount = val
}

// SetForeignAmount sets the value of ForeignAmount.
func (s *RecurrenceTransactionStore) SetForeignAmount(val OptNilString) {
	s.ForeignAmount = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *RecurrenceTransactionStore) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *RecurrenceTransactionStore) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetForeignCurrencyID sets the value of ForeignCurrencyID.
func (s *RecurrenceTransactionStore) SetForeignCurrencyID(val OptNilString) {
	s.ForeignCurrencyID = val
}

// SetForeignCurrencyCode sets the value of ForeignCurrencyCode.
func (s *RecurrenceTransactionStore) SetForeignCurrencyCode(val OptNilString) {
	s.ForeignCurrencyCode = val
}

// SetBudgetID sets the value of BudgetID.
func (s *RecurrenceTransactionStore) SetBudgetID(val OptString) {
	s.BudgetID = val
}

// SetCategoryID sets the value of CategoryID.
func (s *RecurrenceTransactionStore) SetCategoryID(val OptString) {
	s.CategoryID = val
}

// SetSourceID sets the value of SourceID.
func (s *RecurrenceTransactionStore) SetSourceID(val string) {
	s.SourceID = val
}

// SetDestinationID sets the value of DestinationID.
func (s *RecurrenceTransactionStore) SetDestinationID(val string) {
	s.DestinationID = val
}

// SetTags sets the value of Tags.
func (s *RecurrenceTransactionStore) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetPiggyBankID sets the value of PiggyBankID.
func (s *RecurrenceTransactionStore) SetPiggyBankID(val OptNilString) {
	s.PiggyBankID = val
}

// SetBillID sets the value of BillID.
func (s *RecurrenceTransactionStore) SetBillID(val OptNilString) {
	s.BillID = val
}

// Ref: #/components/schemas/RecurrenceTransactionType
type RecurrenceTransactionType string

const (
	RecurrenceTransactionTypeWithdrawal RecurrenceTransactionType = "withdrawal"
	RecurrenceTransactionTypeTransfer   RecurrenceTransactionType = "transfer"
	RecurrenceTransactionTypeDeposit    RecurrenceTransactionType = "deposit"
)

// AllValues returns all RecurrenceTransactionType values.
func (RecurrenceTransactionType) AllValues() []RecurrenceTransactionType {
	return []RecurrenceTransactionType{
		RecurrenceTransactionTypeWithdrawal,
		RecurrenceTransactionTypeTransfer,
		RecurrenceTransactionTypeDeposit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecurrenceTransactionType) MarshalText() ([]byte, error) {
	switch s {
	case RecurrenceTransactionTypeWithdrawal:
		return []byte(s), nil
	case RecurrenceTransactionTypeTransfer:
		return []byte(s), nil
	case RecurrenceTransactionTypeDeposit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecurrenceTransactionType) UnmarshalText(data []byte) error {
	switch RecurrenceTransactionType(data) {
	case RecurrenceTransactionTypeWithdrawal:
		*s = RecurrenceTransactionTypeWithdrawal
		return nil
	case RecurrenceTransactionTypeTransfer:
		*s = RecurrenceTransactionTypeTransfer
		return nil
	case RecurrenceTransactionTypeDeposit:
		*s = RecurrenceTransactionTypeDeposit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RecurrenceTransactionUpdate
type RecurrenceTransactionUpdate struct {
	ID          string    `json:"id"`
	Description OptString `json:"description"`
	// Amount of the transaction.
	Amount OptString `json:"amount"`
	// Foreign amount of the transaction.
	ForeignAmount OptNilString `json:"foreign_amount"`
	// Submit either a currency_id or a currency_code.
	CurrencyID OptString `json:"currency_id"`
	// Submit either a currency_id or a currency_code.
	CurrencyCode OptString `json:"currency_code"`
	// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
	ForeignCurrencyID OptNilString `json:"foreign_currency_id"`
	// The budget ID for this transaction.
	BudgetID OptString `json:"budget_id"`
	// Category ID for this transaction.
	CategoryID OptString `json:"category_id"`
	// ID of the source account. Submit either this or source_name.
	SourceID OptString `json:"source_id"`
	// ID of the destination account. Submit either this or destination_name.
	DestinationID OptString `json:"destination_id"`
	// Array of tags.
	Tags        OptNilStringArray `json:"tags"`
	PiggyBankID OptNilString      `json:"piggy_bank_id"`
	// Optional.
	BillID OptNilString `json:"bill_id"`
}

// GetID returns the value of ID.
func (s *RecurrenceTransactionUpdate) GetID() string {
	return s.ID
}

// GetDescription returns the value of Description.
func (s *RecurrenceTransactionUpdate) GetDescription() OptString {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *RecurrenceTransactionUpdate) GetAmount() OptString {
	return s.Amount
}

// GetForeignAmount returns the value of ForeignAmount.
func (s *RecurrenceTransactionUpdate) GetForeignAmount() OptNilString {
	return s.ForeignAmount
}

// GetCurrencyID returns the value of CurrencyID.
func (s *RecurrenceTransactionUpdate) GetCurrencyID() OptString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *RecurrenceTransactionUpdate) GetCurrencyCode() OptString {
	return s.CurrencyCode
}

// GetForeignCurrencyID returns the value of ForeignCurrencyID.
func (s *RecurrenceTransactionUpdate) GetForeignCurrencyID() OptNilString {
	return s.ForeignCurrencyID
}

// GetBudgetID returns the value of BudgetID.
func (s *RecurrenceTransactionUpdate) GetBudgetID() OptString {
	return s.BudgetID
}

// GetCategoryID returns the value of CategoryID.
func (s *RecurrenceTransactionUpdate) GetCategoryID() OptString {
	return s.CategoryID
}

// GetSourceID returns the value of SourceID.
func (s *RecurrenceTransactionUpdate) GetSourceID() OptString {
	return s.SourceID
}

// GetDestinationID returns the value of DestinationID.
func (s *RecurrenceTransactionUpdate) GetDestinationID() OptString {
	return s.DestinationID
}

// GetTags returns the value of Tags.
func (s *RecurrenceTransactionUpdate) GetTags() OptNilStringArray {
	return s.Tags
}

// GetPiggyBankID returns the value of PiggyBankID.
func (s *RecurrenceTransactionUpdate) GetPiggyBankID() OptNilString {
	return s.PiggyBankID
}

// GetBillID returns the value of BillID.
func (s *RecurrenceTransactionUpdate) GetBillID() OptNilString {
	return s.BillID
}

// SetID sets the value of ID.
func (s *RecurrenceTransactionUpdate) SetID(val string) {
	s.ID = val
}

// SetDescription sets the value of Description.
func (s *RecurrenceTransactionUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *RecurrenceTransactionUpdate) SetAmount(val OptString) {
	s.Amount = val
}

// SetForeignAmount sets the value of ForeignAmount.
func (s *RecurrenceTransactionUpdate) SetForeignAmount(val OptNilString) {
	s.ForeignAmount = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *RecurrenceTransactionUpdate) SetCurrencyID(val OptString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *RecurrenceTransactionUpdate) SetCurrencyCode(val OptString) {
	s.CurrencyCode = val
}

// SetForeignCurrencyID sets the value of ForeignCurrencyID.
func (s *RecurrenceTransactionUpdate) SetForeignCurrencyID(val OptNilString) {
	s.ForeignCurrencyID = val
}

// SetBudgetID sets the value of BudgetID.
func (s *RecurrenceTransactionUpdate) SetBudgetID(val OptString) {
	s.BudgetID = val
}

// SetCategoryID sets the value of CategoryID.
func (s *RecurrenceTransactionUpdate) SetCategoryID(val OptString) {
	s.CategoryID = val
}

// SetSourceID sets the value of SourceID.
func (s *RecurrenceTransactionUpdate) SetSourceID(val OptString) {
	s.SourceID = val
}

// SetDestinationID sets the value of DestinationID.
func (s *RecurrenceTransactionUpdate) SetDestinationID(val OptString) {
	s.DestinationID = val
}

// SetTags sets the value of Tags.
func (s *RecurrenceTransactionUpdate) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetPiggyBankID sets the value of PiggyBankID.
func (s *RecurrenceTransactionUpdate) SetPiggyBankID(val OptNilString) {
	s.PiggyBankID = val
}

// SetBillID sets the value of BillID.
func (s *RecurrenceTransactionUpdate) SetBillID(val OptNilString) {
	s.BillID = val
}

// Ref: #/components/schemas/RecurrenceUpdate
type RecurrenceUpdate struct {
	Title OptString `json:"title"`
	// Not to be confused with the description of the actual transaction(s) being created.
	Description OptString `json:"description"`
	// First time the recurring transaction will fire.
	FirstDate OptDate `json:"first_date"`
	// Date until the recurring transaction can fire. After that date, it's basically inactive. Use
	// either this field or repetitions.
	RepeatUntil OptNilDate `json:"repeat_until"`
	// Max number of created transactions. Use either this field or repeat_until.
	NrOfRepetitions OptNilInt32 `json:"nr_of_repetitions"`
	// Whether or not to fire the rules after the creation of a transaction.
	ApplyRules OptBool `json:"apply_rules"`
	// If the recurrence is even active.
	Active       OptBool                       `json:"active"`
	Notes        OptNilString                  `json:"notes"`
	Repetitions  []RecurrenceRepetitionUpdate  `json:"repetitions"`
	Transactions []RecurrenceTransactionUpdate `json:"transactions"`
}

// GetTitle returns the value of Title.
func (s *RecurrenceUpdate) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RecurrenceUpdate) GetDescription() OptString {
	return s.Description
}

// GetFirstDate returns the value of FirstDate.
func (s *RecurrenceUpdate) GetFirstDate() OptDate {
	return s.FirstDate
}

// GetRepeatUntil returns the value of RepeatUntil.
func (s *RecurrenceUpdate) GetRepeatUntil() OptNilDate {
	return s.RepeatUntil
}

// GetNrOfRepetitions returns the value of NrOfRepetitions.
func (s *RecurrenceUpdate) GetNrOfRepetitions() OptNilInt32 {
	return s.NrOfRepetitions
}

// GetApplyRules returns the value of ApplyRules.
func (s *RecurrenceUpdate) GetApplyRules() OptBool {
	return s.ApplyRules
}

// GetActive returns the value of Active.
func (s *RecurrenceUpdate) GetActive() OptBool {
	return s.Active
}

// GetNotes returns the value of Notes.
func (s *RecurrenceUpdate) GetNotes() OptNilString {
	return s.Notes
}

// GetRepetitions returns the value of Repetitions.
func (s *RecurrenceUpdate) GetRepetitions() []RecurrenceRepetitionUpdate {
	return s.Repetitions
}

// GetTransactions returns the value of Transactions.
func (s *RecurrenceUpdate) GetTransactions() []RecurrenceTransactionUpdate {
	return s.Transactions
}

// SetTitle sets the value of Title.
func (s *RecurrenceUpdate) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RecurrenceUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetFirstDate sets the value of FirstDate.
func (s *RecurrenceUpdate) SetFirstDate(val OptDate) {
	s.FirstDate = val
}

// SetRepeatUntil sets the value of RepeatUntil.
func (s *RecurrenceUpdate) SetRepeatUntil(val OptNilDate) {
	s.RepeatUntil = val
}

// SetNrOfRepetitions sets the value of NrOfRepetitions.
func (s *RecurrenceUpdate) SetNrOfRepetitions(val OptNilInt32) {
	s.NrOfRepetitions = val
}

// SetApplyRules sets the value of ApplyRules.
func (s *RecurrenceUpdate) SetApplyRules(val OptBool) {
	s.ApplyRules = val
}

// SetActive sets the value of Active.
func (s *RecurrenceUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetNotes sets the value of Notes.
func (s *RecurrenceUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetRepetitions sets the value of Repetitions.
func (s *RecurrenceUpdate) SetRepetitions(val []RecurrenceRepetitionUpdate) {
	s.Repetitions = val
}

// SetTransactions sets the value of Transactions.
func (s *RecurrenceUpdate) SetTransactions(val []RecurrenceTransactionUpdate) {
	s.Transactions = val
}

// Ref: #/components/schemas/Rule
type Rule struct {
	CreatedAt   OptDateTime `json:"created_at"`
	UpdatedAt   OptDateTime `json:"updated_at"`
	Title       string      `json:"title"`
	Description OptString   `json:"description"`
	// ID of the rule group under which the rule must be stored. Either this field or rule_group_title is
	// mandatory.
	RuleGroupID string `json:"rule_group_id"`
	// Title of the rule group under which the rule must be stored. Either this field or rule_group_id is
	// mandatory.
	RuleGroupTitle OptString       `json:"rule_group_title"`
	Order          OptInt32        `json:"order"`
	Trigger        RuleTriggerType `json:"trigger"`
	// Whether or not the rule is even active. Default is true.
	Active OptBool `json:"active"`
	// If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise,
	// just one is enough. Default value is true.
	Strict OptBool `json:"strict"`
	// If this value is true and the rule is triggered, other rules  after this one in the group will be
	// skipped. Default value is false.
	StopProcessing OptBool       `json:"stop_processing"`
	Triggers       []RuleTrigger `json:"triggers"`
	Actions        []RuleAction  `json:"actions"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Rule) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Rule) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetTitle returns the value of Title.
func (s *Rule) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Rule) GetDescription() OptString {
	return s.Description
}

// GetRuleGroupID returns the value of RuleGroupID.
func (s *Rule) GetRuleGroupID() string {
	return s.RuleGroupID
}

// GetRuleGroupTitle returns the value of RuleGroupTitle.
func (s *Rule) GetRuleGroupTitle() OptString {
	return s.RuleGroupTitle
}

// GetOrder returns the value of Order.
func (s *Rule) GetOrder() OptInt32 {
	return s.Order
}

// GetTrigger returns the value of Trigger.
func (s *Rule) GetTrigger() RuleTriggerType {
	return s.Trigger
}

// GetActive returns the value of Active.
func (s *Rule) GetActive() OptBool {
	return s.Active
}

// GetStrict returns the value of Strict.
func (s *Rule) GetStrict() OptBool {
	return s.Strict
}

// GetStopProcessing returns the value of StopProcessing.
func (s *Rule) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// GetTriggers returns the value of Triggers.
func (s *Rule) GetTriggers() []RuleTrigger {
	return s.Triggers
}

// GetActions returns the value of Actions.
func (s *Rule) GetActions() []RuleAction {
	return s.Actions
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Rule) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Rule) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetTitle sets the value of Title.
func (s *Rule) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Rule) SetDescription(val OptString) {
	s.Description = val
}

// SetRuleGroupID sets the value of RuleGroupID.
func (s *Rule) SetRuleGroupID(val string) {
	s.RuleGroupID = val
}

// SetRuleGroupTitle sets the value of RuleGroupTitle.
func (s *Rule) SetRuleGroupTitle(val OptString) {
	s.RuleGroupTitle = val
}

// SetOrder sets the value of Order.
func (s *Rule) SetOrder(val OptInt32) {
	s.Order = val
}

// SetTrigger sets the value of Trigger.
func (s *Rule) SetTrigger(val RuleTriggerType) {
	s.Trigger = val
}

// SetActive sets the value of Active.
func (s *Rule) SetActive(val OptBool) {
	s.Active = val
}

// SetStrict sets the value of Strict.
func (s *Rule) SetStrict(val OptBool) {
	s.Strict = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *Rule) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// SetTriggers sets the value of Triggers.
func (s *Rule) SetTriggers(val []RuleTrigger) {
	s.Triggers = val
}

// SetActions sets the value of Actions.
func (s *Rule) SetActions(val []RuleAction) {
	s.Actions = val
}

// Ref: #/components/schemas/RuleAction
type RuleAction struct {
	ID        OptString         `json:"id"`
	CreatedAt OptDateTime       `json:"created_at"`
	UpdatedAt OptDateTime       `json:"updated_at"`
	Type      RuleActionKeyword `json:"type"`
	// The accompanying value the action will set, change or update. Can be empty, but for some types
	// this value is mandatory.
	Value NilString `json:"value"`
	// Order of the action.
	Order OptInt32 `json:"order"`
	// If the action is active. Defaults to true.
	Active OptBool `json:"active"`
	// When true, other actions will not be fired after this action has fired. Defaults to false.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetID returns the value of ID.
func (s *RuleAction) GetID() OptString {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RuleAction) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RuleAction) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetType returns the value of Type.
func (s *RuleAction) GetType() RuleActionKeyword {
	return s.Type
}

// GetValue returns the value of Value.
func (s *RuleAction) GetValue() NilString {
	return s.Value
}

// GetOrder returns the value of Order.
func (s *RuleAction) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleAction) GetActive() OptBool {
	return s.Active
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleAction) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetID sets the value of ID.
func (s *RuleAction) SetID(val OptString) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RuleAction) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RuleAction) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetType sets the value of Type.
func (s *RuleAction) SetType(val RuleActionKeyword) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *RuleAction) SetValue(val NilString) {
	s.Value = val
}

// SetOrder sets the value of Order.
func (s *RuleAction) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleAction) SetActive(val OptBool) {
	s.Active = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleAction) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// The type of thing this action will do. A limited set is possible.
// Ref: #/components/schemas/RuleActionKeyword
type RuleActionKeyword string

const (
	RuleActionKeywordUserAction            RuleActionKeyword = "user_action"
	RuleActionKeywordSetCategory           RuleActionKeyword = "set_category"
	RuleActionKeywordClearCategory         RuleActionKeyword = "clear_category"
	RuleActionKeywordSetBudget             RuleActionKeyword = "set_budget"
	RuleActionKeywordClearBudget           RuleActionKeyword = "clear_budget"
	RuleActionKeywordAddTag                RuleActionKeyword = "add_tag"
	RuleActionKeywordRemoveTag             RuleActionKeyword = "remove_tag"
	RuleActionKeywordRemoveAllTags         RuleActionKeyword = "remove_all_tags"
	RuleActionKeywordSetDescription        RuleActionKeyword = "set_description"
	RuleActionKeywordAppendDescription     RuleActionKeyword = "append_description"
	RuleActionKeywordPrependDescription    RuleActionKeyword = "prepend_description"
	RuleActionKeywordSetSourceAccount      RuleActionKeyword = "set_source_account"
	RuleActionKeywordSetDestinationAccount RuleActionKeyword = "set_destination_account"
	RuleActionKeywordSetNotes              RuleActionKeyword = "set_notes"
	RuleActionKeywordAppendNotes           RuleActionKeyword = "append_notes"
	RuleActionKeywordPrependNotes          RuleActionKeyword = "prepend_notes"
	RuleActionKeywordClearNotes            RuleActionKeyword = "clear_notes"
	RuleActionKeywordLinkToBill            RuleActionKeyword = "link_to_bill"
	RuleActionKeywordConvertWithdrawal     RuleActionKeyword = "convert_withdrawal"
	RuleActionKeywordConvertDeposit        RuleActionKeyword = "convert_deposit"
	RuleActionKeywordConvertTransfer       RuleActionKeyword = "convert_transfer"
	RuleActionKeywordDeleteTransaction     RuleActionKeyword = "delete_transaction"
)

// AllValues returns all RuleActionKeyword values.
func (RuleActionKeyword) AllValues() []RuleActionKeyword {
	return []RuleActionKeyword{
		RuleActionKeywordUserAction,
		RuleActionKeywordSetCategory,
		RuleActionKeywordClearCategory,
		RuleActionKeywordSetBudget,
		RuleActionKeywordClearBudget,
		RuleActionKeywordAddTag,
		RuleActionKeywordRemoveTag,
		RuleActionKeywordRemoveAllTags,
		RuleActionKeywordSetDescription,
		RuleActionKeywordAppendDescription,
		RuleActionKeywordPrependDescription,
		RuleActionKeywordSetSourceAccount,
		RuleActionKeywordSetDestinationAccount,
		RuleActionKeywordSetNotes,
		RuleActionKeywordAppendNotes,
		RuleActionKeywordPrependNotes,
		RuleActionKeywordClearNotes,
		RuleActionKeywordLinkToBill,
		RuleActionKeywordConvertWithdrawal,
		RuleActionKeywordConvertDeposit,
		RuleActionKeywordConvertTransfer,
		RuleActionKeywordDeleteTransaction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleActionKeyword) MarshalText() ([]byte, error) {
	switch s {
	case RuleActionKeywordUserAction:
		return []byte(s), nil
	case RuleActionKeywordSetCategory:
		return []byte(s), nil
	case RuleActionKeywordClearCategory:
		return []byte(s), nil
	case RuleActionKeywordSetBudget:
		return []byte(s), nil
	case RuleActionKeywordClearBudget:
		return []byte(s), nil
	case RuleActionKeywordAddTag:
		return []byte(s), nil
	case RuleActionKeywordRemoveTag:
		return []byte(s), nil
	case RuleActionKeywordRemoveAllTags:
		return []byte(s), nil
	case RuleActionKeywordSetDescription:
		return []byte(s), nil
	case RuleActionKeywordAppendDescription:
		return []byte(s), nil
	case RuleActionKeywordPrependDescription:
		return []byte(s), nil
	case RuleActionKeywordSetSourceAccount:
		return []byte(s), nil
	case RuleActionKeywordSetDestinationAccount:
		return []byte(s), nil
	case RuleActionKeywordSetNotes:
		return []byte(s), nil
	case RuleActionKeywordAppendNotes:
		return []byte(s), nil
	case RuleActionKeywordPrependNotes:
		return []byte(s), nil
	case RuleActionKeywordClearNotes:
		return []byte(s), nil
	case RuleActionKeywordLinkToBill:
		return []byte(s), nil
	case RuleActionKeywordConvertWithdrawal:
		return []byte(s), nil
	case RuleActionKeywordConvertDeposit:
		return []byte(s), nil
	case RuleActionKeywordConvertTransfer:
		return []byte(s), nil
	case RuleActionKeywordDeleteTransaction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleActionKeyword) UnmarshalText(data []byte) error {
	switch RuleActionKeyword(data) {
	case RuleActionKeywordUserAction:
		*s = RuleActionKeywordUserAction
		return nil
	case RuleActionKeywordSetCategory:
		*s = RuleActionKeywordSetCategory
		return nil
	case RuleActionKeywordClearCategory:
		*s = RuleActionKeywordClearCategory
		return nil
	case RuleActionKeywordSetBudget:
		*s = RuleActionKeywordSetBudget
		return nil
	case RuleActionKeywordClearBudget:
		*s = RuleActionKeywordClearBudget
		return nil
	case RuleActionKeywordAddTag:
		*s = RuleActionKeywordAddTag
		return nil
	case RuleActionKeywordRemoveTag:
		*s = RuleActionKeywordRemoveTag
		return nil
	case RuleActionKeywordRemoveAllTags:
		*s = RuleActionKeywordRemoveAllTags
		return nil
	case RuleActionKeywordSetDescription:
		*s = RuleActionKeywordSetDescription
		return nil
	case RuleActionKeywordAppendDescription:
		*s = RuleActionKeywordAppendDescription
		return nil
	case RuleActionKeywordPrependDescription:
		*s = RuleActionKeywordPrependDescription
		return nil
	case RuleActionKeywordSetSourceAccount:
		*s = RuleActionKeywordSetSourceAccount
		return nil
	case RuleActionKeywordSetDestinationAccount:
		*s = RuleActionKeywordSetDestinationAccount
		return nil
	case RuleActionKeywordSetNotes:
		*s = RuleActionKeywordSetNotes
		return nil
	case RuleActionKeywordAppendNotes:
		*s = RuleActionKeywordAppendNotes
		return nil
	case RuleActionKeywordPrependNotes:
		*s = RuleActionKeywordPrependNotes
		return nil
	case RuleActionKeywordClearNotes:
		*s = RuleActionKeywordClearNotes
		return nil
	case RuleActionKeywordLinkToBill:
		*s = RuleActionKeywordLinkToBill
		return nil
	case RuleActionKeywordConvertWithdrawal:
		*s = RuleActionKeywordConvertWithdrawal
		return nil
	case RuleActionKeywordConvertDeposit:
		*s = RuleActionKeywordConvertDeposit
		return nil
	case RuleActionKeywordConvertTransfer:
		*s = RuleActionKeywordConvertTransfer
		return nil
	case RuleActionKeywordDeleteTransaction:
		*s = RuleActionKeywordDeleteTransaction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RuleActionStore
type RuleActionStore struct {
	Type RuleActionKeyword `json:"type"`
	// The accompanying value the action will set, change or update. Can be empty, but for some types
	// this value is mandatory.
	Value NilString `json:"value"`
	// Order of the action.
	Order OptInt32 `json:"order"`
	// If the action is active. Defaults to true.
	Active OptBool `json:"active"`
	// When true, other actions will not be fired after this action has fired. Defaults to false.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetType returns the value of Type.
func (s *RuleActionStore) GetType() RuleActionKeyword {
	return s.Type
}

// GetValue returns the value of Value.
func (s *RuleActionStore) GetValue() NilString {
	return s.Value
}

// GetOrder returns the value of Order.
func (s *RuleActionStore) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleActionStore) GetActive() OptBool {
	return s.Active
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleActionStore) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetType sets the value of Type.
func (s *RuleActionStore) SetType(val RuleActionKeyword) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *RuleActionStore) SetValue(val NilString) {
	s.Value = val
}

// SetOrder sets the value of Order.
func (s *RuleActionStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleActionStore) SetActive(val OptBool) {
	s.Active = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleActionStore) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// Ref: #/components/schemas/RuleActionUpdate
type RuleActionUpdate struct {
	Type OptRuleActionKeyword `json:"type"`
	// The accompanying value the action will set, change or update. Can be empty, but for some types
	// this value is mandatory.
	Value OptNilString `json:"value"`
	// Order of the action.
	Order OptInt32 `json:"order"`
	// If the action is active.
	Active OptBool `json:"active"`
	// When true, other actions will not be fired after this action has fired.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetType returns the value of Type.
func (s *RuleActionUpdate) GetType() OptRuleActionKeyword {
	return s.Type
}

// GetValue returns the value of Value.
func (s *RuleActionUpdate) GetValue() OptNilString {
	return s.Value
}

// GetOrder returns the value of Order.
func (s *RuleActionUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleActionUpdate) GetActive() OptBool {
	return s.Active
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleActionUpdate) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetType sets the value of Type.
func (s *RuleActionUpdate) SetType(val OptRuleActionKeyword) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *RuleActionUpdate) SetValue(val OptNilString) {
	s.Value = val
}

// SetOrder sets the value of Order.
func (s *RuleActionUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleActionUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleActionUpdate) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// Ref: #/components/schemas/RuleArray
type RuleArray struct {
	Data  []RuleRead `json:"data"`
	Meta  Meta       `json:"meta"`
	Links PageLink   `json:"links"`
}

// GetData returns the value of Data.
func (s *RuleArray) GetData() []RuleRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *RuleArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *RuleArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *RuleArray) SetData(val []RuleRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *RuleArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *RuleArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*RuleArray) listRuleByBillRes()     {}
func (*RuleArray) listRuleByCurrencyRes() {}
func (*RuleArray) listRuleByGroupRes()    {}
func (*RuleArray) listRuleRes()           {}

// Ref: #/components/schemas/RuleGroup
type RuleGroup struct {
	CreatedAt   OptDateTime  `json:"created_at"`
	UpdatedAt   OptDateTime  `json:"updated_at"`
	Title       string       `json:"title"`
	Description OptNilString `json:"description"`
	Order       OptInt32     `json:"order"`
	Active      OptBool      `json:"active"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RuleGroup) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RuleGroup) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetTitle returns the value of Title.
func (s *RuleGroup) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RuleGroup) GetDescription() OptNilString {
	return s.Description
}

// GetOrder returns the value of Order.
func (s *RuleGroup) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleGroup) GetActive() OptBool {
	return s.Active
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RuleGroup) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RuleGroup) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetTitle sets the value of Title.
func (s *RuleGroup) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RuleGroup) SetDescription(val OptNilString) {
	s.Description = val
}

// SetOrder sets the value of Order.
func (s *RuleGroup) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleGroup) SetActive(val OptBool) {
	s.Active = val
}

// Ref: #/components/schemas/RuleGroupArray
type RuleGroupArray struct {
	Data  []RuleGroupRead `json:"data"`
	Meta  Meta            `json:"meta"`
	Links PageLink        `json:"links"`
}

// GetData returns the value of Data.
func (s *RuleGroupArray) GetData() []RuleGroupRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *RuleGroupArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *RuleGroupArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *RuleGroupArray) SetData(val []RuleGroupRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *RuleGroupArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *RuleGroupArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*RuleGroupArray) listRuleGroupRes() {}

// Ref: #/components/schemas/RuleGroupRead
type RuleGroupRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes RuleGroup  `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *RuleGroupRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *RuleGroupRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *RuleGroupRead) GetAttributes() RuleGroup {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *RuleGroupRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *RuleGroupRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *RuleGroupRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *RuleGroupRead) SetAttributes(val RuleGroup) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *RuleGroupRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/RuleGroupSingle
type RuleGroupSingle struct {
	Data RuleGroupRead `json:"data"`
}

// GetData returns the value of Data.
func (s *RuleGroupSingle) GetData() RuleGroupRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *RuleGroupSingle) SetData(val RuleGroupRead) {
	s.Data = val
}

func (*RuleGroupSingle) getRuleGroupRes()    {}
func (*RuleGroupSingle) storeRuleGroupRes()  {}
func (*RuleGroupSingle) updateRuleGroupRes() {}

// Ref: #/components/schemas/RuleGroupStore
type RuleGroupStore struct {
	Title       string       `json:"title"`
	Description OptNilString `json:"description"`
	Order       OptInt32     `json:"order"`
	Active      OptBool      `json:"active"`
}

// GetTitle returns the value of Title.
func (s *RuleGroupStore) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RuleGroupStore) GetDescription() OptNilString {
	return s.Description
}

// GetOrder returns the value of Order.
func (s *RuleGroupStore) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleGroupStore) GetActive() OptBool {
	return s.Active
}

// SetTitle sets the value of Title.
func (s *RuleGroupStore) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RuleGroupStore) SetDescription(val OptNilString) {
	s.Description = val
}

// SetOrder sets the value of Order.
func (s *RuleGroupStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleGroupStore) SetActive(val OptBool) {
	s.Active = val
}

// Ref: #/components/schemas/RuleGroupUpdate
type RuleGroupUpdate struct {
	Title       OptString    `json:"title"`
	Description OptNilString `json:"description"`
	Order       OptInt32     `json:"order"`
	Active      OptBool      `json:"active"`
}

// GetTitle returns the value of Title.
func (s *RuleGroupUpdate) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RuleGroupUpdate) GetDescription() OptNilString {
	return s.Description
}

// GetOrder returns the value of Order.
func (s *RuleGroupUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleGroupUpdate) GetActive() OptBool {
	return s.Active
}

// SetTitle sets the value of Title.
func (s *RuleGroupUpdate) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RuleGroupUpdate) SetDescription(val OptNilString) {
	s.Description = val
}

// SetOrder sets the value of Order.
func (s *RuleGroupUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleGroupUpdate) SetActive(val OptBool) {
	s.Active = val
}

// Ref: #/components/schemas/RuleRead
type RuleRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes Rule       `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *RuleRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *RuleRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *RuleRead) GetAttributes() Rule {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *RuleRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *RuleRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *RuleRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *RuleRead) SetAttributes(val Rule) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *RuleRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/RuleSingle
type RuleSingle struct {
	Data RuleRead `json:"data"`
}

// GetData returns the value of Data.
func (s *RuleSingle) GetData() RuleRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *RuleSingle) SetData(val RuleRead) {
	s.Data = val
}

func (*RuleSingle) getRuleRes()    {}
func (*RuleSingle) storeRuleRes()  {}
func (*RuleSingle) updateRuleRes() {}

// Ref: #/components/schemas/RuleStore
type RuleStore struct {
	Title       string    `json:"title"`
	Description OptString `json:"description"`
	// ID of the rule group under which the rule must be stored. Either this field or rule_group_title is
	// mandatory.
	RuleGroupID string `json:"rule_group_id"`
	// Title of the rule group under which the rule must be stored. Either this field or rule_group_id is
	// mandatory.
	RuleGroupTitle OptString       `json:"rule_group_title"`
	Order          OptInt32        `json:"order"`
	Trigger        RuleTriggerType `json:"trigger"`
	// Whether or not the rule is even active. Default is true.
	Active OptBool `json:"active"`
	// If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise,
	// just one is enough. Default value is true.
	Strict OptBool `json:"strict"`
	// If this value is true and the rule is triggered, other rules  after this one in the group will be
	// skipped. Default value is false.
	StopProcessing OptBool            `json:"stop_processing"`
	Triggers       []RuleTriggerStore `json:"triggers"`
	Actions        []RuleActionStore  `json:"actions"`
}

// GetTitle returns the value of Title.
func (s *RuleStore) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RuleStore) GetDescription() OptString {
	return s.Description
}

// GetRuleGroupID returns the value of RuleGroupID.
func (s *RuleStore) GetRuleGroupID() string {
	return s.RuleGroupID
}

// GetRuleGroupTitle returns the value of RuleGroupTitle.
func (s *RuleStore) GetRuleGroupTitle() OptString {
	return s.RuleGroupTitle
}

// GetOrder returns the value of Order.
func (s *RuleStore) GetOrder() OptInt32 {
	return s.Order
}

// GetTrigger returns the value of Trigger.
func (s *RuleStore) GetTrigger() RuleTriggerType {
	return s.Trigger
}

// GetActive returns the value of Active.
func (s *RuleStore) GetActive() OptBool {
	return s.Active
}

// GetStrict returns the value of Strict.
func (s *RuleStore) GetStrict() OptBool {
	return s.Strict
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleStore) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// GetTriggers returns the value of Triggers.
func (s *RuleStore) GetTriggers() []RuleTriggerStore {
	return s.Triggers
}

// GetActions returns the value of Actions.
func (s *RuleStore) GetActions() []RuleActionStore {
	return s.Actions
}

// SetTitle sets the value of Title.
func (s *RuleStore) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RuleStore) SetDescription(val OptString) {
	s.Description = val
}

// SetRuleGroupID sets the value of RuleGroupID.
func (s *RuleStore) SetRuleGroupID(val string) {
	s.RuleGroupID = val
}

// SetRuleGroupTitle sets the value of RuleGroupTitle.
func (s *RuleStore) SetRuleGroupTitle(val OptString) {
	s.RuleGroupTitle = val
}

// SetOrder sets the value of Order.
func (s *RuleStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetTrigger sets the value of Trigger.
func (s *RuleStore) SetTrigger(val RuleTriggerType) {
	s.Trigger = val
}

// SetActive sets the value of Active.
func (s *RuleStore) SetActive(val OptBool) {
	s.Active = val
}

// SetStrict sets the value of Strict.
func (s *RuleStore) SetStrict(val OptBool) {
	s.Strict = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleStore) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// SetTriggers sets the value of Triggers.
func (s *RuleStore) SetTriggers(val []RuleTriggerStore) {
	s.Triggers = val
}

// SetActions sets the value of Actions.
func (s *RuleStore) SetActions(val []RuleActionStore) {
	s.Actions = val
}

// Ref: #/components/schemas/RuleTrigger
type RuleTrigger struct {
	ID        OptString          `json:"id"`
	CreatedAt OptDateTime        `json:"created_at"`
	UpdatedAt OptDateTime        `json:"updated_at"`
	Type      RuleTriggerKeyword `json:"type"`
	// The accompanying value the triggers responds to. This value is often mandatory, but this depends
	// on the triggers.
	Value string `json:"value"`
	// Order of the triggers.
	Order OptInt32 `json:"order"`
	// If the triggers is active. Defaults to true.
	Active OptBool `json:"active"`
	// When true, other triggers will not be checked if this triggers was triggered. Defaults to false.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetID returns the value of ID.
func (s *RuleTrigger) GetID() OptString {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RuleTrigger) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RuleTrigger) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetType returns the value of Type.
func (s *RuleTrigger) GetType() RuleTriggerKeyword {
	return s.Type
}

// GetValue returns the value of Value.
func (s *RuleTrigger) GetValue() string {
	return s.Value
}

// GetOrder returns the value of Order.
func (s *RuleTrigger) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleTrigger) GetActive() OptBool {
	return s.Active
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleTrigger) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetID sets the value of ID.
func (s *RuleTrigger) SetID(val OptString) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RuleTrigger) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RuleTrigger) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetType sets the value of Type.
func (s *RuleTrigger) SetType(val RuleTriggerKeyword) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *RuleTrigger) SetValue(val string) {
	s.Value = val
}

// SetOrder sets the value of Order.
func (s *RuleTrigger) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleTrigger) SetActive(val OptBool) {
	s.Active = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleTrigger) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// The type of thing this triggers responds to. A limited set is possible.
// Ref: #/components/schemas/RuleTriggerKeyword
type RuleTriggerKeyword string

const (
	RuleTriggerKeywordFromAccountStarts    RuleTriggerKeyword = "from_account_starts"
	RuleTriggerKeywordFromAccountEnds      RuleTriggerKeyword = "from_account_ends"
	RuleTriggerKeywordFromAccountIs        RuleTriggerKeyword = "from_account_is"
	RuleTriggerKeywordFromAccountContains  RuleTriggerKeyword = "from_account_contains"
	RuleTriggerKeywordToAccountStarts      RuleTriggerKeyword = "to_account_starts"
	RuleTriggerKeywordToAccountEnds        RuleTriggerKeyword = "to_account_ends"
	RuleTriggerKeywordToAccountIs          RuleTriggerKeyword = "to_account_is"
	RuleTriggerKeywordToAccountContains    RuleTriggerKeyword = "to_account_contains"
	RuleTriggerKeywordAmountLess           RuleTriggerKeyword = "amount_less"
	RuleTriggerKeywordAmountExactly        RuleTriggerKeyword = "amount_exactly"
	RuleTriggerKeywordAmountMore           RuleTriggerKeyword = "amount_more"
	RuleTriggerKeywordDescriptionStarts    RuleTriggerKeyword = "description_starts"
	RuleTriggerKeywordDescriptionEnds      RuleTriggerKeyword = "description_ends"
	RuleTriggerKeywordDescriptionContains  RuleTriggerKeyword = "description_contains"
	RuleTriggerKeywordDescriptionIs        RuleTriggerKeyword = "description_is"
	RuleTriggerKeywordTransactionType      RuleTriggerKeyword = "transaction_type"
	RuleTriggerKeywordCategoryIs           RuleTriggerKeyword = "category_is"
	RuleTriggerKeywordBudgetIs             RuleTriggerKeyword = "budget_is"
	RuleTriggerKeywordTagIs                RuleTriggerKeyword = "tag_is"
	RuleTriggerKeywordCurrencyIs           RuleTriggerKeyword = "currency_is"
	RuleTriggerKeywordHasAttachments       RuleTriggerKeyword = "has_attachments"
	RuleTriggerKeywordHasNoCategory        RuleTriggerKeyword = "has_no_category"
	RuleTriggerKeywordHasAnyCategory       RuleTriggerKeyword = "has_any_category"
	RuleTriggerKeywordHasNoBudget          RuleTriggerKeyword = "has_no_budget"
	RuleTriggerKeywordHasAnyBudget         RuleTriggerKeyword = "has_any_budget"
	RuleTriggerKeywordHasNoTag             RuleTriggerKeyword = "has_no_tag"
	RuleTriggerKeywordHasAnyTag            RuleTriggerKeyword = "has_any_tag"
	RuleTriggerKeywordNotesContains        RuleTriggerKeyword = "notes_contains"
	RuleTriggerKeywordNotesStart           RuleTriggerKeyword = "notes_start"
	RuleTriggerKeywordNotesEnd             RuleTriggerKeyword = "notes_end"
	RuleTriggerKeywordNotesAre             RuleTriggerKeyword = "notes_are"
	RuleTriggerKeywordNoNotes              RuleTriggerKeyword = "no_notes"
	RuleTriggerKeywordAnyNotes             RuleTriggerKeyword = "any_notes"
	RuleTriggerKeywordSourceAccountIs      RuleTriggerKeyword = "source_account_is"
	RuleTriggerKeywordDestinationAccountIs RuleTriggerKeyword = "destination_account_is"
	RuleTriggerKeywordSourceAccountStarts  RuleTriggerKeyword = "source_account_starts"
)

// AllValues returns all RuleTriggerKeyword values.
func (RuleTriggerKeyword) AllValues() []RuleTriggerKeyword {
	return []RuleTriggerKeyword{
		RuleTriggerKeywordFromAccountStarts,
		RuleTriggerKeywordFromAccountEnds,
		RuleTriggerKeywordFromAccountIs,
		RuleTriggerKeywordFromAccountContains,
		RuleTriggerKeywordToAccountStarts,
		RuleTriggerKeywordToAccountEnds,
		RuleTriggerKeywordToAccountIs,
		RuleTriggerKeywordToAccountContains,
		RuleTriggerKeywordAmountLess,
		RuleTriggerKeywordAmountExactly,
		RuleTriggerKeywordAmountMore,
		RuleTriggerKeywordDescriptionStarts,
		RuleTriggerKeywordDescriptionEnds,
		RuleTriggerKeywordDescriptionContains,
		RuleTriggerKeywordDescriptionIs,
		RuleTriggerKeywordTransactionType,
		RuleTriggerKeywordCategoryIs,
		RuleTriggerKeywordBudgetIs,
		RuleTriggerKeywordTagIs,
		RuleTriggerKeywordCurrencyIs,
		RuleTriggerKeywordHasAttachments,
		RuleTriggerKeywordHasNoCategory,
		RuleTriggerKeywordHasAnyCategory,
		RuleTriggerKeywordHasNoBudget,
		RuleTriggerKeywordHasAnyBudget,
		RuleTriggerKeywordHasNoTag,
		RuleTriggerKeywordHasAnyTag,
		RuleTriggerKeywordNotesContains,
		RuleTriggerKeywordNotesStart,
		RuleTriggerKeywordNotesEnd,
		RuleTriggerKeywordNotesAre,
		RuleTriggerKeywordNoNotes,
		RuleTriggerKeywordAnyNotes,
		RuleTriggerKeywordSourceAccountIs,
		RuleTriggerKeywordDestinationAccountIs,
		RuleTriggerKeywordSourceAccountStarts,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleTriggerKeyword) MarshalText() ([]byte, error) {
	switch s {
	case RuleTriggerKeywordFromAccountStarts:
		return []byte(s), nil
	case RuleTriggerKeywordFromAccountEnds:
		return []byte(s), nil
	case RuleTriggerKeywordFromAccountIs:
		return []byte(s), nil
	case RuleTriggerKeywordFromAccountContains:
		return []byte(s), nil
	case RuleTriggerKeywordToAccountStarts:
		return []byte(s), nil
	case RuleTriggerKeywordToAccountEnds:
		return []byte(s), nil
	case RuleTriggerKeywordToAccountIs:
		return []byte(s), nil
	case RuleTriggerKeywordToAccountContains:
		return []byte(s), nil
	case RuleTriggerKeywordAmountLess:
		return []byte(s), nil
	case RuleTriggerKeywordAmountExactly:
		return []byte(s), nil
	case RuleTriggerKeywordAmountMore:
		return []byte(s), nil
	case RuleTriggerKeywordDescriptionStarts:
		return []byte(s), nil
	case RuleTriggerKeywordDescriptionEnds:
		return []byte(s), nil
	case RuleTriggerKeywordDescriptionContains:
		return []byte(s), nil
	case RuleTriggerKeywordDescriptionIs:
		return []byte(s), nil
	case RuleTriggerKeywordTransactionType:
		return []byte(s), nil
	case RuleTriggerKeywordCategoryIs:
		return []byte(s), nil
	case RuleTriggerKeywordBudgetIs:
		return []byte(s), nil
	case RuleTriggerKeywordTagIs:
		return []byte(s), nil
	case RuleTriggerKeywordCurrencyIs:
		return []byte(s), nil
	case RuleTriggerKeywordHasAttachments:
		return []byte(s), nil
	case RuleTriggerKeywordHasNoCategory:
		return []byte(s), nil
	case RuleTriggerKeywordHasAnyCategory:
		return []byte(s), nil
	case RuleTriggerKeywordHasNoBudget:
		return []byte(s), nil
	case RuleTriggerKeywordHasAnyBudget:
		return []byte(s), nil
	case RuleTriggerKeywordHasNoTag:
		return []byte(s), nil
	case RuleTriggerKeywordHasAnyTag:
		return []byte(s), nil
	case RuleTriggerKeywordNotesContains:
		return []byte(s), nil
	case RuleTriggerKeywordNotesStart:
		return []byte(s), nil
	case RuleTriggerKeywordNotesEnd:
		return []byte(s), nil
	case RuleTriggerKeywordNotesAre:
		return []byte(s), nil
	case RuleTriggerKeywordNoNotes:
		return []byte(s), nil
	case RuleTriggerKeywordAnyNotes:
		return []byte(s), nil
	case RuleTriggerKeywordSourceAccountIs:
		return []byte(s), nil
	case RuleTriggerKeywordDestinationAccountIs:
		return []byte(s), nil
	case RuleTriggerKeywordSourceAccountStarts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleTriggerKeyword) UnmarshalText(data []byte) error {
	switch RuleTriggerKeyword(data) {
	case RuleTriggerKeywordFromAccountStarts:
		*s = RuleTriggerKeywordFromAccountStarts
		return nil
	case RuleTriggerKeywordFromAccountEnds:
		*s = RuleTriggerKeywordFromAccountEnds
		return nil
	case RuleTriggerKeywordFromAccountIs:
		*s = RuleTriggerKeywordFromAccountIs
		return nil
	case RuleTriggerKeywordFromAccountContains:
		*s = RuleTriggerKeywordFromAccountContains
		return nil
	case RuleTriggerKeywordToAccountStarts:
		*s = RuleTriggerKeywordToAccountStarts
		return nil
	case RuleTriggerKeywordToAccountEnds:
		*s = RuleTriggerKeywordToAccountEnds
		return nil
	case RuleTriggerKeywordToAccountIs:
		*s = RuleTriggerKeywordToAccountIs
		return nil
	case RuleTriggerKeywordToAccountContains:
		*s = RuleTriggerKeywordToAccountContains
		return nil
	case RuleTriggerKeywordAmountLess:
		*s = RuleTriggerKeywordAmountLess
		return nil
	case RuleTriggerKeywordAmountExactly:
		*s = RuleTriggerKeywordAmountExactly
		return nil
	case RuleTriggerKeywordAmountMore:
		*s = RuleTriggerKeywordAmountMore
		return nil
	case RuleTriggerKeywordDescriptionStarts:
		*s = RuleTriggerKeywordDescriptionStarts
		return nil
	case RuleTriggerKeywordDescriptionEnds:
		*s = RuleTriggerKeywordDescriptionEnds
		return nil
	case RuleTriggerKeywordDescriptionContains:
		*s = RuleTriggerKeywordDescriptionContains
		return nil
	case RuleTriggerKeywordDescriptionIs:
		*s = RuleTriggerKeywordDescriptionIs
		return nil
	case RuleTriggerKeywordTransactionType:
		*s = RuleTriggerKeywordTransactionType
		return nil
	case RuleTriggerKeywordCategoryIs:
		*s = RuleTriggerKeywordCategoryIs
		return nil
	case RuleTriggerKeywordBudgetIs:
		*s = RuleTriggerKeywordBudgetIs
		return nil
	case RuleTriggerKeywordTagIs:
		*s = RuleTriggerKeywordTagIs
		return nil
	case RuleTriggerKeywordCurrencyIs:
		*s = RuleTriggerKeywordCurrencyIs
		return nil
	case RuleTriggerKeywordHasAttachments:
		*s = RuleTriggerKeywordHasAttachments
		return nil
	case RuleTriggerKeywordHasNoCategory:
		*s = RuleTriggerKeywordHasNoCategory
		return nil
	case RuleTriggerKeywordHasAnyCategory:
		*s = RuleTriggerKeywordHasAnyCategory
		return nil
	case RuleTriggerKeywordHasNoBudget:
		*s = RuleTriggerKeywordHasNoBudget
		return nil
	case RuleTriggerKeywordHasAnyBudget:
		*s = RuleTriggerKeywordHasAnyBudget
		return nil
	case RuleTriggerKeywordHasNoTag:
		*s = RuleTriggerKeywordHasNoTag
		return nil
	case RuleTriggerKeywordHasAnyTag:
		*s = RuleTriggerKeywordHasAnyTag
		return nil
	case RuleTriggerKeywordNotesContains:
		*s = RuleTriggerKeywordNotesContains
		return nil
	case RuleTriggerKeywordNotesStart:
		*s = RuleTriggerKeywordNotesStart
		return nil
	case RuleTriggerKeywordNotesEnd:
		*s = RuleTriggerKeywordNotesEnd
		return nil
	case RuleTriggerKeywordNotesAre:
		*s = RuleTriggerKeywordNotesAre
		return nil
	case RuleTriggerKeywordNoNotes:
		*s = RuleTriggerKeywordNoNotes
		return nil
	case RuleTriggerKeywordAnyNotes:
		*s = RuleTriggerKeywordAnyNotes
		return nil
	case RuleTriggerKeywordSourceAccountIs:
		*s = RuleTriggerKeywordSourceAccountIs
		return nil
	case RuleTriggerKeywordDestinationAccountIs:
		*s = RuleTriggerKeywordDestinationAccountIs
		return nil
	case RuleTriggerKeywordSourceAccountStarts:
		*s = RuleTriggerKeywordSourceAccountStarts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RuleTriggerStore
type RuleTriggerStore struct {
	Type RuleTriggerKeyword `json:"type"`
	// The accompanying value the triggers responds to. This value is often mandatory, but this depends
	// on the triggers.
	Value string `json:"value"`
	// Order of the triggers.
	Order OptInt32 `json:"order"`
	// If the triggers is active. Defaults to true.
	Active OptBool `json:"active"`
	// When true, other triggers will not be checked if this triggers was triggered. Defaults to false.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetType returns the value of Type.
func (s *RuleTriggerStore) GetType() RuleTriggerKeyword {
	return s.Type
}

// GetValue returns the value of Value.
func (s *RuleTriggerStore) GetValue() string {
	return s.Value
}

// GetOrder returns the value of Order.
func (s *RuleTriggerStore) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleTriggerStore) GetActive() OptBool {
	return s.Active
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleTriggerStore) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetType sets the value of Type.
func (s *RuleTriggerStore) SetType(val RuleTriggerKeyword) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *RuleTriggerStore) SetValue(val string) {
	s.Value = val
}

// SetOrder sets the value of Order.
func (s *RuleTriggerStore) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleTriggerStore) SetActive(val OptBool) {
	s.Active = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleTriggerStore) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// Which action is necessary for the rule to fire? Use either store-journal or update-journal.
// Ref: #/components/schemas/RuleTriggerType
type RuleTriggerType string

const (
	RuleTriggerTypeStoreJournal  RuleTriggerType = "store-journal"
	RuleTriggerTypeUpdateJournal RuleTriggerType = "update-journal"
)

// AllValues returns all RuleTriggerType values.
func (RuleTriggerType) AllValues() []RuleTriggerType {
	return []RuleTriggerType{
		RuleTriggerTypeStoreJournal,
		RuleTriggerTypeUpdateJournal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleTriggerType) MarshalText() ([]byte, error) {
	switch s {
	case RuleTriggerTypeStoreJournal:
		return []byte(s), nil
	case RuleTriggerTypeUpdateJournal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleTriggerType) UnmarshalText(data []byte) error {
	switch RuleTriggerType(data) {
	case RuleTriggerTypeStoreJournal:
		*s = RuleTriggerTypeStoreJournal
		return nil
	case RuleTriggerTypeUpdateJournal:
		*s = RuleTriggerTypeUpdateJournal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RuleTriggerUpdate
type RuleTriggerUpdate struct {
	Type OptRuleTriggerKeyword `json:"type"`
	// The accompanying value the triggers responds to. This value is often mandatory, but this depends
	// on the triggers.
	Value OptString `json:"value"`
	// Order of the triggers.
	Order OptInt32 `json:"order"`
	// If the triggers is active.
	Active OptBool `json:"active"`
	// When true, other triggers will not be checked if this triggers was triggered.
	StopProcessing OptBool `json:"stop_processing"`
}

// GetType returns the value of Type.
func (s *RuleTriggerUpdate) GetType() OptRuleTriggerKeyword {
	return s.Type
}

// GetValue returns the value of Value.
func (s *RuleTriggerUpdate) GetValue() OptString {
	return s.Value
}

// GetOrder returns the value of Order.
func (s *RuleTriggerUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetActive returns the value of Active.
func (s *RuleTriggerUpdate) GetActive() OptBool {
	return s.Active
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleTriggerUpdate) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// SetType sets the value of Type.
func (s *RuleTriggerUpdate) SetType(val OptRuleTriggerKeyword) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *RuleTriggerUpdate) SetValue(val OptString) {
	s.Value = val
}

// SetOrder sets the value of Order.
func (s *RuleTriggerUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetActive sets the value of Active.
func (s *RuleTriggerUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleTriggerUpdate) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// Ref: #/components/schemas/RuleUpdate
type RuleUpdate struct {
	Title       OptString `json:"title"`
	Description OptString `json:"description"`
	// ID of the rule group under which the rule must be stored. Either this field or rule_group_title is
	// mandatory.
	RuleGroupID OptString          `json:"rule_group_id"`
	Order       OptInt32           `json:"order"`
	Trigger     OptRuleTriggerType `json:"trigger"`
	// Whether or not the rule is even active. Default is true.
	Active OptBool `json:"active"`
	// If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise,
	// just one is enough. Default value is true.
	Strict OptBool `json:"strict"`
	// If this value is true and the rule is triggered, other rules  after this one in the group will be
	// skipped. Default value is false.
	StopProcessing OptBool             `json:"stop_processing"`
	Triggers       []RuleTriggerUpdate `json:"triggers"`
	Actions        []RuleActionUpdate  `json:"actions"`
}

// GetTitle returns the value of Title.
func (s *RuleUpdate) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *RuleUpdate) GetDescription() OptString {
	return s.Description
}

// GetRuleGroupID returns the value of RuleGroupID.
func (s *RuleUpdate) GetRuleGroupID() OptString {
	return s.RuleGroupID
}

// GetOrder returns the value of Order.
func (s *RuleUpdate) GetOrder() OptInt32 {
	return s.Order
}

// GetTrigger returns the value of Trigger.
func (s *RuleUpdate) GetTrigger() OptRuleTriggerType {
	return s.Trigger
}

// GetActive returns the value of Active.
func (s *RuleUpdate) GetActive() OptBool {
	return s.Active
}

// GetStrict returns the value of Strict.
func (s *RuleUpdate) GetStrict() OptBool {
	return s.Strict
}

// GetStopProcessing returns the value of StopProcessing.
func (s *RuleUpdate) GetStopProcessing() OptBool {
	return s.StopProcessing
}

// GetTriggers returns the value of Triggers.
func (s *RuleUpdate) GetTriggers() []RuleTriggerUpdate {
	return s.Triggers
}

// GetActions returns the value of Actions.
func (s *RuleUpdate) GetActions() []RuleActionUpdate {
	return s.Actions
}

// SetTitle sets the value of Title.
func (s *RuleUpdate) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *RuleUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetRuleGroupID sets the value of RuleGroupID.
func (s *RuleUpdate) SetRuleGroupID(val OptString) {
	s.RuleGroupID = val
}

// SetOrder sets the value of Order.
func (s *RuleUpdate) SetOrder(val OptInt32) {
	s.Order = val
}

// SetTrigger sets the value of Trigger.
func (s *RuleUpdate) SetTrigger(val OptRuleTriggerType) {
	s.Trigger = val
}

// SetActive sets the value of Active.
func (s *RuleUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetStrict sets the value of Strict.
func (s *RuleUpdate) SetStrict(val OptBool) {
	s.Strict = val
}

// SetStopProcessing sets the value of StopProcessing.
func (s *RuleUpdate) SetStopProcessing(val OptBool) {
	s.StopProcessing = val
}

// SetTriggers sets the value of Triggers.
func (s *RuleUpdate) SetTriggers(val []RuleTriggerUpdate) {
	s.Triggers = val
}

// SetActions sets the value of Actions.
func (s *RuleUpdate) SetActions(val []RuleActionUpdate) {
	s.Actions = val
}

// Can only be one one these account types. import, initial-balance and reconciliation cannot be set
// manually.
// Ref: #/components/schemas/ShortAccountTypeProperty
type ShortAccountTypeProperty string

const (
	ShortAccountTypePropertyAsset          ShortAccountTypeProperty = "asset"
	ShortAccountTypePropertyExpense        ShortAccountTypeProperty = "expense"
	ShortAccountTypePropertyImport         ShortAccountTypeProperty = "import"
	ShortAccountTypePropertyRevenue        ShortAccountTypeProperty = "revenue"
	ShortAccountTypePropertyCash           ShortAccountTypeProperty = "cash"
	ShortAccountTypePropertyLiability      ShortAccountTypeProperty = "liability"
	ShortAccountTypePropertyLiabilities    ShortAccountTypeProperty = "liabilities"
	ShortAccountTypePropertyInitialBalance ShortAccountTypeProperty = "initial-balance"
	ShortAccountTypePropertyReconciliation ShortAccountTypeProperty = "reconciliation"
)

// AllValues returns all ShortAccountTypeProperty values.
func (ShortAccountTypeProperty) AllValues() []ShortAccountTypeProperty {
	return []ShortAccountTypeProperty{
		ShortAccountTypePropertyAsset,
		ShortAccountTypePropertyExpense,
		ShortAccountTypePropertyImport,
		ShortAccountTypePropertyRevenue,
		ShortAccountTypePropertyCash,
		ShortAccountTypePropertyLiability,
		ShortAccountTypePropertyLiabilities,
		ShortAccountTypePropertyInitialBalance,
		ShortAccountTypePropertyReconciliation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShortAccountTypeProperty) MarshalText() ([]byte, error) {
	switch s {
	case ShortAccountTypePropertyAsset:
		return []byte(s), nil
	case ShortAccountTypePropertyExpense:
		return []byte(s), nil
	case ShortAccountTypePropertyImport:
		return []byte(s), nil
	case ShortAccountTypePropertyRevenue:
		return []byte(s), nil
	case ShortAccountTypePropertyCash:
		return []byte(s), nil
	case ShortAccountTypePropertyLiability:
		return []byte(s), nil
	case ShortAccountTypePropertyLiabilities:
		return []byte(s), nil
	case ShortAccountTypePropertyInitialBalance:
		return []byte(s), nil
	case ShortAccountTypePropertyReconciliation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShortAccountTypeProperty) UnmarshalText(data []byte) error {
	switch ShortAccountTypeProperty(data) {
	case ShortAccountTypePropertyAsset:
		*s = ShortAccountTypePropertyAsset
		return nil
	case ShortAccountTypePropertyExpense:
		*s = ShortAccountTypePropertyExpense
		return nil
	case ShortAccountTypePropertyImport:
		*s = ShortAccountTypePropertyImport
		return nil
	case ShortAccountTypePropertyRevenue:
		*s = ShortAccountTypePropertyRevenue
		return nil
	case ShortAccountTypePropertyCash:
		*s = ShortAccountTypePropertyCash
		return nil
	case ShortAccountTypePropertyLiability:
		*s = ShortAccountTypePropertyLiability
		return nil
	case ShortAccountTypePropertyLiabilities:
		*s = ShortAccountTypePropertyLiabilities
		return nil
	case ShortAccountTypePropertyInitialBalance:
		*s = ShortAccountTypePropertyInitialBalance
		return nil
	case ShortAccountTypePropertyReconciliation:
		*s = ShortAccountTypePropertyReconciliation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StringArrayItem string

// SubmitWebookInternalServerError is response for SubmitWebook operation.
type SubmitWebookInternalServerError struct{}

func (*SubmitWebookInternalServerError) submitWebookRes() {}

// SubmitWebookNoContent is response for SubmitWebook operation.
type SubmitWebookNoContent struct{}

func (*SubmitWebookNoContent) submitWebookRes() {}

// SubmitWebookNotFound is response for SubmitWebook operation.
type SubmitWebookNotFound struct{}

func (*SubmitWebookNotFound) submitWebookRes() {}

// SubmitWebookOK is response for SubmitWebook operation.
type SubmitWebookOK struct{}

func (*SubmitWebookOK) submitWebookRes() {}

// Ref: #/components/schemas/SystemInfo
type SystemInfo struct {
	Data OptSystemInfoData `json:"data"`
}

// GetData returns the value of Data.
func (s *SystemInfo) GetData() OptSystemInfoData {
	return s.Data
}

// SetData sets the value of Data.
func (s *SystemInfo) SetData(val OptSystemInfoData) {
	s.Data = val
}

func (*SystemInfo) getAboutRes() {}

type SystemInfoData struct {
	Version    OptString `json:"version"`
	APIVersion OptString `json:"api_version"`
	PhpVersion OptString `json:"php_version"`
	Os         OptString `json:"os"`
	Driver     OptString `json:"driver"`
}

// GetVersion returns the value of Version.
func (s *SystemInfoData) GetVersion() OptString {
	return s.Version
}

// GetAPIVersion returns the value of APIVersion.
func (s *SystemInfoData) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetPhpVersion returns the value of PhpVersion.
func (s *SystemInfoData) GetPhpVersion() OptString {
	return s.PhpVersion
}

// GetOs returns the value of Os.
func (s *SystemInfoData) GetOs() OptString {
	return s.Os
}

// GetDriver returns the value of Driver.
func (s *SystemInfoData) GetDriver() OptString {
	return s.Driver
}

// SetVersion sets the value of Version.
func (s *SystemInfoData) SetVersion(val OptString) {
	s.Version = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *SystemInfoData) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetPhpVersion sets the value of PhpVersion.
func (s *SystemInfoData) SetPhpVersion(val OptString) {
	s.PhpVersion = val
}

// SetOs sets the value of Os.
func (s *SystemInfoData) SetOs(val OptString) {
	s.Os = val
}

// SetDriver sets the value of Driver.
func (s *SystemInfoData) SetDriver(val OptString) {
	s.Driver = val
}

// Ref: #/components/schemas/TagArray
type TagArray struct {
	Data  []TagRead `json:"data"`
	Meta  Meta      `json:"meta"`
	Links PageLink  `json:"links"`
}

// GetData returns the value of Data.
func (s *TagArray) GetData() []TagRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *TagArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *TagArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *TagArray) SetData(val []TagRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *TagArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *TagArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*TagArray) listTagRes() {}

// Ref: #/components/schemas/TagModel
type TagModel struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// The tag.
	Tag string `json:"tag"`
	// The date to which the tag is applicable.
	Date        OptNilDate   `json:"date"`
	Description OptNilString `json:"description"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TagModel) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TagModel) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetTag returns the value of Tag.
func (s *TagModel) GetTag() string {
	return s.Tag
}

// GetDate returns the value of Date.
func (s *TagModel) GetDate() OptNilDate {
	return s.Date
}

// GetDescription returns the value of Description.
func (s *TagModel) GetDescription() OptNilString {
	return s.Description
}

// GetLatitude returns the value of Latitude.
func (s *TagModel) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *TagModel) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *TagModel) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TagModel) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TagModel) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetTag sets the value of Tag.
func (s *TagModel) SetTag(val string) {
	s.Tag = val
}

// SetDate sets the value of Date.
func (s *TagModel) SetDate(val OptNilDate) {
	s.Date = val
}

// SetDescription sets the value of Description.
func (s *TagModel) SetDescription(val OptNilString) {
	s.Description = val
}

// SetLatitude sets the value of Latitude.
func (s *TagModel) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *TagModel) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *TagModel) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// Ref: #/components/schemas/TagModelStore
type TagModelStore struct {
	// The tag.
	Tag string `json:"tag"`
	// The date to which the tag is applicable.
	Date        OptNilDate   `json:"date"`
	Description OptNilString `json:"description"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
}

// GetTag returns the value of Tag.
func (s *TagModelStore) GetTag() string {
	return s.Tag
}

// GetDate returns the value of Date.
func (s *TagModelStore) GetDate() OptNilDate {
	return s.Date
}

// GetDescription returns the value of Description.
func (s *TagModelStore) GetDescription() OptNilString {
	return s.Description
}

// GetLatitude returns the value of Latitude.
func (s *TagModelStore) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *TagModelStore) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *TagModelStore) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// SetTag sets the value of Tag.
func (s *TagModelStore) SetTag(val string) {
	s.Tag = val
}

// SetDate sets the value of Date.
func (s *TagModelStore) SetDate(val OptNilDate) {
	s.Date = val
}

// SetDescription sets the value of Description.
func (s *TagModelStore) SetDescription(val OptNilString) {
	s.Description = val
}

// SetLatitude sets the value of Latitude.
func (s *TagModelStore) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *TagModelStore) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *TagModelStore) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// Ref: #/components/schemas/TagModelUpdate
type TagModelUpdate struct {
	// The tag.
	Tag OptString `json:"tag"`
	// The date to which the tag is applicable.
	Date        OptNilDate   `json:"date"`
	Description OptNilString `json:"description"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
}

// GetTag returns the value of Tag.
func (s *TagModelUpdate) GetTag() OptString {
	return s.Tag
}

// GetDate returns the value of Date.
func (s *TagModelUpdate) GetDate() OptNilDate {
	return s.Date
}

// GetDescription returns the value of Description.
func (s *TagModelUpdate) GetDescription() OptNilString {
	return s.Description
}

// GetLatitude returns the value of Latitude.
func (s *TagModelUpdate) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *TagModelUpdate) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *TagModelUpdate) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// SetTag sets the value of Tag.
func (s *TagModelUpdate) SetTag(val OptString) {
	s.Tag = val
}

// SetDate sets the value of Date.
func (s *TagModelUpdate) SetDate(val OptNilDate) {
	s.Date = val
}

// SetDescription sets the value of Description.
func (s *TagModelUpdate) SetDescription(val OptNilString) {
	s.Description = val
}

// SetLatitude sets the value of Latitude.
func (s *TagModelUpdate) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *TagModelUpdate) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *TagModelUpdate) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// Ref: #/components/schemas/TagRead
type TagRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes TagModel   `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *TagRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *TagRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *TagRead) GetAttributes() TagModel {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *TagRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *TagRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *TagRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *TagRead) SetAttributes(val TagModel) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *TagRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/TagSingle
type TagSingle struct {
	Data TagRead `json:"data"`
}

// GetData returns the value of Data.
func (s *TagSingle) GetData() TagRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *TagSingle) SetData(val TagRead) {
	s.Data = val
}

func (*TagSingle) getTagRes()    {}
func (*TagSingle) storeTagRes()  {}
func (*TagSingle) updateTagRes() {}

// Ref: #/components/schemas/Transaction
type Transaction struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// User ID.
	User OptString `json:"user"`
	// Title of the transaction if it has been split in more than one piece. Empty otherwise.
	GroupTitle   OptNilString       `json:"group_title"`
	Transactions []TransactionSplit `json:"transactions"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Transaction) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Transaction) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetUser returns the value of User.
func (s *Transaction) GetUser() OptString {
	return s.User
}

// GetGroupTitle returns the value of GroupTitle.
func (s *Transaction) GetGroupTitle() OptNilString {
	return s.GroupTitle
}

// GetTransactions returns the value of Transactions.
func (s *Transaction) GetTransactions() []TransactionSplit {
	return s.Transactions
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Transaction) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Transaction) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetUser sets the value of User.
func (s *Transaction) SetUser(val OptString) {
	s.User = val
}

// SetGroupTitle sets the value of GroupTitle.
func (s *Transaction) SetGroupTitle(val OptNilString) {
	s.GroupTitle = val
}

// SetTransactions sets the value of Transactions.
func (s *Transaction) SetTransactions(val []TransactionSplit) {
	s.Transactions = val
}

// Ref: #/components/schemas/TransactionArray
type TransactionArray struct {
	Data  []TransactionRead `json:"data"`
	Meta  Meta              `json:"meta"`
	Links PageLink          `json:"links"`
}

// GetData returns the value of Data.
func (s *TransactionArray) GetData() []TransactionRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *TransactionArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *TransactionArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *TransactionArray) SetData(val []TransactionRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *TransactionArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *TransactionArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*TransactionArray) listTransactionByAccountRes()     {}
func (*TransactionArray) listTransactionByBillRes()        {}
func (*TransactionArray) listTransactionByBudgetLimitRes() {}
func (*TransactionArray) listTransactionByBudgetRes()      {}
func (*TransactionArray) listTransactionByCategoryRes()    {}
func (*TransactionArray) listTransactionByCurrencyRes()    {}
func (*TransactionArray) listTransactionByLinkTypeRes()    {}
func (*TransactionArray) listTransactionByRecurrenceRes()  {}
func (*TransactionArray) listTransactionByTagRes()         {}
func (*TransactionArray) listTransactionRes()              {}
func (*TransactionArray) searchTransactionsRes()           {}
func (*TransactionArray) testRuleGroupRes()                {}
func (*TransactionArray) testRuleRes()                     {}

// Ref: #/components/schemas/TransactionLink
type TransactionLink struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// The link type ID to use. You can also use the link_type_name field.
	LinkTypeID string `json:"link_type_id"`
	// The link type name to use. You can also use the link_type_id field.
	LinkTypeName OptString `json:"link_type_name"`
	// The inward transaction transaction_journal_id for the link. This becomes the 'is paid by'
	// transaction of the set.
	InwardID string `json:"inward_id"`
	// The outward transaction transaction_journal_id for the link. This becomes the 'pays for'
	// transaction of the set.
	OutwardID string `json:"outward_id"`
	// Optional. Some notes.
	Notes OptNilString `json:"notes"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TransactionLink) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TransactionLink) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetLinkTypeID returns the value of LinkTypeID.
func (s *TransactionLink) GetLinkTypeID() string {
	return s.LinkTypeID
}

// GetLinkTypeName returns the value of LinkTypeName.
func (s *TransactionLink) GetLinkTypeName() OptString {
	return s.LinkTypeName
}

// GetInwardID returns the value of InwardID.
func (s *TransactionLink) GetInwardID() string {
	return s.InwardID
}

// GetOutwardID returns the value of OutwardID.
func (s *TransactionLink) GetOutwardID() string {
	return s.OutwardID
}

// GetNotes returns the value of Notes.
func (s *TransactionLink) GetNotes() OptNilString {
	return s.Notes
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TransactionLink) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TransactionLink) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetLinkTypeID sets the value of LinkTypeID.
func (s *TransactionLink) SetLinkTypeID(val string) {
	s.LinkTypeID = val
}

// SetLinkTypeName sets the value of LinkTypeName.
func (s *TransactionLink) SetLinkTypeName(val OptString) {
	s.LinkTypeName = val
}

// SetInwardID sets the value of InwardID.
func (s *TransactionLink) SetInwardID(val string) {
	s.InwardID = val
}

// SetOutwardID sets the value of OutwardID.
func (s *TransactionLink) SetOutwardID(val string) {
	s.OutwardID = val
}

// SetNotes sets the value of Notes.
func (s *TransactionLink) SetNotes(val OptNilString) {
	s.Notes = val
}

// Ref: #/components/schemas/TransactionLinkArray
type TransactionLinkArray struct {
	Data  []TransactionLinkRead `json:"data"`
	Meta  Meta                  `json:"meta"`
	Links PageLink              `json:"links"`
}

// GetData returns the value of Data.
func (s *TransactionLinkArray) GetData() []TransactionLinkRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *TransactionLinkArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *TransactionLinkArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *TransactionLinkArray) SetData(val []TransactionLinkRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *TransactionLinkArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *TransactionLinkArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*TransactionLinkArray) listLinksByJournalRes()  {}
func (*TransactionLinkArray) listTransactionLinkRes() {}

// Ref: #/components/schemas/TransactionLinkRead
type TransactionLinkRead struct {
	// Immutable value.
	Type       string          `json:"type"`
	ID         string          `json:"id"`
	Attributes TransactionLink `json:"attributes"`
	Links      ObjectLink      `json:"links"`
}

// GetType returns the value of Type.
func (s *TransactionLinkRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *TransactionLinkRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *TransactionLinkRead) GetAttributes() TransactionLink {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *TransactionLinkRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *TransactionLinkRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *TransactionLinkRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *TransactionLinkRead) SetAttributes(val TransactionLink) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *TransactionLinkRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/TransactionLinkSingle
type TransactionLinkSingle struct {
	Data TransactionLinkRead `json:"data"`
}

// GetData returns the value of Data.
func (s *TransactionLinkSingle) GetData() TransactionLinkRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *TransactionLinkSingle) SetData(val TransactionLinkRead) {
	s.Data = val
}

func (*TransactionLinkSingle) getTransactionLinkRes()    {}
func (*TransactionLinkSingle) storeTransactionLinkRes()  {}
func (*TransactionLinkSingle) updateTransactionLinkRes() {}

// Ref: #/components/schemas/TransactionLinkStore
type TransactionLinkStore struct {
	// The link type ID to use. You can also use the link_type_name field.
	LinkTypeID string `json:"link_type_id"`
	// The link type name to use. You can also use the link_type_id field.
	LinkTypeName OptString `json:"link_type_name"`
	// The inward transaction transaction_journal_id for the link. This becomes the 'is paid by'
	// transaction of the set.
	InwardID string `json:"inward_id"`
	// The outward transaction transaction_journal_id for the link. This becomes the 'pays for'
	// transaction of the set.
	OutwardID string `json:"outward_id"`
	// Optional. Some notes.
	Notes OptNilString `json:"notes"`
}

// GetLinkTypeID returns the value of LinkTypeID.
func (s *TransactionLinkStore) GetLinkTypeID() string {
	return s.LinkTypeID
}

// GetLinkTypeName returns the value of LinkTypeName.
func (s *TransactionLinkStore) GetLinkTypeName() OptString {
	return s.LinkTypeName
}

// GetInwardID returns the value of InwardID.
func (s *TransactionLinkStore) GetInwardID() string {
	return s.InwardID
}

// GetOutwardID returns the value of OutwardID.
func (s *TransactionLinkStore) GetOutwardID() string {
	return s.OutwardID
}

// GetNotes returns the value of Notes.
func (s *TransactionLinkStore) GetNotes() OptNilString {
	return s.Notes
}

// SetLinkTypeID sets the value of LinkTypeID.
func (s *TransactionLinkStore) SetLinkTypeID(val string) {
	s.LinkTypeID = val
}

// SetLinkTypeName sets the value of LinkTypeName.
func (s *TransactionLinkStore) SetLinkTypeName(val OptString) {
	s.LinkTypeName = val
}

// SetInwardID sets the value of InwardID.
func (s *TransactionLinkStore) SetInwardID(val string) {
	s.InwardID = val
}

// SetOutwardID sets the value of OutwardID.
func (s *TransactionLinkStore) SetOutwardID(val string) {
	s.OutwardID = val
}

// SetNotes sets the value of Notes.
func (s *TransactionLinkStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// Ref: #/components/schemas/TransactionLinkUpdate
type TransactionLinkUpdate struct {
	// The link type ID to use. Use this field OR use the link_type_name field.
	LinkTypeID OptString `json:"link_type_id"`
	// The link type name to use. Use this field OR use the link_type_id field.
	LinkTypeName OptString `json:"link_type_name"`
	// The inward transaction transaction_journal_id for the link. This becomes the 'is paid by'
	// transaction of the set.
	InwardID OptString `json:"inward_id"`
	// The outward transaction transaction_journal_id for the link. This becomes the 'pays for'
	// transaction of the set.
	OutwardID OptString `json:"outward_id"`
	// Optional. Some notes. If you submit an empty string the current notes will be removed.
	Notes OptNilString `json:"notes"`
}

// GetLinkTypeID returns the value of LinkTypeID.
func (s *TransactionLinkUpdate) GetLinkTypeID() OptString {
	return s.LinkTypeID
}

// GetLinkTypeName returns the value of LinkTypeName.
func (s *TransactionLinkUpdate) GetLinkTypeName() OptString {
	return s.LinkTypeName
}

// GetInwardID returns the value of InwardID.
func (s *TransactionLinkUpdate) GetInwardID() OptString {
	return s.InwardID
}

// GetOutwardID returns the value of OutwardID.
func (s *TransactionLinkUpdate) GetOutwardID() OptString {
	return s.OutwardID
}

// GetNotes returns the value of Notes.
func (s *TransactionLinkUpdate) GetNotes() OptNilString {
	return s.Notes
}

// SetLinkTypeID sets the value of LinkTypeID.
func (s *TransactionLinkUpdate) SetLinkTypeID(val OptString) {
	s.LinkTypeID = val
}

// SetLinkTypeName sets the value of LinkTypeName.
func (s *TransactionLinkUpdate) SetLinkTypeName(val OptString) {
	s.LinkTypeName = val
}

// SetInwardID sets the value of InwardID.
func (s *TransactionLinkUpdate) SetInwardID(val OptString) {
	s.InwardID = val
}

// SetOutwardID sets the value of OutwardID.
func (s *TransactionLinkUpdate) SetOutwardID(val OptString) {
	s.OutwardID = val
}

// SetNotes sets the value of Notes.
func (s *TransactionLinkUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// Ref: #/components/schemas/TransactionRead
type TransactionRead struct {
	// Immutable value.
	Type       string      `json:"type"`
	ID         string      `json:"id"`
	Attributes Transaction `json:"attributes"`
	Links      ObjectLink  `json:"links"`
}

// GetType returns the value of Type.
func (s *TransactionRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *TransactionRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *TransactionRead) GetAttributes() Transaction {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *TransactionRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *TransactionRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *TransactionRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *TransactionRead) SetAttributes(val Transaction) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *TransactionRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Ref: #/components/schemas/TransactionSingle
type TransactionSingle struct {
	Data TransactionRead `json:"data"`
}

// GetData returns the value of Data.
func (s *TransactionSingle) GetData() TransactionRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *TransactionSingle) SetData(val TransactionRead) {
	s.Data = val
}

func (*TransactionSingle) getTransactionByJournalRes() {}
func (*TransactionSingle) getTransactionRes()          {}
func (*TransactionSingle) storeTransactionRes()        {}
func (*TransactionSingle) updateTransactionRes()       {}

// Ref: #/components/schemas/TransactionSplit
type TransactionSplit struct {
	// User ID.
	User OptString `json:"user"`
	// ID of the underlying transaction journal. Each transaction consists of a transaction group (see
	// the top ID) and one or more journals
	// making up the splits of the transaction.
	TransactionJournalID OptString               `json:"transaction_journal_id"`
	Type                 TransactionTypeProperty `json:"type"`
	// Date of the transaction.
	Date time.Time `json:"date"`
	// Order of this entry in the list of transactions.
	Order OptNilInt32 `json:"order"`
	// Currency ID. Default is the source account's currency, or the user's default currency. Can be used
	// instead of currency_code.
	CurrencyID OptNilString `json:"currency_id"`
	// Currency code. Default is the source account's currency, or the user's default currency. Can be
	// used instead of currency_id.
	CurrencyCode   OptNilString `json:"currency_code"`
	CurrencySymbol OptString    `json:"currency_symbol"`
	CurrencyName   OptString    `json:"currency_name"`
	// Number of decimals used in this currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
	// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
	ForeignCurrencyID OptNilString `json:"foreign_currency_id"`
	// Currency code of the foreign currency. Default is NULL. Can be used instead of the
	// foreign_currency_id, but this or the ID is required when submitting a foreign amount.
	ForeignCurrencyCode   OptNilString `json:"foreign_currency_code"`
	ForeignCurrencySymbol OptNilString `json:"foreign_currency_symbol"`
	// Number of decimals in the currency.
	ForeignCurrencyDecimalPlaces OptNilInt32 `json:"foreign_currency_decimal_places"`
	// Amount of the transaction.
	Amount string `json:"amount"`
	// The amount in a foreign currency.
	ForeignAmount OptNilString `json:"foreign_amount"`
	// Description of the transaction.
	Description string `json:"description"`
	// ID of the source account. For a withdrawal or a transfer, this must always be an asset account.
	// For deposits, this must be a revenue account.
	SourceID NilString `json:"source_id"`
	// Name of the source account. For a withdrawal or a transfer, this must always be an asset account.
	// For deposits, this must be a revenue account. Can be used instead of the source_id. If the
	// transaction is a deposit, the source_name can be filled in freely: the account will be created
	// based on the name.
	SourceName OptNilString           `json:"source_name"`
	SourceIban OptNilString           `json:"source_iban"`
	SourceType OptAccountTypeProperty `json:"source_type"`
	// ID of the destination account. For a deposit or a transfer, this must always be an asset account.
	// For withdrawals this must be an expense account.
	DestinationID NilString `json:"destination_id"`
	// Name of the destination account. You can submit the name instead of the ID. For everything except
	// transfers, the account will be auto-generated if unknown, so submitting a name is enough.
	DestinationName OptNilString           `json:"destination_name"`
	DestinationIban OptNilString           `json:"destination_iban"`
	DestinationType OptAccountTypeProperty `json:"destination_type"`
	// The budget ID for this transaction.
	BudgetID OptNilString `json:"budget_id"`
	// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value
	// will be ignored.
	BudgetName OptNilString `json:"budget_name"`
	// The category ID for this transaction.
	CategoryID OptNilString `json:"category_id"`
	// The name of the category to be used. If the category is unknown, it will be created. If the ID and
	// the name point to different categories, the ID overrules the name.
	CategoryName OptNilString `json:"category_name"`
	// Optional. Use either this or the bill_name.
	BillID OptNilString `json:"bill_id"`
	// Optional. Use either this or the bill_id.
	BillName OptNilString `json:"bill_name"`
	// If the transaction has been reconciled already. When you set this, the amount can no longer be
	// edited by the user.
	Reconciled OptBool      `json:"reconciled"`
	Notes      OptNilString `json:"notes"`
	// Array of tags.
	Tags OptNilStringArray `json:"tags"`
	// Reference to internal reference of other systems.
	InternalReference OptNilString `json:"internal_reference"`
	// Reference to external ID in other systems.
	ExternalID OptNilString `json:"external_id"`
	// External, custom URL for this transaction.
	ExternalURL OptNilString `json:"external_url"`
	// System generated identifier for original creator of transaction.
	OriginalSource OptNilString `json:"original_source"`
	// Reference to recurrence that made the transaction.
	RecurrenceID OptNilInt32 `json:"recurrence_id"`
	// Total number of transactions expected to be created by this recurrence repetition. Will be 0 if
	// infinite.
	RecurrenceTotal OptNilInt32 `json:"recurrence_total"`
	// The # of the current transaction created under this recurrence.
	RecurrenceCount OptNilInt32 `json:"recurrence_count"`
	// Internal ID of bunq transaction. DEPRECATED.
	BunqPaymentID OptNilString `json:"bunq_payment_id"`
	// Hash value of original import transaction (for duplicate detection).
	ImportHashV2 OptNilString `json:"import_hash_v2"`
	// SEPA Clearing Code.
	SepaCc OptNilString `json:"sepa_cc"`
	// SEPA Opposing Account Identifier.
	SepaCtOp OptNilString `json:"sepa_ct_op"`
	// SEPA end-to-end Identifier.
	SepaCtID OptNilString `json:"sepa_ct_id"`
	// SEPA mandate identifier.
	SepaDb OptNilString `json:"sepa_db"`
	// SEPA Country.
	SepaCountry OptNilString `json:"sepa_country"`
	// SEPA External Purpose indicator.
	SepaEp OptNilString `json:"sepa_ep"`
	// SEPA Creditor Identifier.
	SepaCi OptNilString `json:"sepa_ci"`
	// SEPA Batch ID.
	SepaBatchID  OptNilString   `json:"sepa_batch_id"`
	InterestDate OptNilDateTime `json:"interest_date"`
	BookDate     OptNilDateTime `json:"book_date"`
	ProcessDate  OptNilDateTime `json:"process_date"`
	DueDate      OptNilDateTime `json:"due_date"`
	PaymentDate  OptNilDateTime `json:"payment_date"`
	InvoiceDate  OptNilDateTime `json:"invoice_date"`
	// Latitude of the transaction's location, if applicable. Can be used to draw a map.
	Latitude OptNilFloat64 `json:"latitude"`
	// Latitude of the transaction's location, if applicable. Can be used to draw a map.
	Longitude OptNilFloat64 `json:"longitude"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary
	// value because each map provider has different zoom levels.
	ZoomLevel OptNilInt32 `json:"zoom_level"`
	// If the transaction has attachments.
	HasAttachments OptBool `json:"has_attachments"`
}

// GetUser returns the value of User.
func (s *TransactionSplit) GetUser() OptString {
	return s.User
}

// GetTransactionJournalID returns the value of TransactionJournalID.
func (s *TransactionSplit) GetTransactionJournalID() OptString {
	return s.TransactionJournalID
}

// GetType returns the value of Type.
func (s *TransactionSplit) GetType() TransactionTypeProperty {
	return s.Type
}

// GetDate returns the value of Date.
func (s *TransactionSplit) GetDate() time.Time {
	return s.Date
}

// GetOrder returns the value of Order.
func (s *TransactionSplit) GetOrder() OptNilInt32 {
	return s.Order
}

// GetCurrencyID returns the value of CurrencyID.
func (s *TransactionSplit) GetCurrencyID() OptNilString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *TransactionSplit) GetCurrencyCode() OptNilString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *TransactionSplit) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyName returns the value of CurrencyName.
func (s *TransactionSplit) GetCurrencyName() OptString {
	return s.CurrencyName
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *TransactionSplit) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetForeignCurrencyID returns the value of ForeignCurrencyID.
func (s *TransactionSplit) GetForeignCurrencyID() OptNilString {
	return s.ForeignCurrencyID
}

// GetForeignCurrencyCode returns the value of ForeignCurrencyCode.
func (s *TransactionSplit) GetForeignCurrencyCode() OptNilString {
	return s.ForeignCurrencyCode
}

// GetForeignCurrencySymbol returns the value of ForeignCurrencySymbol.
func (s *TransactionSplit) GetForeignCurrencySymbol() OptNilString {
	return s.ForeignCurrencySymbol
}

// GetForeignCurrencyDecimalPlaces returns the value of ForeignCurrencyDecimalPlaces.
func (s *TransactionSplit) GetForeignCurrencyDecimalPlaces() OptNilInt32 {
	return s.ForeignCurrencyDecimalPlaces
}

// GetAmount returns the value of Amount.
func (s *TransactionSplit) GetAmount() string {
	return s.Amount
}

// GetForeignAmount returns the value of ForeignAmount.
func (s *TransactionSplit) GetForeignAmount() OptNilString {
	return s.ForeignAmount
}

// GetDescription returns the value of Description.
func (s *TransactionSplit) GetDescription() string {
	return s.Description
}

// GetSourceID returns the value of SourceID.
func (s *TransactionSplit) GetSourceID() NilString {
	return s.SourceID
}

// GetSourceName returns the value of SourceName.
func (s *TransactionSplit) GetSourceName() OptNilString {
	return s.SourceName
}

// GetSourceIban returns the value of SourceIban.
func (s *TransactionSplit) GetSourceIban() OptNilString {
	return s.SourceIban
}

// GetSourceType returns the value of SourceType.
func (s *TransactionSplit) GetSourceType() OptAccountTypeProperty {
	return s.SourceType
}

// GetDestinationID returns the value of DestinationID.
func (s *TransactionSplit) GetDestinationID() NilString {
	return s.DestinationID
}

// GetDestinationName returns the value of DestinationName.
func (s *TransactionSplit) GetDestinationName() OptNilString {
	return s.DestinationName
}

// GetDestinationIban returns the value of DestinationIban.
func (s *TransactionSplit) GetDestinationIban() OptNilString {
	return s.DestinationIban
}

// GetDestinationType returns the value of DestinationType.
func (s *TransactionSplit) GetDestinationType() OptAccountTypeProperty {
	return s.DestinationType
}

// GetBudgetID returns the value of BudgetID.
func (s *TransactionSplit) GetBudgetID() OptNilString {
	return s.BudgetID
}

// GetBudgetName returns the value of BudgetName.
func (s *TransactionSplit) GetBudgetName() OptNilString {
	return s.BudgetName
}

// GetCategoryID returns the value of CategoryID.
func (s *TransactionSplit) GetCategoryID() OptNilString {
	return s.CategoryID
}

// GetCategoryName returns the value of CategoryName.
func (s *TransactionSplit) GetCategoryName() OptNilString {
	return s.CategoryName
}

// GetBillID returns the value of BillID.
func (s *TransactionSplit) GetBillID() OptNilString {
	return s.BillID
}

// GetBillName returns the value of BillName.
func (s *TransactionSplit) GetBillName() OptNilString {
	return s.BillName
}

// GetReconciled returns the value of Reconciled.
func (s *TransactionSplit) GetReconciled() OptBool {
	return s.Reconciled
}

// GetNotes returns the value of Notes.
func (s *TransactionSplit) GetNotes() OptNilString {
	return s.Notes
}

// GetTags returns the value of Tags.
func (s *TransactionSplit) GetTags() OptNilStringArray {
	return s.Tags
}

// GetInternalReference returns the value of InternalReference.
func (s *TransactionSplit) GetInternalReference() OptNilString {
	return s.InternalReference
}

// GetExternalID returns the value of ExternalID.
func (s *TransactionSplit) GetExternalID() OptNilString {
	return s.ExternalID
}

// GetExternalURL returns the value of ExternalURL.
func (s *TransactionSplit) GetExternalURL() OptNilString {
	return s.ExternalURL
}

// GetOriginalSource returns the value of OriginalSource.
func (s *TransactionSplit) GetOriginalSource() OptNilString {
	return s.OriginalSource
}

// GetRecurrenceID returns the value of RecurrenceID.
func (s *TransactionSplit) GetRecurrenceID() OptNilInt32 {
	return s.RecurrenceID
}

// GetRecurrenceTotal returns the value of RecurrenceTotal.
func (s *TransactionSplit) GetRecurrenceTotal() OptNilInt32 {
	return s.RecurrenceTotal
}

// GetRecurrenceCount returns the value of RecurrenceCount.
func (s *TransactionSplit) GetRecurrenceCount() OptNilInt32 {
	return s.RecurrenceCount
}

// GetBunqPaymentID returns the value of BunqPaymentID.
func (s *TransactionSplit) GetBunqPaymentID() OptNilString {
	return s.BunqPaymentID
}

// GetImportHashV2 returns the value of ImportHashV2.
func (s *TransactionSplit) GetImportHashV2() OptNilString {
	return s.ImportHashV2
}

// GetSepaCc returns the value of SepaCc.
func (s *TransactionSplit) GetSepaCc() OptNilString {
	return s.SepaCc
}

// GetSepaCtOp returns the value of SepaCtOp.
func (s *TransactionSplit) GetSepaCtOp() OptNilString {
	return s.SepaCtOp
}

// GetSepaCtID returns the value of SepaCtID.
func (s *TransactionSplit) GetSepaCtID() OptNilString {
	return s.SepaCtID
}

// GetSepaDb returns the value of SepaDb.
func (s *TransactionSplit) GetSepaDb() OptNilString {
	return s.SepaDb
}

// GetSepaCountry returns the value of SepaCountry.
func (s *TransactionSplit) GetSepaCountry() OptNilString {
	return s.SepaCountry
}

// GetSepaEp returns the value of SepaEp.
func (s *TransactionSplit) GetSepaEp() OptNilString {
	return s.SepaEp
}

// GetSepaCi returns the value of SepaCi.
func (s *TransactionSplit) GetSepaCi() OptNilString {
	return s.SepaCi
}

// GetSepaBatchID returns the value of SepaBatchID.
func (s *TransactionSplit) GetSepaBatchID() OptNilString {
	return s.SepaBatchID
}

// GetInterestDate returns the value of InterestDate.
func (s *TransactionSplit) GetInterestDate() OptNilDateTime {
	return s.InterestDate
}

// GetBookDate returns the value of BookDate.
func (s *TransactionSplit) GetBookDate() OptNilDateTime {
	return s.BookDate
}

// GetProcessDate returns the value of ProcessDate.
func (s *TransactionSplit) GetProcessDate() OptNilDateTime {
	return s.ProcessDate
}

// GetDueDate returns the value of DueDate.
func (s *TransactionSplit) GetDueDate() OptNilDateTime {
	return s.DueDate
}

// GetPaymentDate returns the value of PaymentDate.
func (s *TransactionSplit) GetPaymentDate() OptNilDateTime {
	return s.PaymentDate
}

// GetInvoiceDate returns the value of InvoiceDate.
func (s *TransactionSplit) GetInvoiceDate() OptNilDateTime {
	return s.InvoiceDate
}

// GetLatitude returns the value of Latitude.
func (s *TransactionSplit) GetLatitude() OptNilFloat64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *TransactionSplit) GetLongitude() OptNilFloat64 {
	return s.Longitude
}

// GetZoomLevel returns the value of ZoomLevel.
func (s *TransactionSplit) GetZoomLevel() OptNilInt32 {
	return s.ZoomLevel
}

// GetHasAttachments returns the value of HasAttachments.
func (s *TransactionSplit) GetHasAttachments() OptBool {
	return s.HasAttachments
}

// SetUser sets the value of User.
func (s *TransactionSplit) SetUser(val OptString) {
	s.User = val
}

// SetTransactionJournalID sets the value of TransactionJournalID.
func (s *TransactionSplit) SetTransactionJournalID(val OptString) {
	s.TransactionJournalID = val
}

// SetType sets the value of Type.
func (s *TransactionSplit) SetType(val TransactionTypeProperty) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *TransactionSplit) SetDate(val time.Time) {
	s.Date = val
}

// SetOrder sets the value of Order.
func (s *TransactionSplit) SetOrder(val OptNilInt32) {
	s.Order = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *TransactionSplit) SetCurrencyID(val OptNilString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *TransactionSplit) SetCurrencyCode(val OptNilString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *TransactionSplit) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyName sets the value of CurrencyName.
func (s *TransactionSplit) SetCurrencyName(val OptString) {
	s.CurrencyName = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *TransactionSplit) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetForeignCurrencyID sets the value of ForeignCurrencyID.
func (s *TransactionSplit) SetForeignCurrencyID(val OptNilString) {
	s.ForeignCurrencyID = val
}

// SetForeignCurrencyCode sets the value of ForeignCurrencyCode.
func (s *TransactionSplit) SetForeignCurrencyCode(val OptNilString) {
	s.ForeignCurrencyCode = val
}

// SetForeignCurrencySymbol sets the value of ForeignCurrencySymbol.
func (s *TransactionSplit) SetForeignCurrencySymbol(val OptNilString) {
	s.ForeignCurrencySymbol = val
}

// SetForeignCurrencyDecimalPlaces sets the value of ForeignCurrencyDecimalPlaces.
func (s *TransactionSplit) SetForeignCurrencyDecimalPlaces(val OptNilInt32) {
	s.ForeignCurrencyDecimalPlaces = val
}

// SetAmount sets the value of Amount.
func (s *TransactionSplit) SetAmount(val string) {
	s.Amount = val
}

// SetForeignAmount sets the value of ForeignAmount.
func (s *TransactionSplit) SetForeignAmount(val OptNilString) {
	s.ForeignAmount = val
}

// SetDescription sets the value of Description.
func (s *TransactionSplit) SetDescription(val string) {
	s.Description = val
}

// SetSourceID sets the value of SourceID.
func (s *TransactionSplit) SetSourceID(val NilString) {
	s.SourceID = val
}

// SetSourceName sets the value of SourceName.
func (s *TransactionSplit) SetSourceName(val OptNilString) {
	s.SourceName = val
}

// SetSourceIban sets the value of SourceIban.
func (s *TransactionSplit) SetSourceIban(val OptNilString) {
	s.SourceIban = val
}

// SetSourceType sets the value of SourceType.
func (s *TransactionSplit) SetSourceType(val OptAccountTypeProperty) {
	s.SourceType = val
}

// SetDestinationID sets the value of DestinationID.
func (s *TransactionSplit) SetDestinationID(val NilString) {
	s.DestinationID = val
}

// SetDestinationName sets the value of DestinationName.
func (s *TransactionSplit) SetDestinationName(val OptNilString) {
	s.DestinationName = val
}

// SetDestinationIban sets the value of DestinationIban.
func (s *TransactionSplit) SetDestinationIban(val OptNilString) {
	s.DestinationIban = val
}

// SetDestinationType sets the value of DestinationType.
func (s *TransactionSplit) SetDestinationType(val OptAccountTypeProperty) {
	s.DestinationType = val
}

// SetBudgetID sets the value of BudgetID.
func (s *TransactionSplit) SetBudgetID(val OptNilString) {
	s.BudgetID = val
}

// SetBudgetName sets the value of BudgetName.
func (s *TransactionSplit) SetBudgetName(val OptNilString) {
	s.BudgetName = val
}

// SetCategoryID sets the value of CategoryID.
func (s *TransactionSplit) SetCategoryID(val OptNilString) {
	s.CategoryID = val
}

// SetCategoryName sets the value of CategoryName.
func (s *TransactionSplit) SetCategoryName(val OptNilString) {
	s.CategoryName = val
}

// SetBillID sets the value of BillID.
func (s *TransactionSplit) SetBillID(val OptNilString) {
	s.BillID = val
}

// SetBillName sets the value of BillName.
func (s *TransactionSplit) SetBillName(val OptNilString) {
	s.BillName = val
}

// SetReconciled sets the value of Reconciled.
func (s *TransactionSplit) SetReconciled(val OptBool) {
	s.Reconciled = val
}

// SetNotes sets the value of Notes.
func (s *TransactionSplit) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetTags sets the value of Tags.
func (s *TransactionSplit) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetInternalReference sets the value of InternalReference.
func (s *TransactionSplit) SetInternalReference(val OptNilString) {
	s.InternalReference = val
}

// SetExternalID sets the value of ExternalID.
func (s *TransactionSplit) SetExternalID(val OptNilString) {
	s.ExternalID = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *TransactionSplit) SetExternalURL(val OptNilString) {
	s.ExternalURL = val
}

// SetOriginalSource sets the value of OriginalSource.
func (s *TransactionSplit) SetOriginalSource(val OptNilString) {
	s.OriginalSource = val
}

// SetRecurrenceID sets the value of RecurrenceID.
func (s *TransactionSplit) SetRecurrenceID(val OptNilInt32) {
	s.RecurrenceID = val
}

// SetRecurrenceTotal sets the value of RecurrenceTotal.
func (s *TransactionSplit) SetRecurrenceTotal(val OptNilInt32) {
	s.RecurrenceTotal = val
}

// SetRecurrenceCount sets the value of RecurrenceCount.
func (s *TransactionSplit) SetRecurrenceCount(val OptNilInt32) {
	s.RecurrenceCount = val
}

// SetBunqPaymentID sets the value of BunqPaymentID.
func (s *TransactionSplit) SetBunqPaymentID(val OptNilString) {
	s.BunqPaymentID = val
}

// SetImportHashV2 sets the value of ImportHashV2.
func (s *TransactionSplit) SetImportHashV2(val OptNilString) {
	s.ImportHashV2 = val
}

// SetSepaCc sets the value of SepaCc.
func (s *TransactionSplit) SetSepaCc(val OptNilString) {
	s.SepaCc = val
}

// SetSepaCtOp sets the value of SepaCtOp.
func (s *TransactionSplit) SetSepaCtOp(val OptNilString) {
	s.SepaCtOp = val
}

// SetSepaCtID sets the value of SepaCtID.
func (s *TransactionSplit) SetSepaCtID(val OptNilString) {
	s.SepaCtID = val
}

// SetSepaDb sets the value of SepaDb.
func (s *TransactionSplit) SetSepaDb(val OptNilString) {
	s.SepaDb = val
}

// SetSepaCountry sets the value of SepaCountry.
func (s *TransactionSplit) SetSepaCountry(val OptNilString) {
	s.SepaCountry = val
}

// SetSepaEp sets the value of SepaEp.
func (s *TransactionSplit) SetSepaEp(val OptNilString) {
	s.SepaEp = val
}

// SetSepaCi sets the value of SepaCi.
func (s *TransactionSplit) SetSepaCi(val OptNilString) {
	s.SepaCi = val
}

// SetSepaBatchID sets the value of SepaBatchID.
func (s *TransactionSplit) SetSepaBatchID(val OptNilString) {
	s.SepaBatchID = val
}

// SetInterestDate sets the value of InterestDate.
func (s *TransactionSplit) SetInterestDate(val OptNilDateTime) {
	s.InterestDate = val
}

// SetBookDate sets the value of BookDate.
func (s *TransactionSplit) SetBookDate(val OptNilDateTime) {
	s.BookDate = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *TransactionSplit) SetProcessDate(val OptNilDateTime) {
	s.ProcessDate = val
}

// SetDueDate sets the value of DueDate.
func (s *TransactionSplit) SetDueDate(val OptNilDateTime) {
	s.DueDate = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *TransactionSplit) SetPaymentDate(val OptNilDateTime) {
	s.PaymentDate = val
}

// SetInvoiceDate sets the value of InvoiceDate.
func (s *TransactionSplit) SetInvoiceDate(val OptNilDateTime) {
	s.InvoiceDate = val
}

// SetLatitude sets the value of Latitude.
func (s *TransactionSplit) SetLatitude(val OptNilFloat64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *TransactionSplit) SetLongitude(val OptNilFloat64) {
	s.Longitude = val
}

// SetZoomLevel sets the value of ZoomLevel.
func (s *TransactionSplit) SetZoomLevel(val OptNilInt32) {
	s.ZoomLevel = val
}

// SetHasAttachments sets the value of HasAttachments.
func (s *TransactionSplit) SetHasAttachments(val OptBool) {
	s.HasAttachments = val
}

// Ref: #/components/schemas/TransactionSplitStore
type TransactionSplitStore struct {
	Type TransactionTypeProperty `json:"type"`
	// Date of the transaction.
	Date time.Time `json:"date"`
	// Amount of the transaction.
	Amount string `json:"amount"`
	// Description of the transaction.
	Description string `json:"description"`
	// Order of this entry in the list of transactions.
	Order OptNilInt32 `json:"order"`
	// Currency ID. Default is the source account's currency, or the user's default currency. The value
	// you submit may be overruled by the source or destination account.
	CurrencyID OptNilString `json:"currency_id"`
	// Currency code. Default is the source account's currency, or the user's default currency. The value
	// you submit may be overruled by the source or destination account.
	CurrencyCode OptNilString `json:"currency_code"`
	// The amount in a foreign currency.
	ForeignAmount OptNilString `json:"foreign_amount"`
	// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
	ForeignCurrencyID OptNilString `json:"foreign_currency_id"`
	// Currency code of the foreign currency. Default is NULL. Can be used instead of the
	// foreign_currency_id, but this or the ID is required when submitting a foreign amount.
	ForeignCurrencyCode OptNilString `json:"foreign_currency_code"`
	// The budget ID for this transaction.
	BudgetID OptNilString `json:"budget_id"`
	// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value
	// will be ignored.
	BudgetName OptNilString `json:"budget_name"`
	// The category ID for this transaction.
	CategoryID OptNilString `json:"category_id"`
	// The name of the category to be used. If the category is unknown, it will be created. If the ID and
	// the name point to different categories, the ID overrules the name.
	CategoryName OptNilString `json:"category_name"`
	// ID of the source account. For a withdrawal or a transfer, this must always be an asset account.
	// For deposits, this must be a revenue account.
	SourceID OptNilString `json:"source_id"`
	// Name of the source account. For a withdrawal or a transfer, this must always be an asset account.
	// For deposits, this must be a revenue account. Can be used instead of the source_id. If the
	// transaction is a deposit, the source_name can be filled in freely: the account will be created
	// based on the name.
	SourceName OptNilString `json:"source_name"`
	// ID of the destination account. For a deposit or a transfer, this must always be an asset account.
	// For withdrawals this must be an expense account.
	DestinationID OptNilString `json:"destination_id"`
	// Name of the destination account. You can submit the name instead of the ID. For everything except
	// transfers, the account will be auto-generated if unknown, so submitting a name is enough.
	DestinationName OptNilString `json:"destination_name"`
	// If the transaction has been reconciled already. When you set this, the amount can no longer be
	// edited by the user.
	Reconciled OptBool `json:"reconciled"`
	// Optional. Use either this or the piggy_bank_name.
	PiggyBankID OptInt32 `json:"piggy_bank_id"`
	// Optional. Use either this or the piggy_bank_id.
	PiggyBankName OptString `json:"piggy_bank_name"`
	// Optional. Use either this or the bill_name.
	BillID OptNilString `json:"bill_id"`
	// Optional. Use either this or the bill_id.
	BillName OptNilString `json:"bill_name"`
	// Array of tags.
	Tags  OptNilStringArray `json:"tags"`
	Notes OptNilString      `json:"notes"`
	// Reference to internal reference of other systems.
	InternalReference OptNilString `json:"internal_reference"`
	// Reference to external ID in other systems.
	ExternalID OptNilString `json:"external_id"`
	// External, custom URL for this transaction.
	ExternalURL OptNilString `json:"external_url"`
	// Internal ID of bunq transaction. Field is no longer used but still works.
	BunqPaymentID OptNilString `json:"bunq_payment_id"`
	// SEPA Clearing Code.
	SepaCc OptNilString `json:"sepa_cc"`
	// SEPA Opposing Account Identifier.
	SepaCtOp OptNilString `json:"sepa_ct_op"`
	// SEPA end-to-end Identifier.
	SepaCtID OptNilString `json:"sepa_ct_id"`
	// SEPA mandate identifier.
	SepaDb OptNilString `json:"sepa_db"`
	// SEPA Country.
	SepaCountry OptNilString `json:"sepa_country"`
	// SEPA External Purpose indicator.
	SepaEp OptNilString `json:"sepa_ep"`
	// SEPA Creditor Identifier.
	SepaCi OptNilString `json:"sepa_ci"`
	// SEPA Batch ID.
	SepaBatchID  OptNilString   `json:"sepa_batch_id"`
	InterestDate OptNilDateTime `json:"interest_date"`
	BookDate     OptNilDateTime `json:"book_date"`
	ProcessDate  OptNilDateTime `json:"process_date"`
	DueDate      OptNilDateTime `json:"due_date"`
	PaymentDate  OptNilDateTime `json:"payment_date"`
	InvoiceDate  OptNilDateTime `json:"invoice_date"`
}

// GetType returns the value of Type.
func (s *TransactionSplitStore) GetType() TransactionTypeProperty {
	return s.Type
}

// GetDate returns the value of Date.
func (s *TransactionSplitStore) GetDate() time.Time {
	return s.Date
}

// GetAmount returns the value of Amount.
func (s *TransactionSplitStore) GetAmount() string {
	return s.Amount
}

// GetDescription returns the value of Description.
func (s *TransactionSplitStore) GetDescription() string {
	return s.Description
}

// GetOrder returns the value of Order.
func (s *TransactionSplitStore) GetOrder() OptNilInt32 {
	return s.Order
}

// GetCurrencyID returns the value of CurrencyID.
func (s *TransactionSplitStore) GetCurrencyID() OptNilString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *TransactionSplitStore) GetCurrencyCode() OptNilString {
	return s.CurrencyCode
}

// GetForeignAmount returns the value of ForeignAmount.
func (s *TransactionSplitStore) GetForeignAmount() OptNilString {
	return s.ForeignAmount
}

// GetForeignCurrencyID returns the value of ForeignCurrencyID.
func (s *TransactionSplitStore) GetForeignCurrencyID() OptNilString {
	return s.ForeignCurrencyID
}

// GetForeignCurrencyCode returns the value of ForeignCurrencyCode.
func (s *TransactionSplitStore) GetForeignCurrencyCode() OptNilString {
	return s.ForeignCurrencyCode
}

// GetBudgetID returns the value of BudgetID.
func (s *TransactionSplitStore) GetBudgetID() OptNilString {
	return s.BudgetID
}

// GetBudgetName returns the value of BudgetName.
func (s *TransactionSplitStore) GetBudgetName() OptNilString {
	return s.BudgetName
}

// GetCategoryID returns the value of CategoryID.
func (s *TransactionSplitStore) GetCategoryID() OptNilString {
	return s.CategoryID
}

// GetCategoryName returns the value of CategoryName.
func (s *TransactionSplitStore) GetCategoryName() OptNilString {
	return s.CategoryName
}

// GetSourceID returns the value of SourceID.
func (s *TransactionSplitStore) GetSourceID() OptNilString {
	return s.SourceID
}

// GetSourceName returns the value of SourceName.
func (s *TransactionSplitStore) GetSourceName() OptNilString {
	return s.SourceName
}

// GetDestinationID returns the value of DestinationID.
func (s *TransactionSplitStore) GetDestinationID() OptNilString {
	return s.DestinationID
}

// GetDestinationName returns the value of DestinationName.
func (s *TransactionSplitStore) GetDestinationName() OptNilString {
	return s.DestinationName
}

// GetReconciled returns the value of Reconciled.
func (s *TransactionSplitStore) GetReconciled() OptBool {
	return s.Reconciled
}

// GetPiggyBankID returns the value of PiggyBankID.
func (s *TransactionSplitStore) GetPiggyBankID() OptInt32 {
	return s.PiggyBankID
}

// GetPiggyBankName returns the value of PiggyBankName.
func (s *TransactionSplitStore) GetPiggyBankName() OptString {
	return s.PiggyBankName
}

// GetBillID returns the value of BillID.
func (s *TransactionSplitStore) GetBillID() OptNilString {
	return s.BillID
}

// GetBillName returns the value of BillName.
func (s *TransactionSplitStore) GetBillName() OptNilString {
	return s.BillName
}

// GetTags returns the value of Tags.
func (s *TransactionSplitStore) GetTags() OptNilStringArray {
	return s.Tags
}

// GetNotes returns the value of Notes.
func (s *TransactionSplitStore) GetNotes() OptNilString {
	return s.Notes
}

// GetInternalReference returns the value of InternalReference.
func (s *TransactionSplitStore) GetInternalReference() OptNilString {
	return s.InternalReference
}

// GetExternalID returns the value of ExternalID.
func (s *TransactionSplitStore) GetExternalID() OptNilString {
	return s.ExternalID
}

// GetExternalURL returns the value of ExternalURL.
func (s *TransactionSplitStore) GetExternalURL() OptNilString {
	return s.ExternalURL
}

// GetBunqPaymentID returns the value of BunqPaymentID.
func (s *TransactionSplitStore) GetBunqPaymentID() OptNilString {
	return s.BunqPaymentID
}

// GetSepaCc returns the value of SepaCc.
func (s *TransactionSplitStore) GetSepaCc() OptNilString {
	return s.SepaCc
}

// GetSepaCtOp returns the value of SepaCtOp.
func (s *TransactionSplitStore) GetSepaCtOp() OptNilString {
	return s.SepaCtOp
}

// GetSepaCtID returns the value of SepaCtID.
func (s *TransactionSplitStore) GetSepaCtID() OptNilString {
	return s.SepaCtID
}

// GetSepaDb returns the value of SepaDb.
func (s *TransactionSplitStore) GetSepaDb() OptNilString {
	return s.SepaDb
}

// GetSepaCountry returns the value of SepaCountry.
func (s *TransactionSplitStore) GetSepaCountry() OptNilString {
	return s.SepaCountry
}

// GetSepaEp returns the value of SepaEp.
func (s *TransactionSplitStore) GetSepaEp() OptNilString {
	return s.SepaEp
}

// GetSepaCi returns the value of SepaCi.
func (s *TransactionSplitStore) GetSepaCi() OptNilString {
	return s.SepaCi
}

// GetSepaBatchID returns the value of SepaBatchID.
func (s *TransactionSplitStore) GetSepaBatchID() OptNilString {
	return s.SepaBatchID
}

// GetInterestDate returns the value of InterestDate.
func (s *TransactionSplitStore) GetInterestDate() OptNilDateTime {
	return s.InterestDate
}

// GetBookDate returns the value of BookDate.
func (s *TransactionSplitStore) GetBookDate() OptNilDateTime {
	return s.BookDate
}

// GetProcessDate returns the value of ProcessDate.
func (s *TransactionSplitStore) GetProcessDate() OptNilDateTime {
	return s.ProcessDate
}

// GetDueDate returns the value of DueDate.
func (s *TransactionSplitStore) GetDueDate() OptNilDateTime {
	return s.DueDate
}

// GetPaymentDate returns the value of PaymentDate.
func (s *TransactionSplitStore) GetPaymentDate() OptNilDateTime {
	return s.PaymentDate
}

// GetInvoiceDate returns the value of InvoiceDate.
func (s *TransactionSplitStore) GetInvoiceDate() OptNilDateTime {
	return s.InvoiceDate
}

// SetType sets the value of Type.
func (s *TransactionSplitStore) SetType(val TransactionTypeProperty) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *TransactionSplitStore) SetDate(val time.Time) {
	s.Date = val
}

// SetAmount sets the value of Amount.
func (s *TransactionSplitStore) SetAmount(val string) {
	s.Amount = val
}

// SetDescription sets the value of Description.
func (s *TransactionSplitStore) SetDescription(val string) {
	s.Description = val
}

// SetOrder sets the value of Order.
func (s *TransactionSplitStore) SetOrder(val OptNilInt32) {
	s.Order = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *TransactionSplitStore) SetCurrencyID(val OptNilString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *TransactionSplitStore) SetCurrencyCode(val OptNilString) {
	s.CurrencyCode = val
}

// SetForeignAmount sets the value of ForeignAmount.
func (s *TransactionSplitStore) SetForeignAmount(val OptNilString) {
	s.ForeignAmount = val
}

// SetForeignCurrencyID sets the value of ForeignCurrencyID.
func (s *TransactionSplitStore) SetForeignCurrencyID(val OptNilString) {
	s.ForeignCurrencyID = val
}

// SetForeignCurrencyCode sets the value of ForeignCurrencyCode.
func (s *TransactionSplitStore) SetForeignCurrencyCode(val OptNilString) {
	s.ForeignCurrencyCode = val
}

// SetBudgetID sets the value of BudgetID.
func (s *TransactionSplitStore) SetBudgetID(val OptNilString) {
	s.BudgetID = val
}

// SetBudgetName sets the value of BudgetName.
func (s *TransactionSplitStore) SetBudgetName(val OptNilString) {
	s.BudgetName = val
}

// SetCategoryID sets the value of CategoryID.
func (s *TransactionSplitStore) SetCategoryID(val OptNilString) {
	s.CategoryID = val
}

// SetCategoryName sets the value of CategoryName.
func (s *TransactionSplitStore) SetCategoryName(val OptNilString) {
	s.CategoryName = val
}

// SetSourceID sets the value of SourceID.
func (s *TransactionSplitStore) SetSourceID(val OptNilString) {
	s.SourceID = val
}

// SetSourceName sets the value of SourceName.
func (s *TransactionSplitStore) SetSourceName(val OptNilString) {
	s.SourceName = val
}

// SetDestinationID sets the value of DestinationID.
func (s *TransactionSplitStore) SetDestinationID(val OptNilString) {
	s.DestinationID = val
}

// SetDestinationName sets the value of DestinationName.
func (s *TransactionSplitStore) SetDestinationName(val OptNilString) {
	s.DestinationName = val
}

// SetReconciled sets the value of Reconciled.
func (s *TransactionSplitStore) SetReconciled(val OptBool) {
	s.Reconciled = val
}

// SetPiggyBankID sets the value of PiggyBankID.
func (s *TransactionSplitStore) SetPiggyBankID(val OptInt32) {
	s.PiggyBankID = val
}

// SetPiggyBankName sets the value of PiggyBankName.
func (s *TransactionSplitStore) SetPiggyBankName(val OptString) {
	s.PiggyBankName = val
}

// SetBillID sets the value of BillID.
func (s *TransactionSplitStore) SetBillID(val OptNilString) {
	s.BillID = val
}

// SetBillName sets the value of BillName.
func (s *TransactionSplitStore) SetBillName(val OptNilString) {
	s.BillName = val
}

// SetTags sets the value of Tags.
func (s *TransactionSplitStore) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetNotes sets the value of Notes.
func (s *TransactionSplitStore) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetInternalReference sets the value of InternalReference.
func (s *TransactionSplitStore) SetInternalReference(val OptNilString) {
	s.InternalReference = val
}

// SetExternalID sets the value of ExternalID.
func (s *TransactionSplitStore) SetExternalID(val OptNilString) {
	s.ExternalID = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *TransactionSplitStore) SetExternalURL(val OptNilString) {
	s.ExternalURL = val
}

// SetBunqPaymentID sets the value of BunqPaymentID.
func (s *TransactionSplitStore) SetBunqPaymentID(val OptNilString) {
	s.BunqPaymentID = val
}

// SetSepaCc sets the value of SepaCc.
func (s *TransactionSplitStore) SetSepaCc(val OptNilString) {
	s.SepaCc = val
}

// SetSepaCtOp sets the value of SepaCtOp.
func (s *TransactionSplitStore) SetSepaCtOp(val OptNilString) {
	s.SepaCtOp = val
}

// SetSepaCtID sets the value of SepaCtID.
func (s *TransactionSplitStore) SetSepaCtID(val OptNilString) {
	s.SepaCtID = val
}

// SetSepaDb sets the value of SepaDb.
func (s *TransactionSplitStore) SetSepaDb(val OptNilString) {
	s.SepaDb = val
}

// SetSepaCountry sets the value of SepaCountry.
func (s *TransactionSplitStore) SetSepaCountry(val OptNilString) {
	s.SepaCountry = val
}

// SetSepaEp sets the value of SepaEp.
func (s *TransactionSplitStore) SetSepaEp(val OptNilString) {
	s.SepaEp = val
}

// SetSepaCi sets the value of SepaCi.
func (s *TransactionSplitStore) SetSepaCi(val OptNilString) {
	s.SepaCi = val
}

// SetSepaBatchID sets the value of SepaBatchID.
func (s *TransactionSplitStore) SetSepaBatchID(val OptNilString) {
	s.SepaBatchID = val
}

// SetInterestDate sets the value of InterestDate.
func (s *TransactionSplitStore) SetInterestDate(val OptNilDateTime) {
	s.InterestDate = val
}

// SetBookDate sets the value of BookDate.
func (s *TransactionSplitStore) SetBookDate(val OptNilDateTime) {
	s.BookDate = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *TransactionSplitStore) SetProcessDate(val OptNilDateTime) {
	s.ProcessDate = val
}

// SetDueDate sets the value of DueDate.
func (s *TransactionSplitStore) SetDueDate(val OptNilDateTime) {
	s.DueDate = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *TransactionSplitStore) SetPaymentDate(val OptNilDateTime) {
	s.PaymentDate = val
}

// SetInvoiceDate sets the value of InvoiceDate.
func (s *TransactionSplitStore) SetInvoiceDate(val OptNilDateTime) {
	s.InvoiceDate = val
}

// Ref: #/components/schemas/TransactionSplitUpdate
type TransactionSplitUpdate struct {
	// Transaction journal ID of current transaction (split).
	TransactionJournalID OptString                  `json:"transaction_journal_id"`
	Type                 OptTransactionTypeProperty `json:"type"`
	// Date of the transaction.
	Date OptDateTime `json:"date"`
	// Amount of the transaction.
	Amount OptString `json:"amount"`
	// Description of the transaction.
	Description OptString `json:"description"`
	// Order of this entry in the list of transactions.
	Order OptNilInt32 `json:"order"`
	// Currency ID. Default is the source account's currency, or the user's default currency. Can be used
	// instead of currency_code.
	CurrencyID OptNilString `json:"currency_id"`
	// Currency code. Default is the source account's currency, or the user's default currency. Can be
	// used instead of currency_id.
	CurrencyCode   OptNilString `json:"currency_code"`
	CurrencySymbol OptString    `json:"currency_symbol"`
	CurrencyName   OptString    `json:"currency_name"`
	// Number of decimals used in this currency.
	CurrencyDecimalPlaces OptInt32 `json:"currency_decimal_places"`
	// The amount in a foreign currency.
	ForeignAmount OptNilString `json:"foreign_amount"`
	// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
	ForeignCurrencyID OptNilString `json:"foreign_currency_id"`
	// Currency code of the foreign currency. Default is NULL. Can be used instead of the
	// foreign_currency_id, but this or the ID is required when submitting a foreign amount.
	ForeignCurrencyCode   OptNilString `json:"foreign_currency_code"`
	ForeignCurrencySymbol OptNilString `json:"foreign_currency_symbol"`
	// Number of decimals in the currency.
	ForeignCurrencyDecimalPlaces OptNilInt32 `json:"foreign_currency_decimal_places"`
	// The budget ID for this transaction.
	BudgetID OptNilString `json:"budget_id"`
	// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value
	// will be ignored.
	BudgetName OptNilString `json:"budget_name"`
	// The category ID for this transaction.
	CategoryID OptNilString `json:"category_id"`
	// The name of the category to be used. If the category is unknown, it will be created. If the ID and
	// the name point to different categories, the ID overrules the name.
	CategoryName OptNilString `json:"category_name"`
	// ID of the source account. For a withdrawal or a transfer, this must always be an asset account.
	// For deposits, this must be a revenue account.
	SourceID OptNilString `json:"source_id"`
	// Name of the source account. For a withdrawal or a transfer, this must always be an asset account.
	// For deposits, this must be a revenue account. Can be used instead of the source_id. If the
	// transaction is a deposit, the source_name can be filled in freely: the account will be created
	// based on the name.
	SourceName OptNilString `json:"source_name"`
	SourceIban OptNilString `json:"source_iban"`
	// ID of the destination account. For a deposit or a transfer, this must always be an asset account.
	// For withdrawals this must be an expense account.
	DestinationID OptNilString `json:"destination_id"`
	// Name of the destination account. You can submit the name instead of the ID. For everything except
	// transfers, the account will be auto-generated if unknown, so submitting a name is enough.
	DestinationName OptNilString `json:"destination_name"`
	DestinationIban OptNilString `json:"destination_iban"`
	// If the transaction has been reconciled already. When you set this, the amount can no longer be
	// edited by the user.
	Reconciled OptBool `json:"reconciled"`
	// Optional. Use either this or the bill_name.
	BillID OptNilString `json:"bill_id"`
	// Optional. Use either this or the bill_id.
	BillName OptNilString `json:"bill_name"`
	// Array of tags.
	Tags  OptNilStringArray `json:"tags"`
	Notes OptNilString      `json:"notes"`
	// Reference to internal reference of other systems.
	InternalReference OptNilString `json:"internal_reference"`
	// Reference to external ID in other systems.
	ExternalID OptNilString `json:"external_id"`
	// External, custom URL for this transaction.
	ExternalURL OptNilString `json:"external_url"`
	// Internal ID of bunq transaction.
	BunqPaymentID OptNilString `json:"bunq_payment_id"`
	// SEPA Clearing Code.
	SepaCc OptNilString `json:"sepa_cc"`
	// SEPA Opposing Account Identifier.
	SepaCtOp OptNilString `json:"sepa_ct_op"`
	// SEPA end-to-end Identifier.
	SepaCtID OptNilString `json:"sepa_ct_id"`
	// SEPA mandate identifier.
	SepaDb OptNilString `json:"sepa_db"`
	// SEPA Country.
	SepaCountry OptNilString `json:"sepa_country"`
	// SEPA External Purpose indicator.
	SepaEp OptNilString `json:"sepa_ep"`
	// SEPA Creditor Identifier.
	SepaCi OptNilString `json:"sepa_ci"`
	// SEPA Batch ID.
	SepaBatchID  OptNilString   `json:"sepa_batch_id"`
	InterestDate OptNilDateTime `json:"interest_date"`
	BookDate     OptNilDateTime `json:"book_date"`
	ProcessDate  OptNilDateTime `json:"process_date"`
	DueDate      OptNilDateTime `json:"due_date"`
	PaymentDate  OptNilDateTime `json:"payment_date"`
	InvoiceDate  OptNilDateTime `json:"invoice_date"`
}

// GetTransactionJournalID returns the value of TransactionJournalID.
func (s *TransactionSplitUpdate) GetTransactionJournalID() OptString {
	return s.TransactionJournalID
}

// GetType returns the value of Type.
func (s *TransactionSplitUpdate) GetType() OptTransactionTypeProperty {
	return s.Type
}

// GetDate returns the value of Date.
func (s *TransactionSplitUpdate) GetDate() OptDateTime {
	return s.Date
}

// GetAmount returns the value of Amount.
func (s *TransactionSplitUpdate) GetAmount() OptString {
	return s.Amount
}

// GetDescription returns the value of Description.
func (s *TransactionSplitUpdate) GetDescription() OptString {
	return s.Description
}

// GetOrder returns the value of Order.
func (s *TransactionSplitUpdate) GetOrder() OptNilInt32 {
	return s.Order
}

// GetCurrencyID returns the value of CurrencyID.
func (s *TransactionSplitUpdate) GetCurrencyID() OptNilString {
	return s.CurrencyID
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *TransactionSplitUpdate) GetCurrencyCode() OptNilString {
	return s.CurrencyCode
}

// GetCurrencySymbol returns the value of CurrencySymbol.
func (s *TransactionSplitUpdate) GetCurrencySymbol() OptString {
	return s.CurrencySymbol
}

// GetCurrencyName returns the value of CurrencyName.
func (s *TransactionSplitUpdate) GetCurrencyName() OptString {
	return s.CurrencyName
}

// GetCurrencyDecimalPlaces returns the value of CurrencyDecimalPlaces.
func (s *TransactionSplitUpdate) GetCurrencyDecimalPlaces() OptInt32 {
	return s.CurrencyDecimalPlaces
}

// GetForeignAmount returns the value of ForeignAmount.
func (s *TransactionSplitUpdate) GetForeignAmount() OptNilString {
	return s.ForeignAmount
}

// GetForeignCurrencyID returns the value of ForeignCurrencyID.
func (s *TransactionSplitUpdate) GetForeignCurrencyID() OptNilString {
	return s.ForeignCurrencyID
}

// GetForeignCurrencyCode returns the value of ForeignCurrencyCode.
func (s *TransactionSplitUpdate) GetForeignCurrencyCode() OptNilString {
	return s.ForeignCurrencyCode
}

// GetForeignCurrencySymbol returns the value of ForeignCurrencySymbol.
func (s *TransactionSplitUpdate) GetForeignCurrencySymbol() OptNilString {
	return s.ForeignCurrencySymbol
}

// GetForeignCurrencyDecimalPlaces returns the value of ForeignCurrencyDecimalPlaces.
func (s *TransactionSplitUpdate) GetForeignCurrencyDecimalPlaces() OptNilInt32 {
	return s.ForeignCurrencyDecimalPlaces
}

// GetBudgetID returns the value of BudgetID.
func (s *TransactionSplitUpdate) GetBudgetID() OptNilString {
	return s.BudgetID
}

// GetBudgetName returns the value of BudgetName.
func (s *TransactionSplitUpdate) GetBudgetName() OptNilString {
	return s.BudgetName
}

// GetCategoryID returns the value of CategoryID.
func (s *TransactionSplitUpdate) GetCategoryID() OptNilString {
	return s.CategoryID
}

// GetCategoryName returns the value of CategoryName.
func (s *TransactionSplitUpdate) GetCategoryName() OptNilString {
	return s.CategoryName
}

// GetSourceID returns the value of SourceID.
func (s *TransactionSplitUpdate) GetSourceID() OptNilString {
	return s.SourceID
}

// GetSourceName returns the value of SourceName.
func (s *TransactionSplitUpdate) GetSourceName() OptNilString {
	return s.SourceName
}

// GetSourceIban returns the value of SourceIban.
func (s *TransactionSplitUpdate) GetSourceIban() OptNilString {
	return s.SourceIban
}

// GetDestinationID returns the value of DestinationID.
func (s *TransactionSplitUpdate) GetDestinationID() OptNilString {
	return s.DestinationID
}

// GetDestinationName returns the value of DestinationName.
func (s *TransactionSplitUpdate) GetDestinationName() OptNilString {
	return s.DestinationName
}

// GetDestinationIban returns the value of DestinationIban.
func (s *TransactionSplitUpdate) GetDestinationIban() OptNilString {
	return s.DestinationIban
}

// GetReconciled returns the value of Reconciled.
func (s *TransactionSplitUpdate) GetReconciled() OptBool {
	return s.Reconciled
}

// GetBillID returns the value of BillID.
func (s *TransactionSplitUpdate) GetBillID() OptNilString {
	return s.BillID
}

// GetBillName returns the value of BillName.
func (s *TransactionSplitUpdate) GetBillName() OptNilString {
	return s.BillName
}

// GetTags returns the value of Tags.
func (s *TransactionSplitUpdate) GetTags() OptNilStringArray {
	return s.Tags
}

// GetNotes returns the value of Notes.
func (s *TransactionSplitUpdate) GetNotes() OptNilString {
	return s.Notes
}

// GetInternalReference returns the value of InternalReference.
func (s *TransactionSplitUpdate) GetInternalReference() OptNilString {
	return s.InternalReference
}

// GetExternalID returns the value of ExternalID.
func (s *TransactionSplitUpdate) GetExternalID() OptNilString {
	return s.ExternalID
}

// GetExternalURL returns the value of ExternalURL.
func (s *TransactionSplitUpdate) GetExternalURL() OptNilString {
	return s.ExternalURL
}

// GetBunqPaymentID returns the value of BunqPaymentID.
func (s *TransactionSplitUpdate) GetBunqPaymentID() OptNilString {
	return s.BunqPaymentID
}

// GetSepaCc returns the value of SepaCc.
func (s *TransactionSplitUpdate) GetSepaCc() OptNilString {
	return s.SepaCc
}

// GetSepaCtOp returns the value of SepaCtOp.
func (s *TransactionSplitUpdate) GetSepaCtOp() OptNilString {
	return s.SepaCtOp
}

// GetSepaCtID returns the value of SepaCtID.
func (s *TransactionSplitUpdate) GetSepaCtID() OptNilString {
	return s.SepaCtID
}

// GetSepaDb returns the value of SepaDb.
func (s *TransactionSplitUpdate) GetSepaDb() OptNilString {
	return s.SepaDb
}

// GetSepaCountry returns the value of SepaCountry.
func (s *TransactionSplitUpdate) GetSepaCountry() OptNilString {
	return s.SepaCountry
}

// GetSepaEp returns the value of SepaEp.
func (s *TransactionSplitUpdate) GetSepaEp() OptNilString {
	return s.SepaEp
}

// GetSepaCi returns the value of SepaCi.
func (s *TransactionSplitUpdate) GetSepaCi() OptNilString {
	return s.SepaCi
}

// GetSepaBatchID returns the value of SepaBatchID.
func (s *TransactionSplitUpdate) GetSepaBatchID() OptNilString {
	return s.SepaBatchID
}

// GetInterestDate returns the value of InterestDate.
func (s *TransactionSplitUpdate) GetInterestDate() OptNilDateTime {
	return s.InterestDate
}

// GetBookDate returns the value of BookDate.
func (s *TransactionSplitUpdate) GetBookDate() OptNilDateTime {
	return s.BookDate
}

// GetProcessDate returns the value of ProcessDate.
func (s *TransactionSplitUpdate) GetProcessDate() OptNilDateTime {
	return s.ProcessDate
}

// GetDueDate returns the value of DueDate.
func (s *TransactionSplitUpdate) GetDueDate() OptNilDateTime {
	return s.DueDate
}

// GetPaymentDate returns the value of PaymentDate.
func (s *TransactionSplitUpdate) GetPaymentDate() OptNilDateTime {
	return s.PaymentDate
}

// GetInvoiceDate returns the value of InvoiceDate.
func (s *TransactionSplitUpdate) GetInvoiceDate() OptNilDateTime {
	return s.InvoiceDate
}

// SetTransactionJournalID sets the value of TransactionJournalID.
func (s *TransactionSplitUpdate) SetTransactionJournalID(val OptString) {
	s.TransactionJournalID = val
}

// SetType sets the value of Type.
func (s *TransactionSplitUpdate) SetType(val OptTransactionTypeProperty) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *TransactionSplitUpdate) SetDate(val OptDateTime) {
	s.Date = val
}

// SetAmount sets the value of Amount.
func (s *TransactionSplitUpdate) SetAmount(val OptString) {
	s.Amount = val
}

// SetDescription sets the value of Description.
func (s *TransactionSplitUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetOrder sets the value of Order.
func (s *TransactionSplitUpdate) SetOrder(val OptNilInt32) {
	s.Order = val
}

// SetCurrencyID sets the value of CurrencyID.
func (s *TransactionSplitUpdate) SetCurrencyID(val OptNilString) {
	s.CurrencyID = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *TransactionSplitUpdate) SetCurrencyCode(val OptNilString) {
	s.CurrencyCode = val
}

// SetCurrencySymbol sets the value of CurrencySymbol.
func (s *TransactionSplitUpdate) SetCurrencySymbol(val OptString) {
	s.CurrencySymbol = val
}

// SetCurrencyName sets the value of CurrencyName.
func (s *TransactionSplitUpdate) SetCurrencyName(val OptString) {
	s.CurrencyName = val
}

// SetCurrencyDecimalPlaces sets the value of CurrencyDecimalPlaces.
func (s *TransactionSplitUpdate) SetCurrencyDecimalPlaces(val OptInt32) {
	s.CurrencyDecimalPlaces = val
}

// SetForeignAmount sets the value of ForeignAmount.
func (s *TransactionSplitUpdate) SetForeignAmount(val OptNilString) {
	s.ForeignAmount = val
}

// SetForeignCurrencyID sets the value of ForeignCurrencyID.
func (s *TransactionSplitUpdate) SetForeignCurrencyID(val OptNilString) {
	s.ForeignCurrencyID = val
}

// SetForeignCurrencyCode sets the value of ForeignCurrencyCode.
func (s *TransactionSplitUpdate) SetForeignCurrencyCode(val OptNilString) {
	s.ForeignCurrencyCode = val
}

// SetForeignCurrencySymbol sets the value of ForeignCurrencySymbol.
func (s *TransactionSplitUpdate) SetForeignCurrencySymbol(val OptNilString) {
	s.ForeignCurrencySymbol = val
}

// SetForeignCurrencyDecimalPlaces sets the value of ForeignCurrencyDecimalPlaces.
func (s *TransactionSplitUpdate) SetForeignCurrencyDecimalPlaces(val OptNilInt32) {
	s.ForeignCurrencyDecimalPlaces = val
}

// SetBudgetID sets the value of BudgetID.
func (s *TransactionSplitUpdate) SetBudgetID(val OptNilString) {
	s.BudgetID = val
}

// SetBudgetName sets the value of BudgetName.
func (s *TransactionSplitUpdate) SetBudgetName(val OptNilString) {
	s.BudgetName = val
}

// SetCategoryID sets the value of CategoryID.
func (s *TransactionSplitUpdate) SetCategoryID(val OptNilString) {
	s.CategoryID = val
}

// SetCategoryName sets the value of CategoryName.
func (s *TransactionSplitUpdate) SetCategoryName(val OptNilString) {
	s.CategoryName = val
}

// SetSourceID sets the value of SourceID.
func (s *TransactionSplitUpdate) SetSourceID(val OptNilString) {
	s.SourceID = val
}

// SetSourceName sets the value of SourceName.
func (s *TransactionSplitUpdate) SetSourceName(val OptNilString) {
	s.SourceName = val
}

// SetSourceIban sets the value of SourceIban.
func (s *TransactionSplitUpdate) SetSourceIban(val OptNilString) {
	s.SourceIban = val
}

// SetDestinationID sets the value of DestinationID.
func (s *TransactionSplitUpdate) SetDestinationID(val OptNilString) {
	s.DestinationID = val
}

// SetDestinationName sets the value of DestinationName.
func (s *TransactionSplitUpdate) SetDestinationName(val OptNilString) {
	s.DestinationName = val
}

// SetDestinationIban sets the value of DestinationIban.
func (s *TransactionSplitUpdate) SetDestinationIban(val OptNilString) {
	s.DestinationIban = val
}

// SetReconciled sets the value of Reconciled.
func (s *TransactionSplitUpdate) SetReconciled(val OptBool) {
	s.Reconciled = val
}

// SetBillID sets the value of BillID.
func (s *TransactionSplitUpdate) SetBillID(val OptNilString) {
	s.BillID = val
}

// SetBillName sets the value of BillName.
func (s *TransactionSplitUpdate) SetBillName(val OptNilString) {
	s.BillName = val
}

// SetTags sets the value of Tags.
func (s *TransactionSplitUpdate) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetNotes sets the value of Notes.
func (s *TransactionSplitUpdate) SetNotes(val OptNilString) {
	s.Notes = val
}

// SetInternalReference sets the value of InternalReference.
func (s *TransactionSplitUpdate) SetInternalReference(val OptNilString) {
	s.InternalReference = val
}

// SetExternalID sets the value of ExternalID.
func (s *TransactionSplitUpdate) SetExternalID(val OptNilString) {
	s.ExternalID = val
}

// SetExternalURL sets the value of ExternalURL.
func (s *TransactionSplitUpdate) SetExternalURL(val OptNilString) {
	s.ExternalURL = val
}

// SetBunqPaymentID sets the value of BunqPaymentID.
func (s *TransactionSplitUpdate) SetBunqPaymentID(val OptNilString) {
	s.BunqPaymentID = val
}

// SetSepaCc sets the value of SepaCc.
func (s *TransactionSplitUpdate) SetSepaCc(val OptNilString) {
	s.SepaCc = val
}

// SetSepaCtOp sets the value of SepaCtOp.
func (s *TransactionSplitUpdate) SetSepaCtOp(val OptNilString) {
	s.SepaCtOp = val
}

// SetSepaCtID sets the value of SepaCtID.
func (s *TransactionSplitUpdate) SetSepaCtID(val OptNilString) {
	s.SepaCtID = val
}

// SetSepaDb sets the value of SepaDb.
func (s *TransactionSplitUpdate) SetSepaDb(val OptNilString) {
	s.SepaDb = val
}

// SetSepaCountry sets the value of SepaCountry.
func (s *TransactionSplitUpdate) SetSepaCountry(val OptNilString) {
	s.SepaCountry = val
}

// SetSepaEp sets the value of SepaEp.
func (s *TransactionSplitUpdate) SetSepaEp(val OptNilString) {
	s.SepaEp = val
}

// SetSepaCi sets the value of SepaCi.
func (s *TransactionSplitUpdate) SetSepaCi(val OptNilString) {
	s.SepaCi = val
}

// SetSepaBatchID sets the value of SepaBatchID.
func (s *TransactionSplitUpdate) SetSepaBatchID(val OptNilString) {
	s.SepaBatchID = val
}

// SetInterestDate sets the value of InterestDate.
func (s *TransactionSplitUpdate) SetInterestDate(val OptNilDateTime) {
	s.InterestDate = val
}

// SetBookDate sets the value of BookDate.
func (s *TransactionSplitUpdate) SetBookDate(val OptNilDateTime) {
	s.BookDate = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *TransactionSplitUpdate) SetProcessDate(val OptNilDateTime) {
	s.ProcessDate = val
}

// SetDueDate sets the value of DueDate.
func (s *TransactionSplitUpdate) SetDueDate(val OptNilDateTime) {
	s.DueDate = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *TransactionSplitUpdate) SetPaymentDate(val OptNilDateTime) {
	s.PaymentDate = val
}

// SetInvoiceDate sets the value of InvoiceDate.
func (s *TransactionSplitUpdate) SetInvoiceDate(val OptNilDateTime) {
	s.InvoiceDate = val
}

// Ref: #/components/schemas/TransactionStore
type TransactionStore struct {
	// Break if the submitted transaction exists already.
	ErrorIfDuplicateHash OptBool `json:"error_if_duplicate_hash"`
	// Whether or not to apply rules when submitting transaction.
	ApplyRules OptBool `json:"apply_rules"`
	// Whether or not to fire the webhooks that are related to this event.
	FireWebhooks OptBool `json:"fire_webhooks"`
	// Title of the transaction if it has been split in more than one piece. Empty otherwise.
	GroupTitle   OptNilString            `json:"group_title"`
	Transactions []TransactionSplitStore `json:"transactions"`
}

// GetErrorIfDuplicateHash returns the value of ErrorIfDuplicateHash.
func (s *TransactionStore) GetErrorIfDuplicateHash() OptBool {
	return s.ErrorIfDuplicateHash
}

// GetApplyRules returns the value of ApplyRules.
func (s *TransactionStore) GetApplyRules() OptBool {
	return s.ApplyRules
}

// GetFireWebhooks returns the value of FireWebhooks.
func (s *TransactionStore) GetFireWebhooks() OptBool {
	return s.FireWebhooks
}

// GetGroupTitle returns the value of GroupTitle.
func (s *TransactionStore) GetGroupTitle() OptNilString {
	return s.GroupTitle
}

// GetTransactions returns the value of Transactions.
func (s *TransactionStore) GetTransactions() []TransactionSplitStore {
	return s.Transactions
}

// SetErrorIfDuplicateHash sets the value of ErrorIfDuplicateHash.
func (s *TransactionStore) SetErrorIfDuplicateHash(val OptBool) {
	s.ErrorIfDuplicateHash = val
}

// SetApplyRules sets the value of ApplyRules.
func (s *TransactionStore) SetApplyRules(val OptBool) {
	s.ApplyRules = val
}

// SetFireWebhooks sets the value of FireWebhooks.
func (s *TransactionStore) SetFireWebhooks(val OptBool) {
	s.FireWebhooks = val
}

// SetGroupTitle sets the value of GroupTitle.
func (s *TransactionStore) SetGroupTitle(val OptNilString) {
	s.GroupTitle = val
}

// SetTransactions sets the value of Transactions.
func (s *TransactionStore) SetTransactions(val []TransactionSplitStore) {
	s.Transactions = val
}

// Ref: #/components/schemas/TransactionTypeFilter
type TransactionTypeFilter string

const (
	TransactionTypeFilterAll            TransactionTypeFilter = "all"
	TransactionTypeFilterWithdrawal     TransactionTypeFilter = "withdrawal"
	TransactionTypeFilterWithdrawals    TransactionTypeFilter = "withdrawals"
	TransactionTypeFilterExpense        TransactionTypeFilter = "expense"
	TransactionTypeFilterDeposit        TransactionTypeFilter = "deposit"
	TransactionTypeFilterDeposits       TransactionTypeFilter = "deposits"
	TransactionTypeFilterIncome         TransactionTypeFilter = "income"
	TransactionTypeFilterTransfer       TransactionTypeFilter = "transfer"
	TransactionTypeFilterTransfers      TransactionTypeFilter = "transfers"
	TransactionTypeFilterOpeningBalance TransactionTypeFilter = "opening_balance"
	TransactionTypeFilterReconciliation TransactionTypeFilter = "reconciliation"
	TransactionTypeFilterSpecial        TransactionTypeFilter = "special"
	TransactionTypeFilterSpecials       TransactionTypeFilter = "specials"
	TransactionTypeFilterDefault        TransactionTypeFilter = "default"
)

// AllValues returns all TransactionTypeFilter values.
func (TransactionTypeFilter) AllValues() []TransactionTypeFilter {
	return []TransactionTypeFilter{
		TransactionTypeFilterAll,
		TransactionTypeFilterWithdrawal,
		TransactionTypeFilterWithdrawals,
		TransactionTypeFilterExpense,
		TransactionTypeFilterDeposit,
		TransactionTypeFilterDeposits,
		TransactionTypeFilterIncome,
		TransactionTypeFilterTransfer,
		TransactionTypeFilterTransfers,
		TransactionTypeFilterOpeningBalance,
		TransactionTypeFilterReconciliation,
		TransactionTypeFilterSpecial,
		TransactionTypeFilterSpecials,
		TransactionTypeFilterDefault,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransactionTypeFilter) MarshalText() ([]byte, error) {
	switch s {
	case TransactionTypeFilterAll:
		return []byte(s), nil
	case TransactionTypeFilterWithdrawal:
		return []byte(s), nil
	case TransactionTypeFilterWithdrawals:
		return []byte(s), nil
	case TransactionTypeFilterExpense:
		return []byte(s), nil
	case TransactionTypeFilterDeposit:
		return []byte(s), nil
	case TransactionTypeFilterDeposits:
		return []byte(s), nil
	case TransactionTypeFilterIncome:
		return []byte(s), nil
	case TransactionTypeFilterTransfer:
		return []byte(s), nil
	case TransactionTypeFilterTransfers:
		return []byte(s), nil
	case TransactionTypeFilterOpeningBalance:
		return []byte(s), nil
	case TransactionTypeFilterReconciliation:
		return []byte(s), nil
	case TransactionTypeFilterSpecial:
		return []byte(s), nil
	case TransactionTypeFilterSpecials:
		return []byte(s), nil
	case TransactionTypeFilterDefault:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransactionTypeFilter) UnmarshalText(data []byte) error {
	switch TransactionTypeFilter(data) {
	case TransactionTypeFilterAll:
		*s = TransactionTypeFilterAll
		return nil
	case TransactionTypeFilterWithdrawal:
		*s = TransactionTypeFilterWithdrawal
		return nil
	case TransactionTypeFilterWithdrawals:
		*s = TransactionTypeFilterWithdrawals
		return nil
	case TransactionTypeFilterExpense:
		*s = TransactionTypeFilterExpense
		return nil
	case TransactionTypeFilterDeposit:
		*s = TransactionTypeFilterDeposit
		return nil
	case TransactionTypeFilterDeposits:
		*s = TransactionTypeFilterDeposits
		return nil
	case TransactionTypeFilterIncome:
		*s = TransactionTypeFilterIncome
		return nil
	case TransactionTypeFilterTransfer:
		*s = TransactionTypeFilterTransfer
		return nil
	case TransactionTypeFilterTransfers:
		*s = TransactionTypeFilterTransfers
		return nil
	case TransactionTypeFilterOpeningBalance:
		*s = TransactionTypeFilterOpeningBalance
		return nil
	case TransactionTypeFilterReconciliation:
		*s = TransactionTypeFilterReconciliation
		return nil
	case TransactionTypeFilterSpecial:
		*s = TransactionTypeFilterSpecial
		return nil
	case TransactionTypeFilterSpecials:
		*s = TransactionTypeFilterSpecials
		return nil
	case TransactionTypeFilterDefault:
		*s = TransactionTypeFilterDefault
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TransactionTypeProperty
type TransactionTypeProperty string

const (
	TransactionTypePropertyWithdrawal     TransactionTypeProperty = "withdrawal"
	TransactionTypePropertyDeposit        TransactionTypeProperty = "deposit"
	TransactionTypePropertyTransfer       TransactionTypeProperty = "transfer"
	TransactionTypePropertyReconciliation TransactionTypeProperty = "reconciliation"
	TransactionTypePropertyOpeningBalance TransactionTypeProperty = "opening balance"
)

// AllValues returns all TransactionTypeProperty values.
func (TransactionTypeProperty) AllValues() []TransactionTypeProperty {
	return []TransactionTypeProperty{
		TransactionTypePropertyWithdrawal,
		TransactionTypePropertyDeposit,
		TransactionTypePropertyTransfer,
		TransactionTypePropertyReconciliation,
		TransactionTypePropertyOpeningBalance,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransactionTypeProperty) MarshalText() ([]byte, error) {
	switch s {
	case TransactionTypePropertyWithdrawal:
		return []byte(s), nil
	case TransactionTypePropertyDeposit:
		return []byte(s), nil
	case TransactionTypePropertyTransfer:
		return []byte(s), nil
	case TransactionTypePropertyReconciliation:
		return []byte(s), nil
	case TransactionTypePropertyOpeningBalance:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransactionTypeProperty) UnmarshalText(data []byte) error {
	switch TransactionTypeProperty(data) {
	case TransactionTypePropertyWithdrawal:
		*s = TransactionTypePropertyWithdrawal
		return nil
	case TransactionTypePropertyDeposit:
		*s = TransactionTypePropertyDeposit
		return nil
	case TransactionTypePropertyTransfer:
		*s = TransactionTypePropertyTransfer
		return nil
	case TransactionTypePropertyReconciliation:
		*s = TransactionTypePropertyReconciliation
		return nil
	case TransactionTypePropertyOpeningBalance:
		*s = TransactionTypePropertyOpeningBalance
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TransactionUpdate
type TransactionUpdate struct {
	// Whether or not to apply rules when submitting transaction.
	ApplyRules OptBool `json:"apply_rules"`
	// Whether or not to fire the webhooks that are related to this event.
	FireWebhooks OptBool `json:"fire_webhooks"`
	// Title of the transaction if it has been split in more than one piece. Empty otherwise.
	GroupTitle   OptNilString             `json:"group_title"`
	Transactions []TransactionSplitUpdate `json:"transactions"`
}

// GetApplyRules returns the value of ApplyRules.
func (s *TransactionUpdate) GetApplyRules() OptBool {
	return s.ApplyRules
}

// GetFireWebhooks returns the value of FireWebhooks.
func (s *TransactionUpdate) GetFireWebhooks() OptBool {
	return s.FireWebhooks
}

// GetGroupTitle returns the value of GroupTitle.
func (s *TransactionUpdate) GetGroupTitle() OptNilString {
	return s.GroupTitle
}

// GetTransactions returns the value of Transactions.
func (s *TransactionUpdate) GetTransactions() []TransactionSplitUpdate {
	return s.Transactions
}

// SetApplyRules sets the value of ApplyRules.
func (s *TransactionUpdate) SetApplyRules(val OptBool) {
	s.ApplyRules = val
}

// SetFireWebhooks sets the value of FireWebhooks.
func (s *TransactionUpdate) SetFireWebhooks(val OptBool) {
	s.FireWebhooks = val
}

// SetGroupTitle sets the value of GroupTitle.
func (s *TransactionUpdate) SetGroupTitle(val OptNilString) {
	s.GroupTitle = val
}

// SetTransactions sets the value of Transactions.
func (s *TransactionUpdate) SetTransactions(val []TransactionSplitUpdate) {
	s.Transactions = val
}

// Ref: #/components/schemas/Unauthenticated
type Unauthenticated struct {
	Message   OptString `json:"message"`
	Exception OptString `json:"exception"`
}

// GetMessage returns the value of Message.
func (s *Unauthenticated) GetMessage() OptString {
	return s.Message
}

// GetException returns the value of Exception.
func (s *Unauthenticated) GetException() OptString {
	return s.Exception
}

// SetMessage sets the value of Message.
func (s *Unauthenticated) SetMessage(val OptString) {
	s.Message = val
}

// SetException sets the value of Exception.
func (s *Unauthenticated) SetException(val OptString) {
	s.Exception = val
}

func (*Unauthenticated) bulkUpdateTransactionsRes()         {}
func (*Unauthenticated) defaultCurrencyRes()                {}
func (*Unauthenticated) deleteAccountRes()                  {}
func (*Unauthenticated) deleteAttachmentRes()               {}
func (*Unauthenticated) deleteBillRes()                     {}
func (*Unauthenticated) deleteBudgetLimitRes()              {}
func (*Unauthenticated) deleteBudgetRes()                   {}
func (*Unauthenticated) deleteCategoryRes()                 {}
func (*Unauthenticated) deleteCurrencyRes()                 {}
func (*Unauthenticated) deleteLinkTypeRes()                 {}
func (*Unauthenticated) deleteObjectGroupRes()              {}
func (*Unauthenticated) deletePiggyBankRes()                {}
func (*Unauthenticated) deleteRecurrenceRes()               {}
func (*Unauthenticated) deleteRuleGroupRes()                {}
func (*Unauthenticated) deleteRuleRes()                     {}
func (*Unauthenticated) deleteTagRes()                      {}
func (*Unauthenticated) deleteTransactionJournalRes()       {}
func (*Unauthenticated) deleteTransactionLinkRes()          {}
func (*Unauthenticated) deleteTransactionRes()              {}
func (*Unauthenticated) deleteUserRes()                     {}
func (*Unauthenticated) deleteWebhookMessageAttemptRes()    {}
func (*Unauthenticated) deleteWebhookMessageRes()           {}
func (*Unauthenticated) deleteWebhookRes()                  {}
func (*Unauthenticated) destroyDataRes()                    {}
func (*Unauthenticated) disableCurrencyRes()                {}
func (*Unauthenticated) downloadAttachmentRes()             {}
func (*Unauthenticated) enableCurrencyRes()                 {}
func (*Unauthenticated) exportAccountsRes()                 {}
func (*Unauthenticated) exportBillsRes()                    {}
func (*Unauthenticated) exportBudgetsRes()                  {}
func (*Unauthenticated) exportCategoriesRes()               {}
func (*Unauthenticated) exportPiggiesRes()                  {}
func (*Unauthenticated) exportRecurringRes()                {}
func (*Unauthenticated) exportRulesRes()                    {}
func (*Unauthenticated) exportTagsRes()                     {}
func (*Unauthenticated) exportTransactionsRes()             {}
func (*Unauthenticated) fireRuleGroupRes()                  {}
func (*Unauthenticated) fireRuleRes()                       {}
func (*Unauthenticated) getAboutRes()                       {}
func (*Unauthenticated) getAccountRes()                     {}
func (*Unauthenticated) getAccountsACRes()                  {}
func (*Unauthenticated) getAttachmentRes()                  {}
func (*Unauthenticated) getAvailableBudgetRes()             {}
func (*Unauthenticated) getBasicSummaryRes()                {}
func (*Unauthenticated) getBillRes()                        {}
func (*Unauthenticated) getBillsACRes()                     {}
func (*Unauthenticated) getBudgetLimitRes()                 {}
func (*Unauthenticated) getBudgetRes()                      {}
func (*Unauthenticated) getBudgetsACRes()                   {}
func (*Unauthenticated) getCategoriesACRes()                {}
func (*Unauthenticated) getCategoryRes()                    {}
func (*Unauthenticated) getChartAccountOverviewRes()        {}
func (*Unauthenticated) getConfigurationRes()               {}
func (*Unauthenticated) getCronRes()                        {}
func (*Unauthenticated) getCurrenciesACRes()                {}
func (*Unauthenticated) getCurrenciesCodeACRes()            {}
func (*Unauthenticated) getCurrencyRes()                    {}
func (*Unauthenticated) getCurrentUserRes()                 {}
func (*Unauthenticated) getDefaultCurrencyRes()             {}
func (*Unauthenticated) getLinkTypeRes()                    {}
func (*Unauthenticated) getObjectGroupRes()                 {}
func (*Unauthenticated) getObjectGroupsACRes()              {}
func (*Unauthenticated) getPiggiesACRes()                   {}
func (*Unauthenticated) getPiggiesBalanceACRes()            {}
func (*Unauthenticated) getPiggyBankRes()                   {}
func (*Unauthenticated) getPreferenceRes()                  {}
func (*Unauthenticated) getRecurrenceRes()                  {}
func (*Unauthenticated) getRecurringACRes()                 {}
func (*Unauthenticated) getRuleGroupRes()                   {}
func (*Unauthenticated) getRuleGroupsACRes()                {}
func (*Unauthenticated) getRuleRes()                        {}
func (*Unauthenticated) getRulesACRes()                     {}
func (*Unauthenticated) getSingleConfigurationRes()         {}
func (*Unauthenticated) getSingleWebhookMessageAttemptRes() {}
func (*Unauthenticated) getSingleWebhookMessageRes()        {}
func (*Unauthenticated) getTagACRes()                       {}
func (*Unauthenticated) getTagRes()                         {}
func (*Unauthenticated) getTransactionByJournalRes()        {}
func (*Unauthenticated) getTransactionLinkRes()             {}
func (*Unauthenticated) getTransactionRes()                 {}
func (*Unauthenticated) getTransactionTypesACRes()          {}
func (*Unauthenticated) getTransactionsACRes()              {}
func (*Unauthenticated) getTransactionsIDACRes()            {}
func (*Unauthenticated) getUserRes()                        {}
func (*Unauthenticated) getWebhookMessageAttemptsRes()      {}
func (*Unauthenticated) getWebhookMessagesRes()             {}
func (*Unauthenticated) getWebhookRes()                     {}
func (*Unauthenticated) insightExpenseAssetRes()            {}
func (*Unauthenticated) insightExpenseBillRes()             {}
func (*Unauthenticated) insightExpenseBudgetRes()           {}
func (*Unauthenticated) insightExpenseCategoryRes()         {}
func (*Unauthenticated) insightExpenseExpenseRes()          {}
func (*Unauthenticated) insightExpenseNoBillRes()           {}
func (*Unauthenticated) insightExpenseNoBudgetRes()         {}
func (*Unauthenticated) insightExpenseNoCategoryRes()       {}
func (*Unauthenticated) insightExpenseNoTagRes()            {}
func (*Unauthenticated) insightExpenseTagRes()              {}
func (*Unauthenticated) insightExpenseTotalRes()            {}
func (*Unauthenticated) insightIncomeAssetRes()             {}
func (*Unauthenticated) insightIncomeCategoryRes()          {}
func (*Unauthenticated) insightIncomeNoCategoryRes()        {}
func (*Unauthenticated) insightIncomeNoTagRes()             {}
func (*Unauthenticated) insightIncomeRevenueRes()           {}
func (*Unauthenticated) insightIncomeTagRes()               {}
func (*Unauthenticated) insightIncomeTotalRes()             {}
func (*Unauthenticated) insightTransferCategoryRes()        {}
func (*Unauthenticated) insightTransferNoCategoryRes()      {}
func (*Unauthenticated) insightTransferNoTagRes()           {}
func (*Unauthenticated) insightTransferTagRes()             {}
func (*Unauthenticated) insightTransferTotalRes()           {}
func (*Unauthenticated) insightTransfersRes()               {}
func (*Unauthenticated) listAccountByCurrencyRes()          {}
func (*Unauthenticated) listAccountRes()                    {}
func (*Unauthenticated) listAttachmentByAccountRes()        {}
func (*Unauthenticated) listAttachmentByBillRes()           {}
func (*Unauthenticated) listAttachmentByBudgetRes()         {}
func (*Unauthenticated) listAttachmentByCategoryRes()       {}
func (*Unauthenticated) listAttachmentByPiggyBankRes()      {}
func (*Unauthenticated) listAttachmentByTagRes()            {}
func (*Unauthenticated) listAttachmentByTransactionRes()    {}
func (*Unauthenticated) listAttachmentRes()                 {}
func (*Unauthenticated) listAvailableBudgetByCurrencyRes()  {}
func (*Unauthenticated) listAvailableBudgetRes()            {}
func (*Unauthenticated) listBillByCurrencyRes()             {}
func (*Unauthenticated) listBillByObjectGroupRes()          {}
func (*Unauthenticated) listBillRes()                       {}
func (*Unauthenticated) listBudgetLimitByBudgetRes()        {}
func (*Unauthenticated) listBudgetLimitByCurrencyRes()      {}
func (*Unauthenticated) listBudgetLimitRes()                {}
func (*Unauthenticated) listBudgetRes()                     {}
func (*Unauthenticated) listCategoryRes()                   {}
func (*Unauthenticated) listCurrencyRes()                   {}
func (*Unauthenticated) listEventByPiggyBankRes()           {}
func (*Unauthenticated) listEventByTransactionRes()         {}
func (*Unauthenticated) listLinkTypeRes()                   {}
func (*Unauthenticated) listLinksByJournalRes()             {}
func (*Unauthenticated) listObjectGroupsRes()               {}
func (*Unauthenticated) listPiggyBankByAccountRes()         {}
func (*Unauthenticated) listPiggyBankByObjectGroupRes()     {}
func (*Unauthenticated) listPiggyBankRes()                  {}
func (*Unauthenticated) listPreferenceRes()                 {}
func (*Unauthenticated) listRecurrenceByCurrencyRes()       {}
func (*Unauthenticated) listRecurrenceRes()                 {}
func (*Unauthenticated) listRuleByBillRes()                 {}
func (*Unauthenticated) listRuleByCurrencyRes()             {}
func (*Unauthenticated) listRuleByGroupRes()                {}
func (*Unauthenticated) listRuleGroupRes()                  {}
func (*Unauthenticated) listRuleRes()                       {}
func (*Unauthenticated) listTagRes()                        {}
func (*Unauthenticated) listTransactionByAccountRes()       {}
func (*Unauthenticated) listTransactionByBillRes()          {}
func (*Unauthenticated) listTransactionByBudgetLimitRes()   {}
func (*Unauthenticated) listTransactionByBudgetRes()        {}
func (*Unauthenticated) listTransactionByCategoryRes()      {}
func (*Unauthenticated) listTransactionByCurrencyRes()      {}
func (*Unauthenticated) listTransactionByLinkTypeRes()      {}
func (*Unauthenticated) listTransactionByRecurrenceRes()    {}
func (*Unauthenticated) listTransactionByTagRes()           {}
func (*Unauthenticated) listTransactionLinkRes()            {}
func (*Unauthenticated) listTransactionRes()                {}
func (*Unauthenticated) listUserRes()                       {}
func (*Unauthenticated) listWebhookRes()                    {}
func (*Unauthenticated) purgeDataRes()                      {}
func (*Unauthenticated) searchAccountsRes()                 {}
func (*Unauthenticated) searchTransactionsRes()             {}
func (*Unauthenticated) setConfigurationRes()               {}
func (*Unauthenticated) storeAccountRes()                   {}
func (*Unauthenticated) storeAttachmentRes()                {}
func (*Unauthenticated) storeBillRes()                      {}
func (*Unauthenticated) storeBudgetLimitRes()               {}
func (*Unauthenticated) storeBudgetRes()                    {}
func (*Unauthenticated) storeCategoryRes()                  {}
func (*Unauthenticated) storeCurrencyRes()                  {}
func (*Unauthenticated) storeLinkTypeRes()                  {}
func (*Unauthenticated) storePiggyBankRes()                 {}
func (*Unauthenticated) storePreferenceRes()                {}
func (*Unauthenticated) storeRecurrenceRes()                {}
func (*Unauthenticated) storeRuleGroupRes()                 {}
func (*Unauthenticated) storeRuleRes()                      {}
func (*Unauthenticated) storeTagRes()                       {}
func (*Unauthenticated) storeTransactionLinkRes()           {}
func (*Unauthenticated) storeTransactionRes()               {}
func (*Unauthenticated) storeUserRes()                      {}
func (*Unauthenticated) storeWebhookRes()                   {}
func (*Unauthenticated) testRuleGroupRes()                  {}
func (*Unauthenticated) testRuleRes()                       {}
func (*Unauthenticated) updateAccountRes()                  {}
func (*Unauthenticated) updateAttachmentRes()               {}
func (*Unauthenticated) updateBillRes()                     {}
func (*Unauthenticated) updateBudgetLimitRes()              {}
func (*Unauthenticated) updateBudgetRes()                   {}
func (*Unauthenticated) updateCategoryRes()                 {}
func (*Unauthenticated) updateCurrencyRes()                 {}
func (*Unauthenticated) updateLinkTypeRes()                 {}
func (*Unauthenticated) updateObjectGroupRes()              {}
func (*Unauthenticated) updatePiggyBankRes()                {}
func (*Unauthenticated) updatePreferenceRes()               {}
func (*Unauthenticated) updateRecurrenceRes()               {}
func (*Unauthenticated) updateRuleGroupRes()                {}
func (*Unauthenticated) updateRuleRes()                     {}
func (*Unauthenticated) updateTagRes()                      {}
func (*Unauthenticated) updateTransactionLinkRes()          {}
func (*Unauthenticated) updateTransactionRes()              {}
func (*Unauthenticated) updateUserRes()                     {}
func (*Unauthenticated) updateWebhookRes()                  {}
func (*Unauthenticated) uploadAttachmentRes()               {}

// UploadAttachmentNoContent is response for UploadAttachment operation.
type UploadAttachmentNoContent struct{}

func (*UploadAttachmentNoContent) uploadAttachmentRes() {}

type UploadAttachmentReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadAttachmentReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// Ref: #/components/schemas/User
type User struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// The new users email address.
	Email string `json:"email"`
	// Boolean to indicate if the user is blocked.
	Blocked     OptBool                       `json:"blocked"`
	BlockedCode OptNilUserBlockedCodeProperty `json:"blocked_code"`
	Role        OptNilUserRoleProperty        `json:"role"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *User) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetBlocked returns the value of Blocked.
func (s *User) GetBlocked() OptBool {
	return s.Blocked
}

// GetBlockedCode returns the value of BlockedCode.
func (s *User) GetBlockedCode() OptNilUserBlockedCodeProperty {
	return s.BlockedCode
}

// GetRole returns the value of Role.
func (s *User) GetRole() OptNilUserRoleProperty {
	return s.Role
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *User) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetBlocked sets the value of Blocked.
func (s *User) SetBlocked(val OptBool) {
	s.Blocked = val
}

// SetBlockedCode sets the value of BlockedCode.
func (s *User) SetBlockedCode(val OptNilUserBlockedCodeProperty) {
	s.BlockedCode = val
}

// SetRole sets the value of Role.
func (s *User) SetRole(val OptNilUserRoleProperty) {
	s.Role = val
}

// Ref: #/components/schemas/UserArray
type UserArray struct {
	Data  []UserRead `json:"data"`
	Meta  Meta       `json:"meta"`
	Links PageLink   `json:"links"`
}

// GetData returns the value of Data.
func (s *UserArray) GetData() []UserRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *UserArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *UserArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *UserArray) SetData(val []UserRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *UserArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *UserArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*UserArray) listUserRes() {}

// If you say the user must be blocked, this will be the reason code.
// Ref: #/components/schemas/UserBlockedCodeProperty
type UserBlockedCodeProperty string

const (
	UserBlockedCodePropertyEmailChanged UserBlockedCodeProperty = "email_changed"
)

// AllValues returns all UserBlockedCodeProperty values.
func (UserBlockedCodeProperty) AllValues() []UserBlockedCodeProperty {
	return []UserBlockedCodeProperty{
		UserBlockedCodePropertyEmailChanged,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserBlockedCodeProperty) MarshalText() ([]byte, error) {
	switch s {
	case UserBlockedCodePropertyEmailChanged:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBlockedCodeProperty) UnmarshalText(data []byte) error {
	switch UserBlockedCodeProperty(data) {
	case UserBlockedCodePropertyEmailChanged:
		*s = UserBlockedCodePropertyEmailChanged
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes User       `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *UserRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *UserRead) GetAttributes() User {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *UserRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *UserRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *UserRead) SetAttributes(val User) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *UserRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Role for the user. Can be empty or omitted.
// Ref: #/components/schemas/UserRoleProperty
type UserRoleProperty string

const (
	UserRolePropertyOwner UserRoleProperty = "owner"
	UserRolePropertyDemo  UserRoleProperty = "demo"
)

// AllValues returns all UserRoleProperty values.
func (UserRoleProperty) AllValues() []UserRoleProperty {
	return []UserRoleProperty{
		UserRolePropertyOwner,
		UserRolePropertyDemo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserRoleProperty) MarshalText() ([]byte, error) {
	switch s {
	case UserRolePropertyOwner:
		return []byte(s), nil
	case UserRolePropertyDemo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserRoleProperty) UnmarshalText(data []byte) error {
	switch UserRoleProperty(data) {
	case UserRolePropertyOwner:
		*s = UserRolePropertyOwner
		return nil
	case UserRolePropertyDemo:
		*s = UserRolePropertyDemo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserSingle
type UserSingle struct {
	Data UserRead `json:"data"`
}

// GetData returns the value of Data.
func (s *UserSingle) GetData() UserRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *UserSingle) SetData(val UserRead) {
	s.Data = val
}

func (*UserSingle) getCurrentUserRes() {}
func (*UserSingle) getUserRes()        {}
func (*UserSingle) storeUserRes()      {}
func (*UserSingle) updateUserRes()     {}

// Ref: #/components/schemas/ValidationError
type ValidationError struct {
	Message OptString                `json:"message"`
	Errors  OptValidationErrorErrors `json:"errors"`
}

// GetMessage returns the value of Message.
func (s *ValidationError) GetMessage() OptString {
	return s.Message
}

// GetErrors returns the value of Errors.
func (s *ValidationError) GetErrors() OptValidationErrorErrors {
	return s.Errors
}

// SetMessage sets the value of Message.
func (s *ValidationError) SetMessage(val OptString) {
	s.Message = val
}

// SetErrors sets the value of Errors.
func (s *ValidationError) SetErrors(val OptValidationErrorErrors) {
	s.Errors = val
}

func (*ValidationError) setConfigurationRes()      {}
func (*ValidationError) storeAccountRes()          {}
func (*ValidationError) storeAttachmentRes()       {}
func (*ValidationError) storeBillRes()             {}
func (*ValidationError) storeBudgetLimitRes()      {}
func (*ValidationError) storeBudgetRes()           {}
func (*ValidationError) storeCategoryRes()         {}
func (*ValidationError) storeCurrencyRes()         {}
func (*ValidationError) storeLinkTypeRes()         {}
func (*ValidationError) storePiggyBankRes()        {}
func (*ValidationError) storePreferenceRes()       {}
func (*ValidationError) storeRecurrenceRes()       {}
func (*ValidationError) storeRuleGroupRes()        {}
func (*ValidationError) storeRuleRes()             {}
func (*ValidationError) storeTagRes()              {}
func (*ValidationError) storeTransactionLinkRes()  {}
func (*ValidationError) storeTransactionRes()      {}
func (*ValidationError) storeUserRes()             {}
func (*ValidationError) storeWebhookRes()          {}
func (*ValidationError) updateAccountRes()         {}
func (*ValidationError) updateAttachmentRes()      {}
func (*ValidationError) updateBillRes()            {}
func (*ValidationError) updateBudgetLimitRes()     {}
func (*ValidationError) updateBudgetRes()          {}
func (*ValidationError) updateCategoryRes()        {}
func (*ValidationError) updateCurrencyRes()        {}
func (*ValidationError) updateLinkTypeRes()        {}
func (*ValidationError) updateObjectGroupRes()     {}
func (*ValidationError) updatePiggyBankRes()       {}
func (*ValidationError) updatePreferenceRes()      {}
func (*ValidationError) updateRecurrenceRes()      {}
func (*ValidationError) updateRuleGroupRes()       {}
func (*ValidationError) updateRuleRes()            {}
func (*ValidationError) updateTagRes()             {}
func (*ValidationError) updateTransactionLinkRes() {}
func (*ValidationError) updateTransactionRes()     {}
func (*ValidationError) updateUserRes()            {}
func (*ValidationError) updateWebhookRes()         {}
func (*ValidationError) uploadAttachmentRes()      {}

type ValidationErrorErrors struct {
	Email       []string `json:"email"`
	Blocked     []string `json:"blocked"`
	Role        []string `json:"role"`
	BlockedCode []string `json:"blocked_code"`
	Name        []string `json:"name"`
	Type        []string `json:"type"`
	Iban        []string `json:"iban"`
	Start       []string `json:"start"`
	End         []string `json:"end"`
	Date        []string `json:"date"`
}

// GetEmail returns the value of Email.
func (s *ValidationErrorErrors) GetEmail() []string {
	return s.Email
}

// GetBlocked returns the value of Blocked.
func (s *ValidationErrorErrors) GetBlocked() []string {
	return s.Blocked
}

// GetRole returns the value of Role.
func (s *ValidationErrorErrors) GetRole() []string {
	return s.Role
}

// GetBlockedCode returns the value of BlockedCode.
func (s *ValidationErrorErrors) GetBlockedCode() []string {
	return s.BlockedCode
}

// GetName returns the value of Name.
func (s *ValidationErrorErrors) GetName() []string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ValidationErrorErrors) GetType() []string {
	return s.Type
}

// GetIban returns the value of Iban.
func (s *ValidationErrorErrors) GetIban() []string {
	return s.Iban
}

// GetStart returns the value of Start.
func (s *ValidationErrorErrors) GetStart() []string {
	return s.Start
}

// GetEnd returns the value of End.
func (s *ValidationErrorErrors) GetEnd() []string {
	return s.End
}

// GetDate returns the value of Date.
func (s *ValidationErrorErrors) GetDate() []string {
	return s.Date
}

// SetEmail sets the value of Email.
func (s *ValidationErrorErrors) SetEmail(val []string) {
	s.Email = val
}

// SetBlocked sets the value of Blocked.
func (s *ValidationErrorErrors) SetBlocked(val []string) {
	s.Blocked = val
}

// SetRole sets the value of Role.
func (s *ValidationErrorErrors) SetRole(val []string) {
	s.Role = val
}

// SetBlockedCode sets the value of BlockedCode.
func (s *ValidationErrorErrors) SetBlockedCode(val []string) {
	s.BlockedCode = val
}

// SetName sets the value of Name.
func (s *ValidationErrorErrors) SetName(val []string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ValidationErrorErrors) SetType(val []string) {
	s.Type = val
}

// SetIban sets the value of Iban.
func (s *ValidationErrorErrors) SetIban(val []string) {
	s.Iban = val
}

// SetStart sets the value of Start.
func (s *ValidationErrorErrors) SetStart(val []string) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *ValidationErrorErrors) SetEnd(val []string) {
	s.End = val
}

// SetDate sets the value of Date.
func (s *ValidationErrorErrors) SetDate(val []string) {
	s.Date = val
}

// Ref: #/components/schemas/Webhook
type Webhook struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// Boolean to indicate if the webhook is active.
	Active OptBool `json:"active"`
	// A title for the webhook for easy recognition.
	Title string `json:"title"`
	// A 24-character secret for the webhook. It's generated by Firefly III when saving a new webhook. If
	// you submit a new secret through the PUT endpoint it will generate a new secret for the selected
	// webhook, a new secret bearing no relation to whatever you just submitted.
	Secret   OptString       `json:"secret"`
	Trigger  WebhookTrigger  `json:"trigger"`
	Response WebhookResponse `json:"response"`
	Delivery WebhookDelivery `json:"delivery"`
	// The URL of the webhook. Has to start with `https`.
	URL string `json:"url"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Webhook) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Webhook) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetActive returns the value of Active.
func (s *Webhook) GetActive() OptBool {
	return s.Active
}

// GetTitle returns the value of Title.
func (s *Webhook) GetTitle() string {
	return s.Title
}

// GetSecret returns the value of Secret.
func (s *Webhook) GetSecret() OptString {
	return s.Secret
}

// GetTrigger returns the value of Trigger.
func (s *Webhook) GetTrigger() WebhookTrigger {
	return s.Trigger
}

// GetResponse returns the value of Response.
func (s *Webhook) GetResponse() WebhookResponse {
	return s.Response
}

// GetDelivery returns the value of Delivery.
func (s *Webhook) GetDelivery() WebhookDelivery {
	return s.Delivery
}

// GetURL returns the value of URL.
func (s *Webhook) GetURL() string {
	return s.URL
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Webhook) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Webhook) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetActive sets the value of Active.
func (s *Webhook) SetActive(val OptBool) {
	s.Active = val
}

// SetTitle sets the value of Title.
func (s *Webhook) SetTitle(val string) {
	s.Title = val
}

// SetSecret sets the value of Secret.
func (s *Webhook) SetSecret(val OptString) {
	s.Secret = val
}

// SetTrigger sets the value of Trigger.
func (s *Webhook) SetTrigger(val WebhookTrigger) {
	s.Trigger = val
}

// SetResponse sets the value of Response.
func (s *Webhook) SetResponse(val WebhookResponse) {
	s.Response = val
}

// SetDelivery sets the value of Delivery.
func (s *Webhook) SetDelivery(val WebhookDelivery) {
	s.Delivery = val
}

// SetURL sets the value of URL.
func (s *Webhook) SetURL(val string) {
	s.URL = val
}

// Ref: #/components/schemas/WebhookArray
type WebhookArray struct {
	Data  []WebhookRead `json:"data"`
	Meta  Meta          `json:"meta"`
	Links PageLink      `json:"links"`
}

// GetData returns the value of Data.
func (s *WebhookArray) GetData() []WebhookRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *WebhookArray) GetMeta() Meta {
	return s.Meta
}

// GetLinks returns the value of Links.
func (s *WebhookArray) GetLinks() PageLink {
	return s.Links
}

// SetData sets the value of Data.
func (s *WebhookArray) SetData(val []WebhookRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *WebhookArray) SetMeta(val Meta) {
	s.Meta = val
}

// SetLinks sets the value of Links.
func (s *WebhookArray) SetLinks(val PageLink) {
	s.Links = val
}

func (*WebhookArray) listWebhookRes() {}

// Ref: #/components/schemas/WebhookAttempt
type WebhookAttempt struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// The ID of the webhook message this attempt belongs to.
	WebhookMessageID OptString `json:"webhook_message_id"`
	// The HTTP status code of the error, if any.
	StatusCode OptNilInt32 `json:"status_code"`
	// Internal log for this attempt. May contain sensitive user data.
	Logs OptNilString `json:"logs"`
	// Webhook receiver response for this attempt, if any. May contain sensitive user data.
	Response OptNilString `json:"response"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *WebhookAttempt) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *WebhookAttempt) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetWebhookMessageID returns the value of WebhookMessageID.
func (s *WebhookAttempt) GetWebhookMessageID() OptString {
	return s.WebhookMessageID
}

// GetStatusCode returns the value of StatusCode.
func (s *WebhookAttempt) GetStatusCode() OptNilInt32 {
	return s.StatusCode
}

// GetLogs returns the value of Logs.
func (s *WebhookAttempt) GetLogs() OptNilString {
	return s.Logs
}

// GetResponse returns the value of Response.
func (s *WebhookAttempt) GetResponse() OptNilString {
	return s.Response
}

// SetCreatedAt sets the value of CreatedAt.
func (s *WebhookAttempt) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *WebhookAttempt) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetWebhookMessageID sets the value of WebhookMessageID.
func (s *WebhookAttempt) SetWebhookMessageID(val OptString) {
	s.WebhookMessageID = val
}

// SetStatusCode sets the value of StatusCode.
func (s *WebhookAttempt) SetStatusCode(val OptNilInt32) {
	s.StatusCode = val
}

// SetLogs sets the value of Logs.
func (s *WebhookAttempt) SetLogs(val OptNilString) {
	s.Logs = val
}

// SetResponse sets the value of Response.
func (s *WebhookAttempt) SetResponse(val OptNilString) {
	s.Response = val
}

// Ref: #/components/schemas/WebhookAttemptArray
type WebhookAttemptArray struct {
	Data []WebhookAttemptRead `json:"data"`
	Meta Meta                 `json:"meta"`
}

// GetData returns the value of Data.
func (s *WebhookAttemptArray) GetData() []WebhookAttemptRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *WebhookAttemptArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *WebhookAttemptArray) SetData(val []WebhookAttemptRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *WebhookAttemptArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*WebhookAttemptArray) getWebhookMessageAttemptsRes() {}

// Ref: #/components/schemas/WebhookAttemptRead
type WebhookAttemptRead struct {
	// Immutable value.
	Type       string         `json:"type"`
	ID         string         `json:"id"`
	Attributes WebhookAttempt `json:"attributes"`
}

// GetType returns the value of Type.
func (s *WebhookAttemptRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *WebhookAttemptRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *WebhookAttemptRead) GetAttributes() WebhookAttempt {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *WebhookAttemptRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *WebhookAttemptRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *WebhookAttemptRead) SetAttributes(val WebhookAttempt) {
	s.Attributes = val
}

// Ref: #/components/schemas/WebhookAttemptSingle
type WebhookAttemptSingle struct {
	Data WebhookAttemptRead `json:"data"`
}

// GetData returns the value of Data.
func (s *WebhookAttemptSingle) GetData() WebhookAttemptRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *WebhookAttemptSingle) SetData(val WebhookAttemptRead) {
	s.Data = val
}

func (*WebhookAttemptSingle) getSingleWebhookMessageAttemptRes() {}

// Format of the delivered response.
// Ref: #/components/schemas/WebhookDelivery
type WebhookDelivery string

const (
	WebhookDeliveryJSON WebhookDelivery = "JSON"
)

// AllValues returns all WebhookDelivery values.
func (WebhookDelivery) AllValues() []WebhookDelivery {
	return []WebhookDelivery{
		WebhookDeliveryJSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDelivery) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDeliveryJSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDelivery) UnmarshalText(data []byte) error {
	switch WebhookDelivery(data) {
	case WebhookDeliveryJSON:
		*s = WebhookDeliveryJSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookMessage
type WebhookMessage struct {
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
	// If this message is sent yet.
	Sent OptBool `json:"sent"`
	// If this message has errored out.
	Errored OptBool `json:"errored"`
	// The ID of the webhook this message belongs to.
	WebhookID OptString `json:"webhook_id"`
	// Long UUID string for identification of this webhook message.
	UUID OptString `json:"uuid"`
	// The actual message that is sent or will be sent as JSON string.
	String OptNilString `json:"string"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *WebhookMessage) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *WebhookMessage) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetSent returns the value of Sent.
func (s *WebhookMessage) GetSent() OptBool {
	return s.Sent
}

// GetErrored returns the value of Errored.
func (s *WebhookMessage) GetErrored() OptBool {
	return s.Errored
}

// GetWebhookID returns the value of WebhookID.
func (s *WebhookMessage) GetWebhookID() OptString {
	return s.WebhookID
}

// GetUUID returns the value of UUID.
func (s *WebhookMessage) GetUUID() OptString {
	return s.UUID
}

// GetString returns the value of String.
func (s *WebhookMessage) GetString() OptNilString {
	return s.String
}

// SetCreatedAt sets the value of CreatedAt.
func (s *WebhookMessage) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *WebhookMessage) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetSent sets the value of Sent.
func (s *WebhookMessage) SetSent(val OptBool) {
	s.Sent = val
}

// SetErrored sets the value of Errored.
func (s *WebhookMessage) SetErrored(val OptBool) {
	s.Errored = val
}

// SetWebhookID sets the value of WebhookID.
func (s *WebhookMessage) SetWebhookID(val OptString) {
	s.WebhookID = val
}

// SetUUID sets the value of UUID.
func (s *WebhookMessage) SetUUID(val OptString) {
	s.UUID = val
}

// SetString sets the value of String.
func (s *WebhookMessage) SetString(val OptNilString) {
	s.String = val
}

// Ref: #/components/schemas/WebhookMessageArray
type WebhookMessageArray struct {
	Data []WebhookMessageRead `json:"data"`
	Meta Meta                 `json:"meta"`
}

// GetData returns the value of Data.
func (s *WebhookMessageArray) GetData() []WebhookMessageRead {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *WebhookMessageArray) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *WebhookMessageArray) SetData(val []WebhookMessageRead) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *WebhookMessageArray) SetMeta(val Meta) {
	s.Meta = val
}

func (*WebhookMessageArray) getWebhookMessagesRes() {}

// Ref: #/components/schemas/WebhookMessageRead
type WebhookMessageRead struct {
	// Immutable value.
	Type       string         `json:"type"`
	ID         string         `json:"id"`
	Attributes WebhookMessage `json:"attributes"`
}

// GetType returns the value of Type.
func (s *WebhookMessageRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *WebhookMessageRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *WebhookMessageRead) GetAttributes() WebhookMessage {
	return s.Attributes
}

// SetType sets the value of Type.
func (s *WebhookMessageRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *WebhookMessageRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *WebhookMessageRead) SetAttributes(val WebhookMessage) {
	s.Attributes = val
}

// Ref: #/components/schemas/WebhookMessageSingle
type WebhookMessageSingle struct {
	Data WebhookMessageRead `json:"data"`
}

// GetData returns the value of Data.
func (s *WebhookMessageSingle) GetData() WebhookMessageRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *WebhookMessageSingle) SetData(val WebhookMessageRead) {
	s.Data = val
}

func (*WebhookMessageSingle) getSingleWebhookMessageRes() {}

// Ref: #/components/schemas/WebhookRead
type WebhookRead struct {
	// Immutable value.
	Type       string     `json:"type"`
	ID         string     `json:"id"`
	Attributes Webhook    `json:"attributes"`
	Links      ObjectLink `json:"links"`
}

// GetType returns the value of Type.
func (s *WebhookRead) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *WebhookRead) GetID() string {
	return s.ID
}

// GetAttributes returns the value of Attributes.
func (s *WebhookRead) GetAttributes() Webhook {
	return s.Attributes
}

// GetLinks returns the value of Links.
func (s *WebhookRead) GetLinks() ObjectLink {
	return s.Links
}

// SetType sets the value of Type.
func (s *WebhookRead) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *WebhookRead) SetID(val string) {
	s.ID = val
}

// SetAttributes sets the value of Attributes.
func (s *WebhookRead) SetAttributes(val Webhook) {
	s.Attributes = val
}

// SetLinks sets the value of Links.
func (s *WebhookRead) SetLinks(val ObjectLink) {
	s.Links = val
}

// Indicator for what Firefly III will deliver to the webhook URL.
// Ref: #/components/schemas/WebhookResponse
type WebhookResponse string

const (
	WebhookResponseTRANSACTIONS WebhookResponse = "TRANSACTIONS"
	WebhookResponseACCOUNTS     WebhookResponse = "ACCOUNTS"
	WebhookResponseNONE         WebhookResponse = "NONE"
)

// AllValues returns all WebhookResponse values.
func (WebhookResponse) AllValues() []WebhookResponse {
	return []WebhookResponse{
		WebhookResponseTRANSACTIONS,
		WebhookResponseACCOUNTS,
		WebhookResponseNONE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookResponse) MarshalText() ([]byte, error) {
	switch s {
	case WebhookResponseTRANSACTIONS:
		return []byte(s), nil
	case WebhookResponseACCOUNTS:
		return []byte(s), nil
	case WebhookResponseNONE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookResponse) UnmarshalText(data []byte) error {
	switch WebhookResponse(data) {
	case WebhookResponseTRANSACTIONS:
		*s = WebhookResponseTRANSACTIONS
		return nil
	case WebhookResponseACCOUNTS:
		*s = WebhookResponseACCOUNTS
		return nil
	case WebhookResponseNONE:
		*s = WebhookResponseNONE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSingle
type WebhookSingle struct {
	Data WebhookRead `json:"data"`
}

// GetData returns the value of Data.
func (s *WebhookSingle) GetData() WebhookRead {
	return s.Data
}

// SetData sets the value of Data.
func (s *WebhookSingle) SetData(val WebhookRead) {
	s.Data = val
}

func (*WebhookSingle) getWebhookRes()    {}
func (*WebhookSingle) storeWebhookRes()  {}
func (*WebhookSingle) updateWebhookRes() {}

// Ref: #/components/schemas/WebhookStore
type WebhookStore struct {
	// Boolean to indicate if the webhook is active.
	Active OptBool `json:"active"`
	// A title for the webhook for easy recognition.
	Title    string          `json:"title"`
	Trigger  WebhookTrigger  `json:"trigger"`
	Response WebhookResponse `json:"response"`
	Delivery WebhookDelivery `json:"delivery"`
	// The URL of the webhook. Has to start with `https`.
	URL string `json:"url"`
}

// GetActive returns the value of Active.
func (s *WebhookStore) GetActive() OptBool {
	return s.Active
}

// GetTitle returns the value of Title.
func (s *WebhookStore) GetTitle() string {
	return s.Title
}

// GetTrigger returns the value of Trigger.
func (s *WebhookStore) GetTrigger() WebhookTrigger {
	return s.Trigger
}

// GetResponse returns the value of Response.
func (s *WebhookStore) GetResponse() WebhookResponse {
	return s.Response
}

// GetDelivery returns the value of Delivery.
func (s *WebhookStore) GetDelivery() WebhookDelivery {
	return s.Delivery
}

// GetURL returns the value of URL.
func (s *WebhookStore) GetURL() string {
	return s.URL
}

// SetActive sets the value of Active.
func (s *WebhookStore) SetActive(val OptBool) {
	s.Active = val
}

// SetTitle sets the value of Title.
func (s *WebhookStore) SetTitle(val string) {
	s.Title = val
}

// SetTrigger sets the value of Trigger.
func (s *WebhookStore) SetTrigger(val WebhookTrigger) {
	s.Trigger = val
}

// SetResponse sets the value of Response.
func (s *WebhookStore) SetResponse(val WebhookResponse) {
	s.Response = val
}

// SetDelivery sets the value of Delivery.
func (s *WebhookStore) SetDelivery(val WebhookDelivery) {
	s.Delivery = val
}

// SetURL sets the value of URL.
func (s *WebhookStore) SetURL(val string) {
	s.URL = val
}

// The triggers for the webhook.
// Ref: #/components/schemas/WebhookTrigger
type WebhookTrigger string

const (
	WebhookTriggerSTORETRANSACTION   WebhookTrigger = "STORE_TRANSACTION"
	WebhookTriggerUPDATETRANSACTION  WebhookTrigger = "UPDATE_TRANSACTION"
	WebhookTriggerDESTROYTRANSACTION WebhookTrigger = "DESTROY_TRANSACTION"
)

// AllValues returns all WebhookTrigger values.
func (WebhookTrigger) AllValues() []WebhookTrigger {
	return []WebhookTrigger{
		WebhookTriggerSTORETRANSACTION,
		WebhookTriggerUPDATETRANSACTION,
		WebhookTriggerDESTROYTRANSACTION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookTrigger) MarshalText() ([]byte, error) {
	switch s {
	case WebhookTriggerSTORETRANSACTION:
		return []byte(s), nil
	case WebhookTriggerUPDATETRANSACTION:
		return []byte(s), nil
	case WebhookTriggerDESTROYTRANSACTION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookTrigger) UnmarshalText(data []byte) error {
	switch WebhookTrigger(data) {
	case WebhookTriggerSTORETRANSACTION:
		*s = WebhookTriggerSTORETRANSACTION
		return nil
	case WebhookTriggerUPDATETRANSACTION:
		*s = WebhookTriggerUPDATETRANSACTION
		return nil
	case WebhookTriggerDESTROYTRANSACTION:
		*s = WebhookTriggerDESTROYTRANSACTION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookUpdate
type WebhookUpdate struct {
	// Boolean to indicate if the webhook is active.
	Active OptBool `json:"active"`
	// A title for the webhook for easy recognition.
	Title OptString `json:"title"`
	// A 24-character secret for the webhook. It's generated by Firefly III when saving a new webhook. If
	// you submit a new secret through the PUT endpoint it will generate a new secret for the selected
	// webhook, a new secret bearing no relation to whatever you just submitted.
	Secret   OptString          `json:"secret"`
	Trigger  OptWebhookTrigger  `json:"trigger"`
	Response OptWebhookResponse `json:"response"`
	Delivery OptWebhookDelivery `json:"delivery"`
	// The URL of the webhook. Has to start with `https`.
	URL OptString `json:"url"`
}

// GetActive returns the value of Active.
func (s *WebhookUpdate) GetActive() OptBool {
	return s.Active
}

// GetTitle returns the value of Title.
func (s *WebhookUpdate) GetTitle() OptString {
	return s.Title
}

// GetSecret returns the value of Secret.
func (s *WebhookUpdate) GetSecret() OptString {
	return s.Secret
}

// GetTrigger returns the value of Trigger.
func (s *WebhookUpdate) GetTrigger() OptWebhookTrigger {
	return s.Trigger
}

// GetResponse returns the value of Response.
func (s *WebhookUpdate) GetResponse() OptWebhookResponse {
	return s.Response
}

// GetDelivery returns the value of Delivery.
func (s *WebhookUpdate) GetDelivery() OptWebhookDelivery {
	return s.Delivery
}

// GetURL returns the value of URL.
func (s *WebhookUpdate) GetURL() OptString {
	return s.URL
}

// SetActive sets the value of Active.
func (s *WebhookUpdate) SetActive(val OptBool) {
	s.Active = val
}

// SetTitle sets the value of Title.
func (s *WebhookUpdate) SetTitle(val OptString) {
	s.Title = val
}

// SetSecret sets the value of Secret.
func (s *WebhookUpdate) SetSecret(val OptString) {
	s.Secret = val
}

// SetTrigger sets the value of Trigger.
func (s *WebhookUpdate) SetTrigger(val OptWebhookTrigger) {
	s.Trigger = val
}

// SetResponse sets the value of Response.
func (s *WebhookUpdate) SetResponse(val OptWebhookResponse) {
	s.Response = val
}

// SetDelivery sets the value of Delivery.
func (s *WebhookUpdate) SetDelivery(val OptWebhookDelivery) {
	s.Delivery = val
}

// SetURL sets the value of URL.
func (s *WebhookUpdate) SetURL(val OptString) {
	s.URL = val
}
